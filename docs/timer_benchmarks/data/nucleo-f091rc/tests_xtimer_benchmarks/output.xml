<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:36:02.400" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.007" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:03.016" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:04.155" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:03.006" endtime="20201103 12:36:04.155"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.158" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:04.156" endtime="20201103 12:36:04.158"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.004" endtime="20201103 12:36:04.159"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:04.161" endtime="20201103 12:36:04.356"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.160" endtime="20201103 12:36:04.356"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.369" endtime="20201103 12:36:04.384"></status>
</kw>
<msg timestamp="20201103 12:36:04.385" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['his is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.368" endtime="20201103 12:36:04.385"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.387" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['his is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.386" endtime="20201103 12:36:04.388"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.391" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:04.389" endtime="20201103 12:36:04.391"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:04.365" endtime="20201103 12:36:04.392"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:04.363" endtime="20201103 12:36:04.392"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.362" endtime="20201103 12:36:04.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:04.397" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:04.396" endtime="20201103 12:36:04.397"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.394" endtime="20201103 12:36:04.397"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.361" endtime="20201103 12:36:04.397"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.360" endtime="20201103 12:36:04.398"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.398" endtime="20201103 12:36:04.400"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.359" endtime="20201103 12:36:04.400"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.401" endtime="20201103 12:36:04.403"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.357" endtime="20201103 12:36:04.403"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.002" endtime="20201103 12:36:04.404"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:04.410" endtime="20201103 12:36:04.429"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.408" endtime="20201103 12:36:04.430"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.445" endtime="20201103 12:36:04.459"></status>
</kw>
<msg timestamp="20201103 12:36:04.460" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.442" endtime="20201103 12:36:04.460"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.462" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.461" endtime="20201103 12:36:04.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.465" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:04.463" endtime="20201103 12:36:04.466"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:04.440" endtime="20201103 12:36:04.466"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:04.437" endtime="20201103 12:36:04.467"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.435" endtime="20201103 12:36:04.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:04.471" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:04.470" endtime="20201103 12:36:04.471"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.468" endtime="20201103 12:36:04.472"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.434" endtime="20201103 12:36:04.472"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.434" endtime="20201103 12:36:04.472"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.473" endtime="20201103 12:36:04.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.432" endtime="20201103 12:36:04.475"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.431" endtime="20201103 12:36:04.475"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.407" endtime="20201103 12:36:04.475"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.482" endtime="20201103 12:36:04.492"></status>
</kw>
<msg timestamp="20201103 12:36:04.493" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.481" endtime="20201103 12:36:04.493"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.495" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.494" endtime="20201103 12:36:04.495"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.496" endtime="20201103 12:36:04.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.478" endtime="20201103 12:36:04.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.476" endtime="20201103 12:36:04.499"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.503" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:36:04.502" endtime="20201103 12:36:04.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.505" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:36:04.504" endtime="20201103 12:36:04.505"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.499" endtime="20201103 12:36:04.506"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:04.404" endtime="20201103 12:36:04.506" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:02.525" endtime="20201103 12:36:04.509"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.558" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:04.567" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:05.794" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:04.557" endtime="20201103 12:36:05.795"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:05.799" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:05.797" endtime="20201103 12:36:05.799"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.556" endtime="20201103 12:36:05.800"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:05.802" endtime="20201103 12:36:06.027"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:05.800" endtime="20201103 12:36:06.028"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:06.042" endtime="20201103 12:36:06.055"></status>
</kw>
<msg timestamp="20201103 12:36:06.055" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Succe...</msg>
<status status="PASS" starttime="20201103 12:36:06.040" endtime="20201103 12:36:06.056"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:06.058" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Succe...</msg>
<status status="PASS" starttime="20201103 12:36:06.056" endtime="20201103 12:36:06.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:06.061" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:06.059" endtime="20201103 12:36:06.061"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:06.038" endtime="20201103 12:36:06.062"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:06.035" endtime="20201103 12:36:06.063"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.034" endtime="20201103 12:36:06.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:06.067" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:06.066" endtime="20201103 12:36:06.067"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.064" endtime="20201103 12:36:06.067"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.033" endtime="20201103 12:36:06.067"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.032" endtime="20201103 12:36:06.068"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:06.068" endtime="20201103 12:36:06.070"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.031" endtime="20201103 12:36:06.070"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:06.071" endtime="20201103 12:36:06.073"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.029" endtime="20201103 12:36:06.073"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.554" endtime="20201103 12:36:06.074"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:06.080" endtime="20201103 12:36:06.100"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.078" endtime="20201103 12:36:06.100"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:06.113" endtime="20201103 12:36:06.128"></status>
</kw>
<msg timestamp="20201103 12:36:06.128" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:06.112" endtime="20201103 12:36:06.129"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:06.132" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:06.129" endtime="20201103 12:36:06.132"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:06.135" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:06.133" endtime="20201103 12:36:06.135"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:06.109" endtime="20201103 12:36:06.136"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:06.107" endtime="20201103 12:36:06.137"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.106" endtime="20201103 12:36:06.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:06.141" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:06.140" endtime="20201103 12:36:06.141"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.138" endtime="20201103 12:36:06.141"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.105" endtime="20201103 12:36:06.142"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.104" endtime="20201103 12:36:06.142"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:06.142" endtime="20201103 12:36:06.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.103" endtime="20201103 12:36:06.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.101" endtime="20201103 12:36:06.145"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.076" endtime="20201103 12:36:06.145"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:06.154" endtime="20201103 12:36:13.180"></status>
</kw>
<msg timestamp="20201103 12:36:13.181" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:06.152" endtime="20201103 12:36:13.182"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.191" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:13.184" endtime="20201103 12:36:13.192"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.194" endtime="20201103 12:36:13.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.149" endtime="20201103 12:36:13.199"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.147" endtime="20201103 12:36:13.201"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:13.209" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:36:13.205" endtime="20201103 12:36:13.211"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.232" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:13.221" endtime="20201103 12:36:13.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.237" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:13.234" endtime="20201103 12:36:13.237"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.214" endtime="20201103 12:36:13.239"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.247" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:13.245" endtime="20201103 12:36:13.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.252" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:13.249" endtime="20201103 12:36:13.253"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.240" endtime="20201103 12:36:13.254"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.263" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:13.260" endtime="20201103 12:36:13.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.267" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:36:13.265" endtime="20201103 12:36:13.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.255" endtime="20201103 12:36:13.269"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.282" endtime="20201103 12:36:13.592"></status>
</kw>
<msg timestamp="20201103 12:36:13.595" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064924653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164934611, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:13.279" endtime="20201103 12:36:13.595"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.603" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064924653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164934611, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:13.596" endtime="20201103 12:36:13.603"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.604" endtime="20201103 12:36:13.605"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.274" endtime="20201103 12:36:13.606"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.270" endtime="20201103 12:36:13.606"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:13.610" level="INFO">${FILTERED} = [{'time': 1.164934611, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000995800000001, 'source_diff': 0.10000995800000001}, {'time': 1.264947111, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:13.607" endtime="20201103 12:36:13.610"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:13.624" level="INFO">${RESULT} = {'time': [1.164934611, 1.264947111, 1.364958569, 1.464970069, 1.564981528, 1.664993014, 1.7650045, 1.865015972, 1.965027472, 2.065038972, 2.165050431, 2.265061875, 2.365073292, 2.465084722, 2.56509613...</msg>
<status status="PASS" starttime="20201103 12:36:13.611" endtime="20201103 12:36:13.625"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.629" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:13.628" endtime="20201103 12:36:13.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.632" level="INFO">VALUE: [0.10000995800000001, 0.100011611, 0.10001058299999999, 0.10001061100000008, 0.10001059699999981, 0.10001059700000003, 0.10001059700000003, 0.10001059699999981, 0.10001061100000008, 0.10001062499999991, 0.1000105979999999, 0.10001056899999972, 0.10001052799999988, 0.10001055499999989, 0.10001054200000015, 0.10001054100000006, 0.1000105419999997, 0.10001056900000016, 0.10001052799999988, 0.10001052799999988, 0.10001049999999978, 0.10001052799999988, 0.10001055499999989, 0.10001054200000015, 0.10001054200000015, 0.10001055599999997, 0.10001055599999997, 0.10001055499999989, 0.10001055599999997, 0.10001054099999962, 0.10001055599999997, 0.10001055499999989, 0.1000105419999997, 0.10001061100000008, 0.10001055599999997, 0.1000105419999997, 0.10001059699999981, 0.10001055599999997, 0.10001055499999989, 0.1000105419999997, 0.10001055499999989, 0.10001054200000059, 0.10001054099999962, 0.10001055599999997, 0.10001054099999962, 0.10001055599999997, 0.10001063899999973, 0.10001058299999954, 0.10001055599999997, 0.10001056900000016]</msg>
<status status="PASS" starttime="20201103 12:36:13.630" endtime="20201103 12:36:13.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.625" endtime="20201103 12:36:13.633"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.635" endtime="20201103 12:36:13.636"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:13.638" endtime="20201103 12:36:13.658"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.637" endtime="20201103 12:36:13.658"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.633" endtime="20201103 12:36:13.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:06.146" endtime="20201103 12:36:13.659"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:06.074" endtime="20201103 12:36:13.659" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:13.666" endtime="20201103 12:36:13.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.665" endtime="20201103 12:36:13.686"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.699" endtime="20201103 12:36:13.713"></status>
</kw>
<msg timestamp="20201103 12:36:13.713" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:13.698" endtime="20201103 12:36:13.713"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.716" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:13.714" endtime="20201103 12:36:13.716"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:13.719" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:13.717" endtime="20201103 12:36:13.719"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:13.695" endtime="20201103 12:36:13.720"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:13.693" endtime="20201103 12:36:13.720"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.692" endtime="20201103 12:36:13.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:13.724" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:13.723" endtime="20201103 12:36:13.725"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.721" endtime="20201103 12:36:13.725"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.691" endtime="20201103 12:36:13.725"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.690" endtime="20201103 12:36:13.725"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.726" endtime="20201103 12:36:13.727"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.688" endtime="20201103 12:36:13.728"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.687" endtime="20201103 12:36:13.728"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.663" endtime="20201103 12:36:13.728"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:13.738" endtime="20201103 12:36:20.760"></status>
</kw>
<msg timestamp="20201103 12:36:20.761" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:13.736" endtime="20201103 12:36:20.761"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.766" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:20.763" endtime="20201103 12:36:20.767"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.768" endtime="20201103 12:36:20.772"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.733" endtime="20201103 12:36:20.773"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.731" endtime="20201103 12:36:20.774"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:20.779" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:36:20.775" endtime="20201103 12:36:20.779"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.787" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:20.785" endtime="20201103 12:36:20.788"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.791" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:20.789" endtime="20201103 12:36:20.792"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.780" endtime="20201103 12:36:20.793"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.802" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:20.800" endtime="20201103 12:36:20.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.806" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:20.804" endtime="20201103 12:36:20.807"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.794" endtime="20201103 12:36:20.808"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.816" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:20.814" endtime="20201103 12:36:20.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.820" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:36:20.818" endtime="20201103 12:36:20.821"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.809" endtime="20201103 12:36:20.823"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.836" endtime="20201103 12:36:21.134"></status>
</kw>
<msg timestamp="20201103 12:36:21.136" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062449694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162461667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:20.833" endtime="20201103 12:36:21.137"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:21.144" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062449694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162461667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:21.137" endtime="20201103 12:36:21.145"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:21.145" endtime="20201103 12:36:21.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.828" endtime="20201103 12:36:21.148"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.824" endtime="20201103 12:36:21.148"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:21.152" level="INFO">${FILTERED} = [{'time': 1.162461667, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000119730000002, 'source_diff': 0.1000119730000002}, {'time': 1.262472111, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:36:21.149" endtime="20201103 12:36:21.152"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:21.166" level="INFO">${RESULT} = {'time': [1.162461667, 1.262472111, 1.362483569, 1.462495069, 1.562506472, 1.662517944, 1.762529389, 1.862540806, 1.962552153, 2.062563556, 2.162574944, 2.262586347, 2.36259775, 2.462609194, 2.5626205...</msg>
<status status="PASS" starttime="20201103 12:36:21.153" endtime="20201103 12:36:21.166"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:21.170" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:21.169" endtime="20201103 12:36:21.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:21.173" level="INFO">VALUE: [0.1000119730000002, 0.10000955499999997, 0.10001058299999999, 0.10001061100000008, 0.10001058299999999, 0.10001054100000006, 0.10001058299999999, 0.10001054199999992, 0.10001051400000005, 0.10001051400000027, 0.10001050000000022, 0.10001052799999988, 0.10001051400000005, 0.10001055500000033, 0.10001051299999997, 0.10001051299999997, 0.10001051400000005, 0.10001058400000007, 0.10001055599999997, 0.10001051400000005, 0.10001054100000006, 0.1000105979999999, 0.10001051400000005, 0.10001051400000005, 0.10001054100000006, 0.1000105979999999, 0.10001051400000005, 0.10001054200000015, 0.10001051400000005, 0.10001052800000032, 0.10001054200000059, 0.10001054200000059, 0.10001051400000005, 0.10001052700000024, 0.10001045799999986, 0.10001052800000032, 0.10001051400000005, 0.10001052699999935, 0.10001051400000005, 0.1000105419999997, 0.10001055499999989, 0.10001052799999943, 0.10001052800000032, 0.1000104860000004, 0.10001052800000032, 0.10001051400000005, 0.1000105979999999, 0.10001052799999943, 0.10001051400000005, 0.10001055599999997]</msg>
<status status="PASS" starttime="20201103 12:36:21.171" endtime="20201103 12:36:21.173"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.167" endtime="20201103 12:36:21.174"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:21.176" endtime="20201103 12:36:21.177"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:21.179" endtime="20201103 12:36:21.199"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.178" endtime="20201103 12:36:21.199"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.174" endtime="20201103 12:36:21.200"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:13.729" endtime="20201103 12:36:21.200"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:13.661" endtime="20201103 12:36:21.201" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:21.207" endtime="20201103 12:36:21.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.206" endtime="20201103 12:36:21.227"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:21.240" endtime="20201103 12:36:21.255"></status>
</kw>
<msg timestamp="20201103 12:36:21.255" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:21.239" endtime="20201103 12:36:21.255"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:21.258" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:21.256" endtime="20201103 12:36:21.258"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:21.261" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:21.259" endtime="20201103 12:36:21.261"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:21.236" endtime="20201103 12:36:21.262"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:21.234" endtime="20201103 12:36:21.262"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.233" endtime="20201103 12:36:21.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:21.266" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:21.265" endtime="20201103 12:36:21.267"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.263" endtime="20201103 12:36:21.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.232" endtime="20201103 12:36:21.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.231" endtime="20201103 12:36:21.268"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:21.269" endtime="20201103 12:36:21.270"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.230" endtime="20201103 12:36:21.271"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.228" endtime="20201103 12:36:21.271"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.205" endtime="20201103 12:36:21.272"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:21.280" endtime="20201103 12:36:28.302"></status>
</kw>
<msg timestamp="20201103 12:36:28.303" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:21.278" endtime="20201103 12:36:28.303"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.308" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:28.305" endtime="20201103 12:36:28.309"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.310" endtime="20201103 12:36:28.314"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.276" endtime="20201103 12:36:28.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.274" endtime="20201103 12:36:28.316"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:28.321" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:36:28.317" endtime="20201103 12:36:28.322"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.330" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:28.328" endtime="20201103 12:36:28.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.334" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:28.332" endtime="20201103 12:36:28.335"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.323" endtime="20201103 12:36:28.336"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.344" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:28.342" endtime="20201103 12:36:28.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.348" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:28.346" endtime="20201103 12:36:28.349"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.337" endtime="20201103 12:36:28.350"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.358" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:28.356" endtime="20201103 12:36:28.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.362" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:36:28.360" endtime="20201103 12:36:28.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.351" endtime="20201103 12:36:28.364"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.378" endtime="20201103 12:36:28.683"></status>
</kw>
<msg timestamp="20201103 12:36:28.686" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063307264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163318194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:28.375" endtime="20201103 12:36:28.686"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.694" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063307264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163318194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:28.687" endtime="20201103 12:36:28.694"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.695" endtime="20201103 12:36:28.697"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.369" endtime="20201103 12:36:28.697"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.365" endtime="20201103 12:36:28.698"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:28.702" level="INFO">${FILTERED} = [{'time': 1.163318194, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001092999999983, 'source_diff': 0.10001092999999983}, {'time': 1.263329625, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:28.699" endtime="20201103 12:36:28.702"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:28.715" level="INFO">${RESULT} = {'time': [1.163318194, 1.263329625, 1.363341056, 1.463352472, 1.563363903, 1.663375333, 1.763386736, 1.863398167, 1.963409667, 2.063421153, 2.163432639, 2.263444125, 2.363455611, 2.463467083, 2.563478...</msg>
<status status="PASS" starttime="20201103 12:36:28.703" endtime="20201103 12:36:28.715"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.719" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:28.718" endtime="20201103 12:36:28.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.722" level="INFO">VALUE: [0.10001092999999983, 0.10001055599999997, 0.1000105560000002, 0.10001054100000006, 0.1000104719999999, 0.10001054100000006, 0.10001051400000005, 0.10001057000000002, 0.10001062500000013, 0.10001061100000008, 0.10001061099999964, 0.10001061100000008, 0.10001059699999981, 0.10001059699999981, 0.10001059699999981, 0.10001061099999964, 0.10001059800000034, 0.10001062499999991, 0.10001059700000026, 0.10001059700000026, 0.10001066699999983, 0.10001056900000016, 0.10001061100000008, 0.1000105979999999, 0.10001055599999997, 0.10001059700000026, 0.10001059699999981, 0.10001059699999981, 0.10001061100000008, 0.10001068100000055, 0.10001061100000008, 0.10001061100000008, 0.10001062500000035, 0.10001068100000055, 0.10001062500000035, 0.10001066600000019, 0.10001063899999973, 0.10001061100000008, 0.10001061100000008, 0.10001059699999981, 0.10001061100000008, 0.10001059699999981, 0.10001066699999939, 0.1000105979999999, 0.10001061100000008, 0.1000105970000007, 0.10001059699999981, 0.10001059699999981, 0.10001062500000035, 0.10001059699999981]</msg>
<status status="PASS" starttime="20201103 12:36:28.721" endtime="20201103 12:36:28.723"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.716" endtime="20201103 12:36:28.723"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.726" endtime="20201103 12:36:28.727"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:28.729" endtime="20201103 12:36:28.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.727" endtime="20201103 12:36:28.749"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.724" endtime="20201103 12:36:28.749"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.272" endtime="20201103 12:36:28.750"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:21.202" endtime="20201103 12:36:28.750" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:28.757" endtime="20201103 12:36:28.776"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.755" endtime="20201103 12:36:28.777"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.790" endtime="20201103 12:36:28.804"></status>
</kw>
<msg timestamp="20201103 12:36:28.805" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:28.788" endtime="20201103 12:36:28.805"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.807" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:28.806" endtime="20201103 12:36:28.808"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:28.810" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:28.808" endtime="20201103 12:36:28.811"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:28.785" endtime="20201103 12:36:28.811"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:28.783" endtime="20201103 12:36:28.812"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.782" endtime="20201103 12:36:28.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:28.816" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:28.815" endtime="20201103 12:36:28.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.813" endtime="20201103 12:36:28.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.781" endtime="20201103 12:36:28.817"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.780" endtime="20201103 12:36:28.817"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.817" endtime="20201103 12:36:28.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.779" endtime="20201103 12:36:28.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.777" endtime="20201103 12:36:28.821"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.754" endtime="20201103 12:36:28.821"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:28.831" endtime="20201103 12:36:35.854"></status>
</kw>
<msg timestamp="20201103 12:36:35.855" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:28.830" endtime="20201103 12:36:35.855"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.860" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:35.857" endtime="20201103 12:36:35.861"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:35.863" endtime="20201103 12:36:35.866"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.827" endtime="20201103 12:36:35.868"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.824" endtime="20201103 12:36:35.869"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:35.874" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:36:35.870" endtime="20201103 12:36:35.874"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.882" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:35.880" endtime="20201103 12:36:35.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.887" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:35.885" endtime="20201103 12:36:35.887"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:35.875" endtime="20201103 12:36:35.889"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.897" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:35.895" endtime="20201103 12:36:35.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.901" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:35.899" endtime="20201103 12:36:35.902"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:35.890" endtime="20201103 12:36:35.903"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.911" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:35.908" endtime="20201103 12:36:35.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:35.915" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:35.913" endtime="20201103 12:36:35.916"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:35.904" endtime="20201103 12:36:35.917"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:35.934" endtime="20201103 12:36:36.231"></status>
</kw>
<msg timestamp="20201103 12:36:36.234" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065908167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165919222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:35.928" endtime="20201103 12:36:36.234"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.242" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065908167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165919222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:36.235" endtime="20201103 12:36:36.242"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.243" endtime="20201103 12:36:36.245"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:35.922" endtime="20201103 12:36:36.245"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:35.919" endtime="20201103 12:36:36.246"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:36.250" level="INFO">${FILTERED} = [{'time': 1.165919222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001105500000018, 'source_diff': 0.10001105500000018}, {'time': 1.265930611, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:36.247" endtime="20201103 12:36:36.250"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:36.262" level="INFO">${RESULT} = {'time': [1.165919222, 1.265930611, 1.365942069, 1.465953514, 1.565964972, 1.665976431, 1.765987903, 1.865999361, 1.966010833, 2.066022278, 2.166033792, 2.266045222, 2.366056667, 2.466068125, 2.566079...</msg>
<status status="PASS" starttime="20201103 12:36:36.251" endtime="20201103 12:36:36.263"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.267" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:36.266" endtime="20201103 12:36:36.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.269" level="INFO">VALUE: [0.10001105500000018, 0.10001056899999994, 0.10001056899999994, 0.10001051400000005, 0.10001051400000005, 0.10001057000000002, 0.10001058400000007, 0.10001058299999999, 0.10001058299999999, 0.10001057000000024, 0.10001063899999973, 0.10001059699999981, 0.10001057000000024, 0.10001058299999999, 0.10001062499999991, 0.10001058299999999, 0.1000105699999998, 0.10001059700000026, 0.10001058300000043, 0.10001058400000007, 0.10001061100000008, 0.10001058299999999, 0.10001058400000007, 0.10001054200000015, 0.10001059699999981, 0.10001058299999999, 0.1000105699999998, 0.10001058299999999, 0.10001061099999964, 0.1000105699999998, 0.10001058399999962, 0.10001056900000016, 0.10001058300000043, 0.1000105419999997, 0.10001059699999981, 0.1000105970000007, 0.10001058400000051, 0.10001058300000043, 0.10001059699999981, 0.10001058299999954, 0.10001058399999962, 0.10001056900000016, 0.1000105970000007, 0.10001057000000024, 0.10001056999999935, 0.10001058299999954, 0.100010653, 0.1000105979999999, 0.10001058399999962, 0.1000105419999997]</msg>
<status status="PASS" starttime="20201103 12:36:36.268" endtime="20201103 12:36:36.270"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.263" endtime="20201103 12:36:36.270"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.273" endtime="20201103 12:36:36.274"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:36.276" endtime="20201103 12:36:36.295"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.275" endtime="20201103 12:36:36.296"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.271" endtime="20201103 12:36:36.296"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:28.822" endtime="20201103 12:36:36.297"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:28.752" endtime="20201103 12:36:36.297" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:36.304" endtime="20201103 12:36:36.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.302" endtime="20201103 12:36:36.324"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.337" endtime="20201103 12:36:36.351"></status>
</kw>
<msg timestamp="20201103 12:36:36.352" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:36.336" endtime="20201103 12:36:36.352"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.354" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:36.353" endtime="20201103 12:36:36.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.357" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:36.355" endtime="20201103 12:36:36.357"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:36.333" endtime="20201103 12:36:36.358"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:36.330" endtime="20201103 12:36:36.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.329" endtime="20201103 12:36:36.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:36.363" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:36.362" endtime="20201103 12:36:36.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.360" endtime="20201103 12:36:36.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.328" endtime="20201103 12:36:36.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.327" endtime="20201103 12:36:36.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.364" endtime="20201103 12:36:36.366"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.326" endtime="20201103 12:36:36.366"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.324" endtime="20201103 12:36:36.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.301" endtime="20201103 12:36:36.367"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.376" endtime="20201103 12:36:43.398"></status>
</kw>
<msg timestamp="20201103 12:36:43.399" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:36.374" endtime="20201103 12:36:43.400"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.404" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:43.401" endtime="20201103 12:36:43.405"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.407" endtime="20201103 12:36:43.410"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.371" endtime="20201103 12:36:43.411"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.369" endtime="20201103 12:36:43.412"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:43.417" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:36:43.414" endtime="20201103 12:36:43.418"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.426" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:43.424" endtime="20201103 12:36:43.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.430" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:43.428" endtime="20201103 12:36:43.431"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.419" endtime="20201103 12:36:43.432"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.441" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:43.438" endtime="20201103 12:36:43.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.447" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:43.444" endtime="20201103 12:36:43.448"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.433" endtime="20201103 12:36:43.449"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.457" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:43.455" endtime="20201103 12:36:43.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.462" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:36:43.459" endtime="20201103 12:36:43.462"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.450" endtime="20201103 12:36:43.463"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.469" endtime="20201103 12:36:43.765"></status>
</kw>
<msg timestamp="20201103 12:36:43.768" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062802833, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162814847, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:43.468" endtime="20201103 12:36:43.768"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.776" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062802833, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162814847, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:43.769" endtime="20201103 12:36:43.776"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.777" endtime="20201103 12:36:43.779"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.465" endtime="20201103 12:36:43.779"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.463" endtime="20201103 12:36:43.780"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:43.784" level="INFO">${FILTERED} = [{'time': 1.162814847, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001201400000004, 'source_diff': 0.10001201400000004}, {'time': 1.262825306, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:43.781" endtime="20201103 12:36:43.784"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:43.799" level="INFO">${RESULT} = {'time': [1.162814847, 1.262825306, 1.362836792, 1.462848278, 1.56285975, 1.662871208, 1.762882694, 1.862894181, 1.962905708, 2.062917153, 2.162928583, 2.262939986, 2.362951417, 2.462962819, 2.5629742...</msg>
<status status="PASS" starttime="20201103 12:36:43.785" endtime="20201103 12:36:43.799"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.803" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:43.802" endtime="20201103 12:36:43.804"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.806" level="INFO">VALUE: [0.10001201400000004, 0.10000958400000015, 0.10001058400000007, 0.10001059700000003, 0.10001059700000003, 0.10001056900000016, 0.10001058299999999, 0.1000105979999999, 0.10001066600000019, 0.10001062499999991, 0.10001056899999972, 0.10001051400000005, 0.10001054200000015, 0.1000105269999998, 0.1000105419999997, 0.1000105419999997, 0.10001054100000006, 0.10001052799999988, 0.10001055599999997, 0.10001054100000006, 0.10001052799999988, 0.10001054200000015, 0.10001055599999997, 0.10001054200000015, 0.10001047200000013, 0.10001062499999991, 0.10001051400000005, 0.10001055599999997, 0.10001054200000015, 0.10001052699999935, 0.10001055599999997, 0.10001055600000086, 0.10001055499999989, 0.10001055599999997, 0.10001051299999997, 0.1000105419999997, 0.10001055499999989, 0.10001054100000051, 0.1000105419999997, 0.10001052699999935, 0.1000104860000004, 0.10001051400000005, 0.10001052799999943, 0.10001054200000059, 0.10001055499999989, 0.10001055599999997, 0.10001054099999962, 0.10001055599999997, 0.10001052800000032, 0.10001052700000024]</msg>
<status status="PASS" starttime="20201103 12:36:43.804" endtime="20201103 12:36:43.806"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.800" endtime="20201103 12:36:43.806"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.809" endtime="20201103 12:36:43.810"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:43.812" endtime="20201103 12:36:43.832"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.811" endtime="20201103 12:36:43.832"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.807" endtime="20201103 12:36:43.833"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.368" endtime="20201103 12:36:43.833"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:36.299" endtime="20201103 12:36:43.834" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:43.840" endtime="20201103 12:36:43.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.839" endtime="20201103 12:36:43.860"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.874" endtime="20201103 12:36:43.887"></status>
</kw>
<msg timestamp="20201103 12:36:43.888" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:43.872" endtime="20201103 12:36:43.888"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.890" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:43.889" endtime="20201103 12:36:43.891"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.893" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:43.892" endtime="20201103 12:36:43.894"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:43.870" endtime="20201103 12:36:43.894"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:43.867" endtime="20201103 12:36:43.895"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.865" endtime="20201103 12:36:43.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:43.899" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:43.898" endtime="20201103 12:36:43.899"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.896" endtime="20201103 12:36:43.900"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.865" endtime="20201103 12:36:43.900"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.864" endtime="20201103 12:36:43.900"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.901" endtime="20201103 12:36:43.903"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.863" endtime="20201103 12:36:43.903"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.861" endtime="20201103 12:36:43.904"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.837" endtime="20201103 12:36:43.904"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.912" endtime="20201103 12:36:50.935"></status>
</kw>
<msg timestamp="20201103 12:36:50.936" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:43.911" endtime="20201103 12:36:50.937"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.942" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:50.938" endtime="20201103 12:36:50.942"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.944" endtime="20201103 12:36:50.947"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.908" endtime="20201103 12:36:50.949"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.906" endtime="20201103 12:36:50.950"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:50.955" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:36:50.951" endtime="20201103 12:36:50.955"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.964" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:50.962" endtime="20201103 12:36:50.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.968" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:50.966" endtime="20201103 12:36:50.969"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.957" endtime="20201103 12:36:50.970"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.978" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:50.976" endtime="20201103 12:36:50.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.980" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:50.979" endtime="20201103 12:36:50.980"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.971" endtime="20201103 12:36:50.981"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.985" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:50.984" endtime="20201103 12:36:50.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.988" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:36:50.987" endtime="20201103 12:36:50.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.981" endtime="20201103 12:36:50.989"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.996" endtime="20201103 12:36:51.292"></status>
</kw>
<msg timestamp="20201103 12:36:51.295" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063380139, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163391125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:50.995" endtime="20201103 12:36:51.296"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:51.303" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063380139, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163391125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:51.296" endtime="20201103 12:36:51.304"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:51.305" endtime="20201103 12:36:51.307"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.992" endtime="20201103 12:36:51.307"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.990" endtime="20201103 12:36:51.308"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:51.312" level="INFO">${FILTERED} = [{'time': 1.163391125, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001098600000002, 'source_diff': 0.10001098600000002}, {'time': 1.263402556, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:51.308" endtime="20201103 12:36:51.312"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:51.325" level="INFO">${RESULT} = {'time': [1.163391125, 1.263402556, 1.363414, 1.463425431, 1.563436819, 1.663448264, 1.763459625, 1.863471042, 1.963482431, 2.063493847, 2.163505292, 2.263516639, 2.363528042, 2.463539444, 2.563550875...</msg>
<status status="PASS" starttime="20201103 12:36:51.313" endtime="20201103 12:36:51.325"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:51.329" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:51.328" endtime="20201103 12:36:51.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:51.332" level="INFO">VALUE: [0.10001098600000002, 0.10001055599999997, 0.10001052799999988, 0.1000105560000002, 0.1000105, 0.1000105699999998, 0.1000105280000001, 0.1000105280000001, 0.10001051400000005, 0.1000105280000001, 0.1000105699999998, 0.10001051400000005, 0.10001051400000005, 0.10001051299999997, 0.1000105419999997, 0.1000105699999998, 0.10001052800000032, 0.1000105269999998, 0.10001051400000005, 0.10001051400000005, 0.10001051400000005, 0.10001051299999997, 0.1000105419999997, 0.10001052799999988, 0.10001051400000005, 0.10001052700000024, 0.10001052799999988, 0.10001051400000005, 0.10001051400000005, 0.10001052799999988, 0.10001052800000032, 0.10001052799999943, 0.1000105419999997, 0.10001051400000005, 0.1000105419999997, 0.10001052800000032, 0.10001052699999935, 0.10001052799999943, 0.1000105419999997, 0.10001052699999935, 0.10001052799999943, 0.10001045800000075, 0.10001052799999943, 0.10001051299999997, 0.10001048599999951, 0.10001052800000032, 0.10001052799999943, 0.10001054099999962, 0.10001052799999943, 0.10001052799999943]</msg>
<status status="PASS" starttime="20201103 12:36:51.331" endtime="20201103 12:36:51.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:51.326" endtime="20201103 12:36:51.333"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:51.335" endtime="20201103 12:36:51.337"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:51.339" endtime="20201103 12:36:51.358"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:51.337" endtime="20201103 12:36:51.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:51.334" endtime="20201103 12:36:51.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.904" endtime="20201103 12:36:51.360"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:43.835" endtime="20201103 12:36:51.360" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:04.513" endtime="20201103 12:36:51.424"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f091rc</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:36:02.404" endtime="20201103 12:36:51.449"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f091rc</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
