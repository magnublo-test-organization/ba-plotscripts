<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:24:58.458" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.044" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:59.053" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:00.237" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:59.043" endtime="20201103 12:25:00.238"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.240" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:00.239" endtime="20201103 12:25:00.241"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.041" endtime="20201103 12:25:00.241"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:00.244" endtime="20201103 12:25:00.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.242" endtime="20201103 12:25:00.485"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.498" endtime="20201103 12:25:00.513"></status>
</kw>
<msg timestamp="20201103 12:25:00.513" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Succes...</msg>
<status status="PASS" starttime="20201103 12:25:00.496" endtime="20201103 12:25:00.513"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.516" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Succes...</msg>
<status status="PASS" starttime="20201103 12:25:00.514" endtime="20201103 12:25:00.516"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.519" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:00.517" endtime="20201103 12:25:00.520"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:00.494" endtime="20201103 12:25:00.521"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:00.491" endtime="20201103 12:25:00.521"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.490" endtime="20201103 12:25:00.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:00.526" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:00.525" endtime="20201103 12:25:00.527"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.523" endtime="20201103 12:25:00.527"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.489" endtime="20201103 12:25:00.527"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.489" endtime="20201103 12:25:00.527"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.528" endtime="20201103 12:25:00.530"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.487" endtime="20201103 12:25:00.530"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.531" endtime="20201103 12:25:00.532"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.485" endtime="20201103 12:25:00.533"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.040" endtime="20201103 12:25:00.533"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:00.539" endtime="20201103 12:25:00.558"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.538" endtime="20201103 12:25:00.559"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.574" endtime="20201103 12:25:00.588"></status>
</kw>
<msg timestamp="20201103 12:25:00.588" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:00.571" endtime="20201103 12:25:00.588"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.591" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:00.589" endtime="20201103 12:25:00.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.594" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:00.592" endtime="20201103 12:25:00.594"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:00.568" endtime="20201103 12:25:00.595"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:00.566" endtime="20201103 12:25:00.595"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.564" endtime="20201103 12:25:00.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:00.599" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:00.598" endtime="20201103 12:25:00.600"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.596" endtime="20201103 12:25:00.600"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.564" endtime="20201103 12:25:00.600"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.563" endtime="20201103 12:25:00.600"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.601" endtime="20201103 12:25:00.602"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.562" endtime="20201103 12:25:00.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.560" endtime="20201103 12:25:00.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.536" endtime="20201103 12:25:00.604"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.610" endtime="20201103 12:25:00.620"></status>
</kw>
<msg timestamp="20201103 12:25:00.621" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:00.609" endtime="20201103 12:25:00.621"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.623" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:00.622" endtime="20201103 12:25:00.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:00.624" endtime="20201103 12:25:00.626"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.606" endtime="20201103 12:25:00.626"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.604" endtime="20201103 12:25:00.626"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.631" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:00.629" endtime="20201103 12:25:00.631"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.633" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:25:00.632" endtime="20201103 12:25:00.633"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.627" endtime="20201103 12:25:00.633"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:00.534" endtime="20201103 12:25:00.634" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:58.580" endtime="20201103 12:25:00.636"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:00.685" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:00.694" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:01.898" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:00.684" endtime="20201103 12:25:01.899"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:01.901" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:01.900" endtime="20201103 12:25:01.902"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.682" endtime="20201103 12:25:01.902"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:01.904" endtime="20201103 12:25:02.214"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:01.903" endtime="20201103 12:25:02.214"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:02.226" endtime="20201103 12:25:02.241"></status>
</kw>
<msg timestamp="20201103 12:25:02.242" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:02.225" endtime="20201103 12:25:02.242"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:02.247" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:02.243" endtime="20201103 12:25:02.248"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:02.253" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:02.249" endtime="20201103 12:25:02.254"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:02.223" endtime="20201103 12:25:02.255"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:02.220" endtime="20201103 12:25:02.256"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.219" endtime="20201103 12:25:02.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:02.263" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:02.262" endtime="20201103 12:25:02.263"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.257" endtime="20201103 12:25:02.263"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.218" endtime="20201103 12:25:02.263"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.218" endtime="20201103 12:25:02.264"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:02.264" endtime="20201103 12:25:02.266"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.216" endtime="20201103 12:25:02.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:02.267" endtime="20201103 12:25:02.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.215" endtime="20201103 12:25:02.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:00.681" endtime="20201103 12:25:02.269"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:02.277" endtime="20201103 12:25:02.297"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.275" endtime="20201103 12:25:02.297"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:02.310" endtime="20201103 12:25:02.324"></status>
</kw>
<msg timestamp="20201103 12:25:02.325" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:02.309" endtime="20201103 12:25:02.325"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:02.327" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:02.326" endtime="20201103 12:25:02.328"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:02.330" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:02.328" endtime="20201103 12:25:02.331"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:02.306" endtime="20201103 12:25:02.331"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:02.304" endtime="20201103 12:25:02.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.303" endtime="20201103 12:25:02.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:02.336" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:02.335" endtime="20201103 12:25:02.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.333" endtime="20201103 12:25:02.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.302" endtime="20201103 12:25:02.337"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.301" endtime="20201103 12:25:02.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:02.337" endtime="20201103 12:25:02.339"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.300" endtime="20201103 12:25:02.339"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.298" endtime="20201103 12:25:02.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.273" endtime="20201103 12:25:02.340"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:02.348" endtime="20201103 12:25:09.372"></status>
</kw>
<msg timestamp="20201103 12:25:09.373" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:02.347" endtime="20201103 12:25:09.373"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.378" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:09.375" endtime="20201103 12:25:09.379"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.382" endtime="20201103 12:25:09.386"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.344" endtime="20201103 12:25:09.387"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.342" endtime="20201103 12:25:09.389"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:09.395" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:25:09.391" endtime="20201103 12:25:09.395"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.404" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:09.401" endtime="20201103 12:25:09.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.408" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:09.406" endtime="20201103 12:25:09.409"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.396" endtime="20201103 12:25:09.410"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.418" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:09.416" endtime="20201103 12:25:09.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.422" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:09.420" endtime="20201103 12:25:09.423"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.411" endtime="20201103 12:25:09.424"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.433" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:09.430" endtime="20201103 12:25:09.434"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.437" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:09.435" endtime="20201103 12:25:09.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.425" endtime="20201103 12:25:09.439"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.450" endtime="20201103 12:25:09.752"></status>
</kw>
<msg timestamp="20201103 12:25:09.755" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062644097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162654083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:09.448" endtime="20201103 12:25:09.755"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.763" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062644097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162654083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:09.756" endtime="20201103 12:25:09.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.764" endtime="20201103 12:25:09.765"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.444" endtime="20201103 12:25:09.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.440" endtime="20201103 12:25:09.766"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:09.770" level="INFO">${FILTERED} = [{'time': 1.162654083, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000099860000001, 'source_diff': 0.1000099860000001}, {'time': 1.262666514, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:25:09.767" endtime="20201103 12:25:09.771"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:09.784" level="INFO">${RESULT} = {'diff': [0.1000099860000001, 0.10001155599999989, 0.1000105, 0.10001052799999988, 0.1000105699999998, 0.10001054199999992, 0.10001054200000015, 0.10001051400000005, 0.1000105280000001, 0.100010528000...</msg>
<status status="PASS" starttime="20201103 12:25:09.771" endtime="20201103 12:25:09.784"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.788" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:09.787" endtime="20201103 12:25:09.788"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.791" level="INFO">VALUE: [0.1000099860000001, 0.10001155599999989, 0.1000105, 0.10001052799999988, 0.1000105699999998, 0.10001054199999992, 0.10001054200000015, 0.10001051400000005, 0.1000105280000001, 0.1000105280000001, 0.10001054099999962, 0.10001051400000005, 0.10001051400000005, 0.10001054100000006, 0.10001052800000032, 0.10001052799999988, 0.10001056900000016, 0.10001052799999988, 0.10001052799999988, 0.10001054200000015, 0.10001058299999999, 0.10001054200000015, 0.10001054100000006, 0.10001054200000015, 0.10001055600000042, 0.10001052700000024, 0.10001054200000015, 0.1000105419999997, 0.10001061100000008, 0.1000105419999997, 0.1000105419999997, 0.10001054100000051, 0.10001055599999997, 0.10001055599999997, 0.10001054099999962, 0.10001054200000059, 0.10001054200000059, 0.10001056900000016, 0.10001052799999943, 0.1000105419999997, 0.10001052800000032, 0.1000105419999997, 0.10001052699999935, 0.10001051400000005, 0.10001055599999997, 0.10001061100000008, 0.1000105419999997, 0.10001055499999989, 0.10001049999999978, 0.10001052800000032]</msg>
<status status="PASS" starttime="20201103 12:25:09.789" endtime="20201103 12:25:09.791"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.785" endtime="20201103 12:25:09.792"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.794" endtime="20201103 12:25:09.795"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:09.798" endtime="20201103 12:25:09.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.796" endtime="20201103 12:25:09.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.792" endtime="20201103 12:25:09.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:02.341" endtime="20201103 12:25:09.820"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:02.270" endtime="20201103 12:25:09.821" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:09.830" endtime="20201103 12:25:09.850"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.828" endtime="20201103 12:25:09.850"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.864" endtime="20201103 12:25:09.878"></status>
</kw>
<msg timestamp="20201103 12:25:09.878" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:09.862" endtime="20201103 12:25:09.878"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.881" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:09.879" endtime="20201103 12:25:09.881"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.884" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:09.882" endtime="20201103 12:25:09.884"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:09.860" endtime="20201103 12:25:09.885"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:09.857" endtime="20201103 12:25:09.885"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.856" endtime="20201103 12:25:09.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:09.889" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:09.888" endtime="20201103 12:25:09.890"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.886" endtime="20201103 12:25:09.890"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.855" endtime="20201103 12:25:09.890"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.854" endtime="20201103 12:25:09.890"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.891" endtime="20201103 12:25:09.892"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.853" endtime="20201103 12:25:09.893"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.851" endtime="20201103 12:25:09.893"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.826" endtime="20201103 12:25:09.894"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:09.903" endtime="20201103 12:25:16.926"></status>
</kw>
<msg timestamp="20201103 12:25:16.927" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:09.902" endtime="20201103 12:25:16.927"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.932" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:16.929" endtime="20201103 12:25:16.933"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:16.934" endtime="20201103 12:25:16.937"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.898" endtime="20201103 12:25:16.939"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.896" endtime="20201103 12:25:16.940"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:16.945" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:25:16.941" endtime="20201103 12:25:16.945"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.953" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:16.951" endtime="20201103 12:25:16.954"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.958" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:16.956" endtime="20201103 12:25:16.958"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:16.946" endtime="20201103 12:25:16.959"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.968" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:16.966" endtime="20201103 12:25:16.969"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.973" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:16.971" endtime="20201103 12:25:16.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:16.961" endtime="20201103 12:25:16.974"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.982" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:16.980" endtime="20201103 12:25:16.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:16.987" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:25:16.985" endtime="20201103 12:25:16.987"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:16.976" endtime="20201103 12:25:16.988"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:17.002" endtime="20201103 12:25:17.306"></status>
</kw>
<msg timestamp="20201103 12:25:17.309" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063718153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163730056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:16.999" endtime="20201103 12:25:17.309"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:17.317" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063718153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163730056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:17.310" endtime="20201103 12:25:17.317"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:17.318" endtime="20201103 12:25:17.319"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:16.993" endtime="20201103 12:25:17.320"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:16.990" endtime="20201103 12:25:17.321"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:17.324" level="INFO">${FILTERED} = [{'time': 1.163730056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001190299999996, 'source_diff': 0.10001190299999996}, {'time': 1.263740444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:17.321" endtime="20201103 12:25:17.325"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:17.339" level="INFO">${RESULT} = {'diff': [0.10001190299999996, 0.10000949999999986, 0.10001048599999995, 0.1000105, 0.10001051400000005, 0.10001044400000003, 0.1000105, 0.10001052799999988, 0.1000105280000001, 0.10001051299999997, 0...</msg>
<status status="PASS" starttime="20201103 12:25:17.325" endtime="20201103 12:25:17.339"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:17.343" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:17.342" endtime="20201103 12:25:17.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:17.345" level="INFO">VALUE: [0.10001190299999996, 0.10000949999999986, 0.10001048599999995, 0.1000105, 0.10001051400000005, 0.10001044400000003, 0.1000105, 0.10001052799999988, 0.1000105280000001, 0.10001051299999997, 0.10001050000000022, 0.10001052799999988, 0.10001050000000022, 0.10001052799999988, 0.10001054200000015, 0.10001052799999988, 0.10001049999999978, 0.10001051300000041, 0.10001052800000032, 0.10001051400000005, 0.10001052799999988, 0.10001052799999988, 0.10001050000000022, 0.10001058299999999, 0.10001063900000018, 0.10001062499999991, 0.10001061099999964, 0.10001063900000018, 0.10001062499999991, 0.10001063899999973, 0.10001063899999973, 0.10001062500000035, 0.10001062500000035, 0.10001066700000028, 0.10001061100000008, 0.10001062499999946, 0.10001061100000008, 0.10001061100000008, 0.100010653, 0.10001061100000008, 0.10001062500000035, 0.10001061100000008, 0.10001061100000008, 0.10001063899999973, 0.10001063899999973, 0.10001061100000008, 0.100010653, 0.100010653, 0.10001062500000035, 0.10001061100000008]</msg>
<status status="PASS" starttime="20201103 12:25:17.344" endtime="20201103 12:25:17.346"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.340" endtime="20201103 12:25:17.346"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:17.349" endtime="20201103 12:25:17.350"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:17.352" endtime="20201103 12:25:17.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.350" endtime="20201103 12:25:17.372"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.347" endtime="20201103 12:25:17.372"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.894" endtime="20201103 12:25:17.373"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:09.823" endtime="20201103 12:25:17.373" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:17.380" endtime="20201103 12:25:17.399"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.379" endtime="20201103 12:25:17.400"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:17.413" endtime="20201103 12:25:17.427"></status>
</kw>
<msg timestamp="20201103 12:25:17.428" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:17.412" endtime="20201103 12:25:17.428"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:17.430" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:17.429" endtime="20201103 12:25:17.431"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:17.433" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:17.431" endtime="20201103 12:25:17.434"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:17.409" endtime="20201103 12:25:17.434"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:17.406" endtime="20201103 12:25:17.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.405" endtime="20201103 12:25:17.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:17.439" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:17.438" endtime="20201103 12:25:17.440"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.436" endtime="20201103 12:25:17.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.404" endtime="20201103 12:25:17.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.404" endtime="20201103 12:25:17.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:17.442" endtime="20201103 12:25:17.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.403" endtime="20201103 12:25:17.444"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.401" endtime="20201103 12:25:17.444"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.377" endtime="20201103 12:25:17.444"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:17.453" endtime="20201103 12:25:24.475"></status>
</kw>
<msg timestamp="20201103 12:25:24.477" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:17.451" endtime="20201103 12:25:24.477"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.482" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:24.479" endtime="20201103 12:25:24.483"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:24.484" endtime="20201103 12:25:24.488"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.448" endtime="20201103 12:25:24.489"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.446" endtime="20201103 12:25:24.490"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:24.495" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:25:24.491" endtime="20201103 12:25:24.495"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.504" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:24.502" endtime="20201103 12:25:24.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.509" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:24.507" endtime="20201103 12:25:24.509"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.497" endtime="20201103 12:25:24.511"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.518" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:24.516" endtime="20201103 12:25:24.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.523" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:24.521" endtime="20201103 12:25:24.524"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.512" endtime="20201103 12:25:24.525"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.533" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:24.531" endtime="20201103 12:25:24.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.537" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:25:24.535" endtime="20201103 12:25:24.538"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.526" endtime="20201103 12:25:24.539"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:24.553" endtime="20201103 12:25:24.857"></status>
</kw>
<msg timestamp="20201103 12:25:24.860" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063442389, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163452431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:24.550" endtime="20201103 12:25:24.861"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.868" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063442389, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163452431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:24.861" endtime="20201103 12:25:24.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:24.869" endtime="20201103 12:25:24.871"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.544" endtime="20201103 12:25:24.871"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.540" endtime="20201103 12:25:24.872"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:24.876" level="INFO">${FILTERED} = [{'time': 1.163452431, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001004200000008, 'source_diff': 0.10001004200000008}, {'time': 1.263463958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:24.873" endtime="20201103 12:25:24.876"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:24.889" level="INFO">${RESULT} = {'diff': [0.10001004200000008, 0.10001063899999996, 0.10001066700000005, 0.10001063899999996, 0.10001062499999991, 0.100010653, 0.10001058299999999, 0.10001055599999997, 0.10001058400000007, 0.1000105...</msg>
<status status="PASS" starttime="20201103 12:25:24.877" endtime="20201103 12:25:24.889"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.893" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:24.892" endtime="20201103 12:25:24.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.895" level="INFO">VALUE: [0.10001004200000008, 0.10001063899999996, 0.10001066700000005, 0.10001063899999996, 0.10001062499999991, 0.100010653, 0.10001058299999999, 0.10001055599999997, 0.10001058400000007, 0.10001058300000021, 0.10001056900000016, 0.10001059700000026, 0.10001058400000007, 0.10001059700000026, 0.10001061100000008, 0.10001058400000007, 0.10001059699999981, 0.10001058299999999, 0.10001056900000016, 0.10001061100000008, 0.10001058299999999, 0.10001058299999999, 0.10001059699999981, 0.10001058400000007, 0.1000105699999998, 0.10001059699999981, 0.10001059699999981, 0.10001058400000007, 0.10001058400000007, 0.10001059699999981, 0.10001058299999954, 0.10001058300000043, 0.10001059699999981, 0.10001058299999954, 0.10001058299999954, 0.10001061100000008, 0.1000105979999999, 0.10001058299999954, 0.10001058300000043, 0.10001061100000008, 0.10001058399999962, 0.10001058400000051, 0.10001058300000043, 0.10001061100000008, 0.1000105970000007, 0.10001058400000051, 0.10001066600000019, 0.1000105970000007, 0.1000105970000007, 0.10001058399999962]</msg>
<status status="PASS" starttime="20201103 12:25:24.894" endtime="20201103 12:25:24.896"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.890" endtime="20201103 12:25:24.897"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:24.899" endtime="20201103 12:25:24.900"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:24.902" endtime="20201103 12:25:24.922"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.901" endtime="20201103 12:25:24.922"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.897" endtime="20201103 12:25:24.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:17.445" endtime="20201103 12:25:24.923"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:17.375" endtime="20201103 12:25:24.924" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:24.930" endtime="20201103 12:25:24.950"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.929" endtime="20201103 12:25:24.950"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:24.963" endtime="20201103 12:25:24.977"></status>
</kw>
<msg timestamp="20201103 12:25:24.978" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:24.962" endtime="20201103 12:25:24.978"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.980" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:24.979" endtime="20201103 12:25:24.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.983" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:24.981" endtime="20201103 12:25:24.984"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:24.959" endtime="20201103 12:25:24.984"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:24.957" endtime="20201103 12:25:24.985"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.956" endtime="20201103 12:25:24.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:24.989" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:24.988" endtime="20201103 12:25:24.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.986" endtime="20201103 12:25:24.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.955" endtime="20201103 12:25:24.990"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.954" endtime="20201103 12:25:24.990"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:24.991" endtime="20201103 12:25:24.992"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.953" endtime="20201103 12:25:24.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.951" endtime="20201103 12:25:24.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.927" endtime="20201103 12:25:24.993"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.002" endtime="20201103 12:25:32.024"></status>
</kw>
<msg timestamp="20201103 12:25:32.025" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.000" endtime="20201103 12:25:32.025"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.030" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:32.027" endtime="20201103 12:25:32.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.033" endtime="20201103 12:25:32.037"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.997" endtime="20201103 12:25:32.038"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.995" endtime="20201103 12:25:32.039"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:32.044" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:25:32.041" endtime="20201103 12:25:32.045"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.053" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:32.051" endtime="20201103 12:25:32.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.057" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:32.055" endtime="20201103 12:25:32.058"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.046" endtime="20201103 12:25:32.059"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.067" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:32.065" endtime="20201103 12:25:32.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.071" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:32.069" endtime="20201103 12:25:32.072"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.060" endtime="20201103 12:25:32.073"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.081" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:32.079" endtime="20201103 12:25:32.082"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.085" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:25:32.083" endtime="20201103 12:25:32.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.074" endtime="20201103 12:25:32.087"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.103" endtime="20201103 12:25:32.403"></status>
</kw>
<msg timestamp="20201103 12:25:32.406" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062242583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162253653, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:32.098" endtime="20201103 12:25:32.406"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.413" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062242583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162253653, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:32.407" endtime="20201103 12:25:32.414"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.415" endtime="20201103 12:25:32.416"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.092" endtime="20201103 12:25:32.417"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.088" endtime="20201103 12:25:32.417"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:32.421" level="INFO">${FILTERED} = [{'time': 1.162253653, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001107000000009, 'source_diff': 0.10001107000000009}, {'time': 1.262264097, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:32.418" endtime="20201103 12:25:32.421"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:32.434" level="INFO">${RESULT} = {'diff': [0.10001107000000009, 0.10000961100000016, 0.10001062499999991, 0.10001059800000012, 0.10001061199999994, 0.10001061100000008, 0.10001059699999981, 0.10001058299999999, 0.1000105, 0.100010541...</msg>
<status status="PASS" starttime="20201103 12:25:32.422" endtime="20201103 12:25:32.434"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.438" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:32.437" endtime="20201103 12:25:32.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.441" level="INFO">VALUE: [0.10001107000000009, 0.10000961100000016, 0.10001062499999991, 0.10001059800000012, 0.10001061199999994, 0.10001061100000008, 0.10001059699999981, 0.10001058299999999, 0.1000105, 0.10001054100000006, 0.10001058400000007, 0.10001055599999997, 0.10001054200000015, 0.1000105419999997, 0.10001047200000013, 0.1000105419999997, 0.10001054099999962, 0.10001054200000015, 0.10001055600000042, 0.10001054200000015, 0.10001054200000015, 0.10001055499999989, 0.10001055599999997, 0.10001054100000006, 0.1000105699999998, 0.10001055500000033, 0.10001055599999997, 0.10001055500000033, 0.10001055499999989, 0.10001055600000042, 0.10001054100000051, 0.10001055599999997, 0.10001052700000024, 0.1000105419999997, 0.10001049999999978, 0.1000105419999997, 0.10001056900000016, 0.10001058400000051, 0.10001055499999989, 0.1000105419999997, 0.10001055599999997, 0.10001056900000016, 0.10001059699999981, 0.10001056999999935, 0.10001047299999932, 0.10001055499999989, 0.10001055599999997, 0.10001055499999989, 0.10001057000000024, 0.10001055499999989]</msg>
<status status="PASS" starttime="20201103 12:25:32.439" endtime="20201103 12:25:32.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.435" endtime="20201103 12:25:32.442"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.444" endtime="20201103 12:25:32.446"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:32.448" endtime="20201103 12:25:32.467"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.446" endtime="20201103 12:25:32.468"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.443" endtime="20201103 12:25:32.468"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.994" endtime="20201103 12:25:32.468"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:24.925" endtime="20201103 12:25:32.469" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:32.475" endtime="20201103 12:25:32.495"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.474" endtime="20201103 12:25:32.495"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.509" endtime="20201103 12:25:32.523"></status>
</kw>
<msg timestamp="20201103 12:25:32.524" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:32.508" endtime="20201103 12:25:32.524"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.526" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:32.525" endtime="20201103 12:25:32.526"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:32.529" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:32.527" endtime="20201103 12:25:32.529"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:32.504" endtime="20201103 12:25:32.530"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:32.502" endtime="20201103 12:25:32.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.501" endtime="20201103 12:25:32.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:32.535" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:32.534" endtime="20201103 12:25:32.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.532" endtime="20201103 12:25:32.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.500" endtime="20201103 12:25:32.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.499" endtime="20201103 12:25:32.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.536" endtime="20201103 12:25:32.538"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.498" endtime="20201103 12:25:32.538"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.496" endtime="20201103 12:25:32.539"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.473" endtime="20201103 12:25:32.539"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:32.547" endtime="20201103 12:25:39.570"></status>
</kw>
<msg timestamp="20201103 12:25:39.571" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:32.546" endtime="20201103 12:25:39.571"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.576" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.573" endtime="20201103 12:25:39.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.579" endtime="20201103 12:25:39.582"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.543" endtime="20201103 12:25:39.584"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.541" endtime="20201103 12:25:39.585"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:39.590" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:25:39.586" endtime="20201103 12:25:39.590"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.598" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:39.596" endtime="20201103 12:25:39.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.603" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:39.601" endtime="20201103 12:25:39.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.591" endtime="20201103 12:25:39.604"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.613" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:39.610" endtime="20201103 12:25:39.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.617" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:39.615" endtime="20201103 12:25:39.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.606" endtime="20201103 12:25:39.619"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.627" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:39.625" endtime="20201103 12:25:39.627"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.633" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:25:39.629" endtime="20201103 12:25:39.634"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.620" endtime="20201103 12:25:39.635"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.642" endtime="20201103 12:25:39.942"></status>
</kw>
<msg timestamp="20201103 12:25:39.945" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062990139, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163000056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:39.640" endtime="20201103 12:25:39.945"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.952" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062990139, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163000056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:39.946" endtime="20201103 12:25:39.953"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.953" endtime="20201103 12:25:39.955"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.637" endtime="20201103 12:25:39.956"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.636" endtime="20201103 12:25:39.956"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:39.960" level="INFO">${FILTERED} = [{'time': 1.163000056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000991699999995, 'source_diff': 0.10000991699999995}, {'time': 1.263011486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:39.957" endtime="20201103 12:25:39.960"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:39.975" level="INFO">${RESULT} = {'diff': [0.10000991699999995, 0.10001054199999992, 0.10001052799999988, 0.10001054199999992, 0.10001051299999997, 0.10001047200000013, 0.1000105280000001, 0.10001051399999983, 0.10001054100000006, 0....</msg>
<status status="PASS" starttime="20201103 12:25:39.961" endtime="20201103 12:25:39.975"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.979" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:39.978" endtime="20201103 12:25:39.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.982" level="INFO">VALUE: [0.10000991699999995, 0.10001054199999992, 0.10001052799999988, 0.10001054199999992, 0.10001051299999997, 0.10001047200000013, 0.1000105280000001, 0.10001051399999983, 0.10001054100000006, 0.1000105280000001, 0.10001052799999988, 0.10001055500000033, 0.10001057000000024, 0.10001051400000005, 0.1000105269999998, 0.10001052799999988, 0.10001052799999988, 0.10001052800000032, 0.10001051400000005, 0.10001054200000015, 0.10001054200000015, 0.10001052700000024, 0.10001052800000032, 0.10001052799999988, 0.10001054100000006, 0.1000105419999997, 0.10001052799999988, 0.10001045899999994, 0.10001052799999988, 0.10001052799999988, 0.10001054100000051, 0.10001052800000032, 0.10001058299999954, 0.10001054099999962, 0.10001056900000016, 0.10001051400000005, 0.10001052799999943, 0.10001054099999962, 0.1000105419999997, 0.10001052800000032, 0.10001054100000051, 0.1000105419999997, 0.10001052799999943, 0.10001055500000078, 0.10001052800000032, 0.10001055499999989, 0.10001054099999962, 0.10001054200000059, 0.10001052799999943, 0.10001052699999935]</msg>
<status status="PASS" starttime="20201103 12:25:39.980" endtime="20201103 12:25:39.982"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.976" endtime="20201103 12:25:39.983"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.985" endtime="20201103 12:25:39.986"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:39.988" endtime="20201103 12:25:40.008"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.987" endtime="20201103 12:25:40.008"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.983" endtime="20201103 12:25:40.009"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:32.540" endtime="20201103 12:25:40.009"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:32.470" endtime="20201103 12:25:40.009" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:40.016" endtime="20201103 12:25:40.036"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.015" endtime="20201103 12:25:40.036"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:40.051" endtime="20201103 12:25:40.064"></status>
</kw>
<msg timestamp="20201103 12:25:40.065" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:40.049" endtime="20201103 12:25:40.065"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:40.067" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:40.066" endtime="20201103 12:25:40.068"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:40.071" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:40.068" endtime="20201103 12:25:40.071"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:40.046" endtime="20201103 12:25:40.072"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:40.043" endtime="20201103 12:25:40.072"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.042" endtime="20201103 12:25:40.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:40.076" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:40.076" endtime="20201103 12:25:40.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.073" endtime="20201103 12:25:40.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.041" endtime="20201103 12:25:40.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.040" endtime="20201103 12:25:40.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:40.078" endtime="20201103 12:25:40.079"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.039" endtime="20201103 12:25:40.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.037" endtime="20201103 12:25:40.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.013" endtime="20201103 12:25:40.081"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:40.090" endtime="20201103 12:25:47.115"></status>
</kw>
<msg timestamp="20201103 12:25:47.116" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:40.088" endtime="20201103 12:25:47.116"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.122" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.118" endtime="20201103 12:25:47.123"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.125" endtime="20201103 12:25:47.131"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.085" endtime="20201103 12:25:47.133"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.083" endtime="20201103 12:25:47.136"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:47.148" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:25:47.140" endtime="20201103 12:25:47.149"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.158" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:47.156" endtime="20201103 12:25:47.159"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.163" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:47.161" endtime="20201103 12:25:47.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.151" endtime="20201103 12:25:47.165"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.173" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:47.171" endtime="20201103 12:25:47.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.177" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:47.175" endtime="20201103 12:25:47.178"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.166" endtime="20201103 12:25:47.179"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.186" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:47.183" endtime="20201103 12:25:47.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.191" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:25:47.189" endtime="20201103 12:25:47.192"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.180" endtime="20201103 12:25:47.193"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.204" endtime="20201103 12:25:47.502"></status>
</kw>
<msg timestamp="20201103 12:25:47.505" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064567653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164577597, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:47.200" endtime="20201103 12:25:47.505"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.513" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064567653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164577597, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:47.506" endtime="20201103 12:25:47.513"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.514" endtime="20201103 12:25:47.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.196" endtime="20201103 12:25:47.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.194" endtime="20201103 12:25:47.517"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:47.520" level="INFO">${FILTERED} = [{'time': 1.164577597, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000994400000018, 'source_diff': 0.10000994400000018}, {'time': 1.264590028, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:47.517" endtime="20201103 12:25:47.521"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:47.534" level="INFO">${RESULT} = {'diff': [0.10000994400000018, 0.10001154200000006, 0.10001055500000011, 0.10001054200000015, 0.10001055500000011, 0.1000105, 0.10001048599999995, 0.1000105, 0.10001051399999983, 0.1000105, 0.10001055...</msg>
<status status="PASS" starttime="20201103 12:25:47.522" endtime="20201103 12:25:47.534"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.538" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:47.537" endtime="20201103 12:25:47.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.540" level="INFO">VALUE: [0.10000994400000018, 0.10001154200000006, 0.10001055500000011, 0.10001054200000015, 0.10001055500000011, 0.1000105, 0.10001048599999995, 0.1000105, 0.10001051399999983, 0.1000105, 0.10001055599999997, 0.1000105699999998, 0.10001052799999988, 0.10001061100000008, 0.10001059700000026, 0.10001062499999991, 0.10001061100000008, 0.10001059700000026, 0.10001059700000026, 0.10001061099999964, 0.10001062499999991, 0.10001059699999981, 0.10001061100000008, 0.10001062499999991, 0.10001062499999991, 0.10001062499999991, 0.10001061100000008, 0.10001065199999992, 0.10001059699999981, 0.10001052800000032, 0.10001061100000008, 0.10001061100000008, 0.10001061100000008, 0.10001066700000028, 0.10001059699999981, 0.10001066700000028, 0.10001062499999946, 0.1000106109999992, 0.10001066700000028, 0.10001061200000017, 0.10001061200000017, 0.1000105979999999, 0.10001067999999957, 0.10001063900000062, 0.10001059699999981, 0.10001063899999973, 0.10001061100000008, 0.10001061100000008, 0.10001063899999973, 0.10001059699999981]</msg>
<status status="PASS" starttime="20201103 12:25:47.539" endtime="20201103 12:25:47.541"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.535" endtime="20201103 12:25:47.541"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.543" endtime="20201103 12:25:47.545"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:47.547" endtime="20201103 12:25:47.566"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.545" endtime="20201103 12:25:47.566"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.542" endtime="20201103 12:25:47.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:40.081" endtime="20201103 12:25:47.567"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:40.011" endtime="20201103 12:25:47.568" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:00.641" endtime="20201103 12:25:47.575"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f091rc</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:24:58.461" endtime="20201103 12:25:47.602"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f091rc</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
