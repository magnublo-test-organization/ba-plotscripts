<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:25:55.790" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.354" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:56.363" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:57.559" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:56.353" endtime="20201103 12:25:57.560"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.562" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:57.561" endtime="20201103 12:25:57.563"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.352" endtime="20201103 12:25:57.563"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:57.565" endtime="20201103 12:25:57.749"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.564" endtime="20201103 12:25:57.750"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.766" endtime="20201103 12:25:57.780"></status>
</kw>
<msg timestamp="20201103 12:25:57.780" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['in(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Suc...</msg>
<status status="PASS" starttime="20201103 12:25:57.764" endtime="20201103 12:25:57.780"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.783" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['in(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Suc...</msg>
<status status="PASS" starttime="20201103 12:25:57.781" endtime="20201103 12:25:57.784"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.787" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:57.785" endtime="20201103 12:25:57.787"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:57.762" endtime="20201103 12:25:57.788"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:57.760" endtime="20201103 12:25:57.788"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.758" endtime="20201103 12:25:57.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:57.793" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:57.792" endtime="20201103 12:25:57.793"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.789" endtime="20201103 12:25:57.793"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.755" endtime="20201103 12:25:57.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.754" endtime="20201103 12:25:57.794"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.794" endtime="20201103 12:25:57.796"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.753" endtime="20201103 12:25:57.796"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.797" endtime="20201103 12:25:57.799"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.751" endtime="20201103 12:25:57.799"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.350" endtime="20201103 12:25:57.800"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:57.806" endtime="20201103 12:25:57.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.804" endtime="20201103 12:25:57.828"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.856" endtime="20201103 12:25:57.876"></status>
</kw>
<msg timestamp="20201103 12:25:57.877" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:57.853" endtime="20201103 12:25:57.877"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.882" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:57.879" endtime="20201103 12:25:57.883"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.888" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:57.885" endtime="20201103 12:25:57.889"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:57.847" endtime="20201103 12:25:57.890"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:57.842" endtime="20201103 12:25:57.892"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.839" endtime="20201103 12:25:57.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:57.900" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:57.898" endtime="20201103 12:25:57.901"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.894" endtime="20201103 12:25:57.901"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.837" endtime="20201103 12:25:57.902"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.836" endtime="20201103 12:25:57.902"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.903" endtime="20201103 12:25:57.906"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.833" endtime="20201103 12:25:57.908"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.829" endtime="20201103 12:25:57.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.803" endtime="20201103 12:25:57.909"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.922" endtime="20201103 12:25:57.935"></status>
</kw>
<msg timestamp="20201103 12:25:57.935" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:57.919" endtime="20201103 12:25:57.935"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.939" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:57.937" endtime="20201103 12:25:57.939"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:57.940" endtime="20201103 12:25:57.942"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.913" endtime="20201103 12:25:57.942"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.911" endtime="20201103 12:25:57.943"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.949" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:57.948" endtime="20201103 12:25:57.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:57.951" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:25:57.950" endtime="20201103 12:25:57.952"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:57.943" endtime="20201103 12:25:57.952"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:57.800" endtime="20201103 12:25:57.953" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:55.903" endtime="20201103 12:25:57.955"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:58.004" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:58.013" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:59.183" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:58.003" endtime="20201103 12:25:59.184"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:59.186" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:59.185" endtime="20201103 12:25:59.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:58.002" endtime="20201103 12:25:59.187"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:59.189" endtime="20201103 12:25:59.422"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.187" endtime="20201103 12:25:59.422"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:59.442" endtime="20201103 12:25:59.460"></status>
</kw>
<msg timestamp="20201103 12:25:59.461" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:59.439" endtime="20201103 12:25:59.462"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:59.466" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:59.463" endtime="20201103 12:25:59.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:59.473" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:59.468" endtime="20201103 12:25:59.473"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:59.434" endtime="20201103 12:25:59.475"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:59.429" endtime="20201103 12:25:59.476"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.427" endtime="20201103 12:25:59.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:59.484" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:59.482" endtime="20201103 12:25:59.485"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.478" endtime="20201103 12:25:59.485"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.426" endtime="20201103 12:25:59.486"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.426" endtime="20201103 12:25:59.486"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:59.487" endtime="20201103 12:25:59.490"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.424" endtime="20201103 12:25:59.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:59.493" endtime="20201103 12:25:59.496"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.423" endtime="20201103 12:25:59.497"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:58.001" endtime="20201103 12:25:59.498"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:59.511" endtime="20201103 12:25:59.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.506" endtime="20201103 12:25:59.532"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:59.545" endtime="20201103 12:25:59.558"></status>
</kw>
<msg timestamp="20201103 12:25:59.559" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:59.543" endtime="20201103 12:25:59.559"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:59.562" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:59.560" endtime="20201103 12:25:59.562"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:59.565" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:59.563" endtime="20201103 12:25:59.565"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:59.541" endtime="20201103 12:25:59.566"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:59.538" endtime="20201103 12:25:59.566"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.537" endtime="20201103 12:25:59.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:59.570" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:59.569" endtime="20201103 12:25:59.571"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.567" endtime="20201103 12:25:59.571"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.536" endtime="20201103 12:25:59.571"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.536" endtime="20201103 12:25:59.571"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:59.572" endtime="20201103 12:25:59.573"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.534" endtime="20201103 12:25:59.574"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.533" endtime="20201103 12:25:59.574"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.504" endtime="20201103 12:25:59.574"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:59.583" endtime="20201103 12:26:06.605"></status>
</kw>
<msg timestamp="20201103 12:26:06.606" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:59.581" endtime="20201103 12:26:06.606"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.611" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:06.608" endtime="20201103 12:26:06.612"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:06.613" endtime="20201103 12:26:06.619"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.578" endtime="20201103 12:26:06.620"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.577" endtime="20201103 12:26:06.621"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:06.626" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:26:06.622" endtime="20201103 12:26:06.626"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.636" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:06.633" endtime="20201103 12:26:06.637"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.641" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:06.638" endtime="20201103 12:26:06.642"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:06.627" endtime="20201103 12:26:06.643"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.648" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:06.647" endtime="20201103 12:26:06.648"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.650" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:06.649" endtime="20201103 12:26:06.651"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:06.644" endtime="20201103 12:26:06.652"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.656" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:06.655" endtime="20201103 12:26:06.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.660" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:26:06.658" endtime="20201103 12:26:06.660"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:06.653" endtime="20201103 12:26:06.661"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:06.669" endtime="20201103 12:26:06.973"></status>
</kw>
<msg timestamp="20201103 12:26:06.976" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061505583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161515514, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:06.667" endtime="20201103 12:26:06.976"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:06.984" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061505583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161515514, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:06.977" endtime="20201103 12:26:06.984"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:06.985" endtime="20201103 12:26:06.986"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:06.664" endtime="20201103 12:26:06.987"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:06.662" endtime="20201103 12:26:06.987"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:06.991" level="INFO">${FILTERED} = [{'time': 1.161515514, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100009931, 'source_diff': 0.100009931}, {'time': 1.261527917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100011555999999...</msg>
<status status="PASS" starttime="20201103 12:26:06.988" endtime="20201103 12:26:06.991"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:07.004" level="INFO">${RESULT} = {'source_diff': [0.100009931, 0.10001155599999989, 0.10001055500000011, 0.10001058299999999, 0.10001057000000002, 0.10001056899999994, 0.10001056899999994, 0.1000105699999998, 0.10001058299999999, 0.1...</msg>
<status status="PASS" starttime="20201103 12:26:06.992" endtime="20201103 12:26:07.004"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:07.008" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:07.007" endtime="20201103 12:26:07.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:07.011" level="INFO">VALUE: [0.100009931, 0.10001155599999989, 0.10001055500000011, 0.10001058299999999, 0.10001057000000002, 0.10001056899999994, 0.10001056899999994, 0.1000105699999998, 0.10001058299999999, 0.10001059700000026, 0.1000105979999999, 0.10001056899999972, 0.10001056900000016, 0.10001058399999962, 0.10001056899999972, 0.10001056900000016, 0.10001057000000024, 0.10001056899999972, 0.10001055599999997, 0.10001058400000007, 0.10001062499999991, 0.10001052800000032, 0.1000105699999998, 0.10001059699999981, 0.10001058399999962, 0.10001056900000016, 0.10001061099999964, 0.10001057000000024, 0.10001058299999999, 0.10001061100000008, 0.10001058300000043, 0.10001056900000016, 0.10001059699999981, 0.10001056900000016, 0.1000105970000007, 0.10001058400000051, 0.10001059699999981, 0.10001057000000024, 0.10001058300000043, 0.1000105419999997, 0.10001058399999962, 0.10001056900000016, 0.10001057000000024, 0.10001061100000008, 0.10001055499999989, 0.10001058399999962, 0.10001055499999989, 0.10001057000000024, 0.10001061100000008, 0.10001059699999981]</msg>
<status status="PASS" starttime="20201103 12:26:07.009" endtime="20201103 12:26:07.012"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.005" endtime="20201103 12:26:07.012"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:07.014" endtime="20201103 12:26:07.016"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:07.018" endtime="20201103 12:26:07.037"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.016" endtime="20201103 12:26:07.038"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.013" endtime="20201103 12:26:07.038"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:59.575" endtime="20201103 12:26:07.038"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:59.499" endtime="20201103 12:26:07.039" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:07.046" endtime="20201103 12:26:07.065"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.044" endtime="20201103 12:26:07.065"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:07.079" endtime="20201103 12:26:07.093"></status>
</kw>
<msg timestamp="20201103 12:26:07.094" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:07.077" endtime="20201103 12:26:07.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:07.096" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:07.095" endtime="20201103 12:26:07.096"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:07.099" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:07.097" endtime="20201103 12:26:07.099"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:07.075" endtime="20201103 12:26:07.100"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:07.072" endtime="20201103 12:26:07.101"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.071" endtime="20201103 12:26:07.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:07.106" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:07.105" endtime="20201103 12:26:07.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.102" endtime="20201103 12:26:07.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.070" endtime="20201103 12:26:07.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.069" endtime="20201103 12:26:07.106"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:07.107" endtime="20201103 12:26:07.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.068" endtime="20201103 12:26:07.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.066" endtime="20201103 12:26:07.110"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.043" endtime="20201103 12:26:07.110"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:07.119" endtime="20201103 12:26:14.141"></status>
</kw>
<msg timestamp="20201103 12:26:14.142" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:07.118" endtime="20201103 12:26:14.142"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.147" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:14.144" endtime="20201103 12:26:14.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.149" endtime="20201103 12:26:14.153"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.114" endtime="20201103 12:26:14.154"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.112" endtime="20201103 12:26:14.155"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:14.160" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:26:14.156" endtime="20201103 12:26:14.160"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.168" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:14.166" endtime="20201103 12:26:14.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.172" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:14.170" endtime="20201103 12:26:14.173"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.161" endtime="20201103 12:26:14.174"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.183" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:14.181" endtime="20201103 12:26:14.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.187" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:14.185" endtime="20201103 12:26:14.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.175" endtime="20201103 12:26:14.189"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.196" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:14.194" endtime="20201103 12:26:14.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.201" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:26:14.199" endtime="20201103 12:26:14.201"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.190" endtime="20201103 12:26:14.203"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.216" endtime="20201103 12:26:14.518"></status>
</kw>
<msg timestamp="20201103 12:26:14.521" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064361208, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164373167, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:14.213" endtime="20201103 12:26:14.521"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.529" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064361208, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164373167, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:14.522" endtime="20201103 12:26:14.529"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.530" endtime="20201103 12:26:14.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.207" endtime="20201103 12:26:14.532"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.204" endtime="20201103 12:26:14.532"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:14.536" level="INFO">${FILTERED} = [{'time': 1.164373167, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001195899999993, 'source_diff': 0.10001195899999993}, {'time': 1.264383611, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:14.533" endtime="20201103 12:26:14.536"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:14.550" level="INFO">${RESULT} = {'source_diff': [0.10001195899999993, 0.1000095969999999, 0.1000105979999999, 0.10001059699999981, 0.1000105979999999, 0.10001059700000003, 0.10001059800000012, 0.10001055500000011, 0.1000105549999998...</msg>
<status status="PASS" starttime="20201103 12:26:14.537" endtime="20201103 12:26:14.551"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.554" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:14.553" endtime="20201103 12:26:14.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.557" level="INFO">VALUE: [0.10001195899999993, 0.1000095969999999, 0.1000105979999999, 0.10001059699999981, 0.1000105979999999, 0.10001059700000003, 0.10001059800000012, 0.10001055500000011, 0.10001055499999989, 0.10001055499999989, 0.1000105269999998, 0.10001059699999981, 0.10001058299999999, 0.10001054200000015, 0.10001052799999988, 0.10001055599999997, 0.10001052799999988, 0.10001055600000042, 0.10001054200000015, 0.1000105419999997, 0.10001058299999999, 0.10001054200000015, 0.10001054200000015, 0.10001052799999988, 0.10001051400000005, 0.10001058299999999, 0.1000105269999998, 0.10001055499999989, 0.10001049999999978, 0.10001052800000032, 0.10001055499999989, 0.10001055599999997, 0.10001057000000024, 0.10001057000000024, 0.10001066600000019, 0.10001066600000019, 0.1000106659999993, 0.10001063799999965, 0.10001065199999992, 0.10001065199999992, 0.100010653, 0.10001069399999984, 0.10001063899999973, 0.10001066700000028, 0.100010653, 0.100010653, 0.100010653, 0.10001063899999973, 0.10001061100000008, 0.100010653]</msg>
<status status="PASS" starttime="20201103 12:26:14.555" endtime="20201103 12:26:14.557"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.551" endtime="20201103 12:26:14.558"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.560" endtime="20201103 12:26:14.561"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:14.563" endtime="20201103 12:26:14.582"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.562" endtime="20201103 12:26:14.583"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.558" endtime="20201103 12:26:14.583"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:07.110" endtime="20201103 12:26:14.584"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:07.040" endtime="20201103 12:26:14.584" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:14.591" endtime="20201103 12:26:14.610"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.590" endtime="20201103 12:26:14.611"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.624" endtime="20201103 12:26:14.638"></status>
</kw>
<msg timestamp="20201103 12:26:14.638" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:14.622" endtime="20201103 12:26:14.638"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.641" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:14.639" endtime="20201103 12:26:14.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.644" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:14.642" endtime="20201103 12:26:14.644"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:14.620" endtime="20201103 12:26:14.645"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:14.617" endtime="20201103 12:26:14.645"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.616" endtime="20201103 12:26:14.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:14.649" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:14.648" endtime="20201103 12:26:14.650"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.646" endtime="20201103 12:26:14.651"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.615" endtime="20201103 12:26:14.651"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.615" endtime="20201103 12:26:14.651"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.652" endtime="20201103 12:26:14.653"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.613" endtime="20201103 12:26:14.654"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.612" endtime="20201103 12:26:14.654"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.588" endtime="20201103 12:26:14.655"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.664" endtime="20201103 12:26:21.687"></status>
</kw>
<msg timestamp="20201103 12:26:21.688" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:14.662" endtime="20201103 12:26:21.688"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.693" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:21.690" endtime="20201103 12:26:21.694"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.695" endtime="20201103 12:26:21.698"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.658" endtime="20201103 12:26:21.700"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.657" endtime="20201103 12:26:21.701"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:21.705" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:26:21.702" endtime="20201103 12:26:21.706"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.715" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:21.713" endtime="20201103 12:26:21.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.719" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:21.717" endtime="20201103 12:26:21.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.707" endtime="20201103 12:26:21.721"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.728" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:21.726" endtime="20201103 12:26:21.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.733" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:21.731" endtime="20201103 12:26:21.734"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.722" endtime="20201103 12:26:21.735"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.743" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:21.741" endtime="20201103 12:26:21.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.747" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:26:21.745" endtime="20201103 12:26:21.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.736" endtime="20201103 12:26:21.749"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.762" endtime="20201103 12:26:22.063"></status>
</kw>
<msg timestamp="20201103 12:26:22.066" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063341194, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163353236, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:21.759" endtime="20201103 12:26:22.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:22.074" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063341194, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163353236, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:22.067" endtime="20201103 12:26:22.074"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:22.075" endtime="20201103 12:26:22.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.754" endtime="20201103 12:26:22.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.750" endtime="20201103 12:26:22.078"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:22.082" level="INFO">${FILTERED} = [{'time': 1.163353236, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001204200000013, 'source_diff': 0.10001204200000013}, {'time': 1.263363736, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:22.078" endtime="20201103 12:26:22.082"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:22.094" level="INFO">${RESULT} = {'source_diff': [0.10001204200000013, 0.10000966700000014, 0.1000106810000001, 0.10001072199999994, 0.10001069400000007, 0.10001070800000011, 0.10001068000000002, 0.10001070800000011, 0.100010653, 0.1...</msg>
<status status="PASS" starttime="20201103 12:26:22.083" endtime="20201103 12:26:22.094"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:22.098" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:22.097" endtime="20201103 12:26:22.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:22.101" level="INFO">VALUE: [0.10001204200000013, 0.10000966700000014, 0.1000106810000001, 0.10001072199999994, 0.10001069400000007, 0.10001070800000011, 0.10001068000000002, 0.10001070800000011, 0.100010653, 0.1000106810000001, 0.10001061100000008, 0.10001061200000017, 0.10001062499999991, 0.10001061100000008, 0.10001062499999991, 0.10001062499999991, 0.10001062499999991, 0.10001065199999992, 0.10001062499999991, 0.10001061100000008, 0.10001062499999991, 0.10001061100000008, 0.10001062499999991, 0.10001062500000035, 0.10001063900000018, 0.10001061099999964, 0.10001063899999973, 0.10001062500000035, 0.10001062500000035, 0.10001063899999973, 0.10001061100000008, 0.10001062499999946, 0.10001063899999973, 0.10001062500000035, 0.10001061100000008, 0.10001066700000028, 0.100010653, 0.10001061100000008, 0.10001061100000008, 0.10001062500000035, 0.10001062499999946, 0.10001061100000008, 0.10001063900000062, 0.10001061100000008, 0.10001062500000035, 0.10001063899999973, 0.10001062499999946, 0.10001061200000017, 0.10001061100000008, 0.10001069499999993]</msg>
<status status="PASS" starttime="20201103 12:26:22.099" endtime="20201103 12:26:22.101"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.095" endtime="20201103 12:26:22.102"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:22.104" endtime="20201103 12:26:22.106"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:22.108" endtime="20201103 12:26:22.128"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.106" endtime="20201103 12:26:22.128"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.103" endtime="20201103 12:26:22.130"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.655" endtime="20201103 12:26:22.131"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:14.586" endtime="20201103 12:26:22.132" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:22.142" endtime="20201103 12:26:22.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.140" endtime="20201103 12:26:22.164"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:22.178" endtime="20201103 12:26:22.193"></status>
</kw>
<msg timestamp="20201103 12:26:22.194" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:22.176" endtime="20201103 12:26:22.194"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:22.196" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:22.195" endtime="20201103 12:26:22.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:22.199" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:22.197" endtime="20201103 12:26:22.200"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:22.173" endtime="20201103 12:26:22.200"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:22.171" endtime="20201103 12:26:22.201"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.170" endtime="20201103 12:26:22.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:22.205" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:22.204" endtime="20201103 12:26:22.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.202" endtime="20201103 12:26:22.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.169" endtime="20201103 12:26:22.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.168" endtime="20201103 12:26:22.206"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:22.207" endtime="20201103 12:26:22.208"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.167" endtime="20201103 12:26:22.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.165" endtime="20201103 12:26:22.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.137" endtime="20201103 12:26:22.210"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:22.218" endtime="20201103 12:26:29.237"></status>
</kw>
<msg timestamp="20201103 12:26:29.238" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:22.217" endtime="20201103 12:26:29.238"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.243" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:29.239" endtime="20201103 12:26:29.245"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.247" endtime="20201103 12:26:29.252"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.214" endtime="20201103 12:26:29.253"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.212" endtime="20201103 12:26:29.255"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:29.261" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:26:29.257" endtime="20201103 12:26:29.262"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.270" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:29.268" endtime="20201103 12:26:29.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.272" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:29.271" endtime="20201103 12:26:29.272"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.264" endtime="20201103 12:26:29.273"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.277" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:29.276" endtime="20201103 12:26:29.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.281" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:29.279" endtime="20201103 12:26:29.281"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.273" endtime="20201103 12:26:29.282"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.286" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:29.285" endtime="20201103 12:26:29.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.288" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:26:29.287" endtime="20201103 12:26:29.289"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.283" endtime="20201103 12:26:29.290"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.298" endtime="20201103 12:26:29.597"></status>
</kw>
<msg timestamp="20201103 12:26:29.600" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065929111, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165941111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:29.295" endtime="20201103 12:26:29.600"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.607" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065929111, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165941111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:29.601" endtime="20201103 12:26:29.608"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.608" endtime="20201103 12:26:29.610"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.293" endtime="20201103 12:26:29.611"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.290" endtime="20201103 12:26:29.611"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:29.615" level="INFO">${FILTERED} = [{'time': 1.165941111, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001199999999999, 'source_diff': 0.10001199999999999}, {'time': 1.265951611, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:29.612" endtime="20201103 12:26:29.615"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:29.628" level="INFO">${RESULT} = {'source_diff': [0.10001199999999999, 0.10000965300000009, 0.10001073699999985, 0.10001069400000007, 0.10001063900000018, 0.10001065199999992, 0.10001063899999996, 0.10001068000000002, 0.1000106389999...</msg>
<status status="PASS" starttime="20201103 12:26:29.616" endtime="20201103 12:26:29.628"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.632" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:29.631" endtime="20201103 12:26:29.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.634" level="INFO">VALUE: [0.10001199999999999, 0.10000965300000009, 0.10001073699999985, 0.10001069400000007, 0.10001063900000018, 0.10001065199999992, 0.10001063899999996, 0.10001068000000002, 0.10001063899999996, 0.100010653, 0.10001058299999999, 0.10001058400000007, 0.10001066700000028, 0.10001058400000007, 0.10001059699999981, 0.1000105979999999, 0.1000105419999997, 0.10001061200000017, 0.10001061100000008, 0.10001058399999962, 0.10001061099999964, 0.10001058299999999, 0.10001063899999973, 0.10001061100000008, 0.10001061100000008, 0.10001061100000008, 0.10001061200000017, 0.10001061100000008, 0.1000105979999999, 0.10001065300000045, 0.10001062499999946, 0.10001059699999981, 0.10001059699999981, 0.1000106109999992, 0.1000106109999992, 0.10001061200000017, 0.10001061100000008, 0.10001061200000017, 0.10001059699999981, 0.10001062500000035, 0.10001061100000008, 0.1000105970000007, 0.10001061100000008, 0.10001063900000062, 0.10001061100000008, 0.10001059699999981, 0.10001061100000008, 0.10001063899999973, 0.10001061100000008, 0.10001061100000008]</msg>
<status status="PASS" starttime="20201103 12:26:29.633" endtime="20201103 12:26:29.635"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.629" endtime="20201103 12:26:29.636"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.638" endtime="20201103 12:26:29.639"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:29.641" endtime="20201103 12:26:29.661"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.640" endtime="20201103 12:26:29.661"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.636" endtime="20201103 12:26:29.662"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:22.210" endtime="20201103 12:26:29.662"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:22.134" endtime="20201103 12:26:29.662" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:29.669" endtime="20201103 12:26:29.688"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.668" endtime="20201103 12:26:29.689"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.703" endtime="20201103 12:26:29.717"></status>
</kw>
<msg timestamp="20201103 12:26:29.717" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:29.701" endtime="20201103 12:26:29.718"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.720" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:29.718" endtime="20201103 12:26:29.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:29.723" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:29.721" endtime="20201103 12:26:29.723"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:29.698" endtime="20201103 12:26:29.724"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:29.695" endtime="20201103 12:26:29.724"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.694" endtime="20201103 12:26:29.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:29.728" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:29.728" endtime="20201103 12:26:29.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.726" endtime="20201103 12:26:29.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.693" endtime="20201103 12:26:29.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.693" endtime="20201103 12:26:29.729"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.730" endtime="20201103 12:26:29.732"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.691" endtime="20201103 12:26:29.732"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.690" endtime="20201103 12:26:29.733"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.666" endtime="20201103 12:26:29.733"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:29.741" endtime="20201103 12:26:36.764"></status>
</kw>
<msg timestamp="20201103 12:26:36.765" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:29.739" endtime="20201103 12:26:36.765"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.770" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:36.767" endtime="20201103 12:26:36.772"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:36.774" endtime="20201103 12:26:36.777"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.737" endtime="20201103 12:26:36.778"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.735" endtime="20201103 12:26:36.779"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:36.784" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:26:36.781" endtime="20201103 12:26:36.785"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.793" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:36.791" endtime="20201103 12:26:36.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.797" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:36.795" endtime="20201103 12:26:36.798"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:36.786" endtime="20201103 12:26:36.799"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.807" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:36.805" endtime="20201103 12:26:36.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.811" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:36.809" endtime="20201103 12:26:36.812"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:36.800" endtime="20201103 12:26:36.813"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.820" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:36.819" endtime="20201103 12:26:36.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:36.823" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:26:36.821" endtime="20201103 12:26:36.823"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:36.814" endtime="20201103 12:26:36.824"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:36.830" endtime="20201103 12:26:37.128"></status>
</kw>
<msg timestamp="20201103 12:26:37.131" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062958042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162970014, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:36.829" endtime="20201103 12:26:37.131"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:37.139" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062958042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162970014, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:37.132" endtime="20201103 12:26:37.139"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:37.140" endtime="20201103 12:26:37.142"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:36.826" endtime="20201103 12:26:37.142"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:36.824" endtime="20201103 12:26:37.143"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:37.146" level="INFO">${FILTERED} = [{'time': 1.162970014, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001197200000012, 'source_diff': 0.10001197200000012}, {'time': 1.262980486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:37.143" endtime="20201103 12:26:37.147"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:37.161" level="INFO">${RESULT} = {'source_diff': [0.10001197200000012, 0.10000962499999999, 0.10001062500000013, 0.10001055599999997, 0.10001054200000015, 0.10001063899999996, 0.10001055599999997, 0.10001058400000007, 0.1000105689999...</msg>
<status status="PASS" starttime="20201103 12:26:37.147" endtime="20201103 12:26:37.162"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:37.165" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:37.164" endtime="20201103 12:26:37.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:37.168" level="INFO">VALUE: [0.10001197200000012, 0.10000962499999999, 0.10001062500000013, 0.10001055599999997, 0.10001054200000015, 0.10001063899999996, 0.10001055599999997, 0.10001058400000007, 0.10001056899999994, 0.10001058300000021, 0.10001055599999997, 0.10001058299999999, 0.10001055499999989, 0.10001057000000024, 0.10001057000000024, 0.10001056899999972, 0.10001056900000016, 0.10001057000000024, 0.10001057000000024, 0.10001058299999999, 0.10001055599999997, 0.1000105699999998, 0.10001054200000015, 0.10001056900000016, 0.10001058400000007, 0.10001061100000008, 0.10001056900000016, 0.10001062499999991, 0.10001058400000007, 0.10001056900000016, 0.10001062499999946, 0.10001057000000024, 0.10001058299999954, 0.10001058299999954, 0.10001059699999981, 0.10001056899999927, 0.10001055499999989, 0.10001063899999973, 0.10001058300000043, 0.10001056900000016, 0.10001057000000024, 0.10001057000000024, 0.10001055499999989, 0.10001058399999962, 0.10001056999999935, 0.10001058300000043, 0.10001058400000051, 0.10001058400000051, 0.10001056900000016, 0.10001057000000024]</msg>
<status status="PASS" starttime="20201103 12:26:37.167" endtime="20201103 12:26:37.169"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.162" endtime="20201103 12:26:37.169"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:37.172" endtime="20201103 12:26:37.173"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:37.175" endtime="20201103 12:26:37.194"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.173" endtime="20201103 12:26:37.195"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.170" endtime="20201103 12:26:37.195"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:29.733" endtime="20201103 12:26:37.196"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:29.664" endtime="20201103 12:26:37.196" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:37.203" endtime="20201103 12:26:37.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.201" endtime="20201103 12:26:37.223"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:37.236" endtime="20201103 12:26:37.251"></status>
</kw>
<msg timestamp="20201103 12:26:37.251" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:37.235" endtime="20201103 12:26:37.251"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:37.254" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:37.252" endtime="20201103 12:26:37.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:37.256" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:37.255" endtime="20201103 12:26:37.257"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:37.232" endtime="20201103 12:26:37.257"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:37.229" endtime="20201103 12:26:37.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.228" endtime="20201103 12:26:37.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:37.262" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:37.261" endtime="20201103 12:26:37.262"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.259" endtime="20201103 12:26:37.263"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.227" endtime="20201103 12:26:37.263"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.226" endtime="20201103 12:26:37.263"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:37.264" endtime="20201103 12:26:37.265"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.225" endtime="20201103 12:26:37.266"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.223" endtime="20201103 12:26:37.266"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.200" endtime="20201103 12:26:37.266"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:37.275" endtime="20201103 12:26:44.298"></status>
</kw>
<msg timestamp="20201103 12:26:44.299" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:37.274" endtime="20201103 12:26:44.300"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.305" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:44.302" endtime="20201103 12:26:44.305"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:44.307" endtime="20201103 12:26:44.310"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.271" endtime="20201103 12:26:44.311"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.269" endtime="20201103 12:26:44.312"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:44.317" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:26:44.314" endtime="20201103 12:26:44.318"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.326" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:44.324" endtime="20201103 12:26:44.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.330" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:44.328" endtime="20201103 12:26:44.331"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.319" endtime="20201103 12:26:44.332"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.339" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:44.338" endtime="20201103 12:26:44.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.342" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:44.341" endtime="20201103 12:26:44.342"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.333" endtime="20201103 12:26:44.342"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.346" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:44.345" endtime="20201103 12:26:44.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.350" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:26:44.349" endtime="20201103 12:26:44.350"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.343" endtime="20201103 12:26:44.350"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:44.357" endtime="20201103 12:26:44.653"></status>
</kw>
<msg timestamp="20201103 12:26:44.656" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063380125, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163392069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:44.355" endtime="20201103 12:26:44.657"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.664" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063380125, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163392069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:44.658" endtime="20201103 12:26:44.665"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:44.665" endtime="20201103 12:26:44.667"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.353" endtime="20201103 12:26:44.668"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.351" endtime="20201103 12:26:44.668"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:44.672" level="INFO">${FILTERED} = [{'time': 1.163392069, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001194400000002, 'source_diff': 0.10001194400000002}, {'time': 1.2634025, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:26:44.669" endtime="20201103 12:26:44.672"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:44.685" level="INFO">${RESULT} = {'source_diff': [0.10001194400000002, 0.10000958300000007, 0.10001063900000018, 0.10001061099999986, 0.10001058399999985, 0.10001058299999999, 0.10001061100000008, 0.10001058299999999, 0.1000105839999...</msg>
<status status="PASS" starttime="20201103 12:26:44.673" endtime="20201103 12:26:44.686"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.690" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:44.689" endtime="20201103 12:26:44.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:44.692" level="INFO">VALUE: [0.10001194400000002, 0.10000958300000007, 0.10001063900000018, 0.10001061099999986, 0.10001058399999985, 0.10001058299999999, 0.10001061100000008, 0.10001058299999999, 0.10001058399999985, 0.10001055599999997, 0.10001052799999988, 0.10001052799999988, 0.10001055599999997, 0.10001052799999988, 0.10001054200000015, 0.10001052799999988, 0.10001052799999988, 0.10001052799999988, 0.10001052799999988, 0.10001047299999977, 0.10001059700000026, 0.10001056900000016, 0.10001055599999997, 0.10001065299999956, 0.10001066700000028, 0.10001066699999983, 0.10001066700000028, 0.100010653, 0.10001063899999973, 0.10001059700000026, 0.100010653, 0.10001063800000054, 0.10001066600000019, 0.10001058399999962, 0.10001063900000062, 0.10001068099999966, 0.10001066700000028, 0.10001063899999973, 0.10001066699999939, 0.10001063899999973, 0.100010653, 0.100010653, 0.10001066700000028, 0.10001068000000046, 0.10001063899999973, 0.10001067999999957, 0.10001065199999992, 0.10001066600000019, 0.10001065199999992, 0.10001066600000019]</msg>
<status status="PASS" starttime="20201103 12:26:44.691" endtime="20201103 12:26:44.693"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.686" endtime="20201103 12:26:44.693"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:44.695" endtime="20201103 12:26:44.697"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:44.699" endtime="20201103 12:26:44.718"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.697" endtime="20201103 12:26:44.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:44.694" endtime="20201103 12:26:44.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:37.267" endtime="20201103 12:26:44.719"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:37.198" endtime="20201103 12:26:44.720" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:57.960" endtime="20201103 12:26:44.727"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f091rc</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:55.794" endtime="20201103 12:26:44.753"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f091rc</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
