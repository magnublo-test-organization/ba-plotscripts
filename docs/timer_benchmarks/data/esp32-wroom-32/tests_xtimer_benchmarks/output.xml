<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:24:53.531" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:54.107" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:54.115" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:55.120" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:54.105" endtime="20201103 12:24:55.121"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.124" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20201103 12:24:55.122" endtime="20201103 12:24:56.125"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:54.104" endtime="20201103 12:24:56.126"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:56.131" endtime="20201103 12:24:56.352"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.128" endtime="20201103 12:24:56.353"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.367" endtime="20201103 12:24:56.387"></status>
</kw>
<msg timestamp="20201103 12:24:56.387" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.364" endtime="20201103 12:24:56.387"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.390" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.388" endtime="20201103 12:24:56.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.393" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:56.391" endtime="20201103 12:24:56.393"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:56.362" endtime="20201103 12:24:56.394"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:56.359" endtime="20201103 12:24:56.394"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.358" endtime="20201103 12:24:56.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:56.399" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:56.398" endtime="20201103 12:24:56.399"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.396" endtime="20201103 12:24:56.399"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.357" endtime="20201103 12:24:56.399"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.357" endtime="20201103 12:24:56.400"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.400" endtime="20201103 12:24:56.402"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.355" endtime="20201103 12:24:56.402"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.403" endtime="20201103 12:24:56.405"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.354" endtime="20201103 12:24:56.405"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:54.102" endtime="20201103 12:24:56.405"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:56.412" endtime="20201103 12:24:56.431"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.410" endtime="20201103 12:24:56.431"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.446" endtime="20201103 12:24:56.465"></status>
</kw>
<msg timestamp="20201103 12:24:56.465" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.445" endtime="20201103 12:24:56.465"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.468" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.466" endtime="20201103 12:24:56.468"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.471" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:56.469" endtime="20201103 12:24:56.471"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:56.442" endtime="20201103 12:24:56.472"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:56.439" endtime="20201103 12:24:56.472"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.437" endtime="20201103 12:24:56.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:56.476" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:56.475" endtime="20201103 12:24:56.477"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.473" endtime="20201103 12:24:56.477"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.436" endtime="20201103 12:24:56.477"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.435" endtime="20201103 12:24:56.477"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.478" endtime="20201103 12:24:56.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.434" endtime="20201103 12:24:56.480"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.432" endtime="20201103 12:24:56.480"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.409" endtime="20201103 12:24:56.481"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.487" endtime="20201103 12:24:56.500"></status>
</kw>
<msg timestamp="20201103 12:24:56.501" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.486" endtime="20201103 12:24:56.501"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.503" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.502" endtime="20201103 12:24:56.503"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.504" endtime="20201103 12:24:56.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.483" endtime="20201103 12:24:56.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.481" endtime="20201103 12:24:56.507"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.511" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:24:56.510" endtime="20201103 12:24:56.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.513" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:24:56.512" endtime="20201103 12:24:56.513"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.507" endtime="20201103 12:24:56.514"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:56.406" endtime="20201103 12:24:56.514" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:53.643" endtime="20201103 12:24:56.517"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.567" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:56.575" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:57.626" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:56.566" endtime="20201103 12:24:57.627"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.630" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20201103 12:24:57.628" endtime="20201103 12:24:58.631"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.564" endtime="20201103 12:24:58.632"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:58.637" endtime="20201103 12:24:58.921"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.634" endtime="20201103 12:24:58.921"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.934" endtime="20201103 12:24:58.955"></status>
</kw>
<msg timestamp="20201103 12:24:58.956" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:58.932" endtime="20201103 12:24:58.957"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.959" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:58.958" endtime="20201103 12:24:58.960"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.967" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:58.962" endtime="20201103 12:24:58.968"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:58.930" endtime="20201103 12:24:58.970"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:58.928" endtime="20201103 12:24:58.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.926" endtime="20201103 12:24:58.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:58.979" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:58.978" endtime="20201103 12:24:58.979"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.974" endtime="20201103 12:24:58.979"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.925" endtime="20201103 12:24:58.980"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.925" endtime="20201103 12:24:58.980"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.981" endtime="20201103 12:24:58.982"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.924" endtime="20201103 12:24:58.983"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.983" endtime="20201103 12:24:58.985"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.922" endtime="20201103 12:24:58.986"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.563" endtime="20201103 12:24:58.986"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:58.991" endtime="20201103 12:24:59.011"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.990" endtime="20201103 12:24:59.011"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.024" endtime="20201103 12:24:59.040"></status>
</kw>
<msg timestamp="20201103 12:24:59.041" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:59.023" endtime="20201103 12:24:59.041"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.044" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:59.042" endtime="20201103 12:24:59.044"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.047" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:59.045" endtime="20201103 12:24:59.047"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:59.020" endtime="20201103 12:24:59.048"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:59.018" endtime="20201103 12:24:59.048"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.017" endtime="20201103 12:24:59.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:59.052" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:59.052" endtime="20201103 12:24:59.053"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.050" endtime="20201103 12:24:59.053"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.016" endtime="20201103 12:24:59.053"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.015" endtime="20201103 12:24:59.053"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.054" endtime="20201103 12:24:59.056"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.014" endtime="20201103 12:24:59.056"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.012" endtime="20201103 12:24:59.057"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.989" endtime="20201103 12:24:59.057"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.066" endtime="20201103 12:25:06.092"></status>
</kw>
<msg timestamp="20201103 12:25:06.093" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:59.065" endtime="20201103 12:25:06.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.100" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.096" endtime="20201103 12:25:06.101"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.103" endtime="20201103 12:25:06.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.061" endtime="20201103 12:25:06.107"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.059" endtime="20201103 12:25:06.108"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:06.113" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 0, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:06.110" endtime="20201103 12:25:06.114"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.122" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:06.120" endtime="20201103 12:25:06.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.127" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:06.124" endtime="20201103 12:25:06.127"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.115" endtime="20201103 12:25:06.128"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.137" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:06.135" endtime="20201103 12:25:06.138"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.142" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:06.139" endtime="20201103 12:25:06.143"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.130" endtime="20201103 12:25:06.144"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.153" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:06.151" endtime="20201103 12:25:06.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.158" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:06.155" endtime="20201103 12:25:06.159"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.145" endtime="20201103 12:25:06.160"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.174" endtime="20201103 12:25:06.483"></status>
</kw>
<msg timestamp="20201103 12:25:06.486" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064751597, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164760528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:06.171" endtime="20201103 12:25:06.487"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.494" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064751597, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164760528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:06.487" endtime="20201103 12:25:06.495"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.496" endtime="20201103 12:25:06.497"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.165" endtime="20201103 12:25:06.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.162" endtime="20201103 12:25:06.498"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:06.502" level="INFO">${FILTERED} = [{'time': 1.164760528, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000893099999986, 'source_diff': 0.10000893099999986}, {'time': 1.264769764, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:06.499" endtime="20201103 12:25:06.503"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:06.516" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:06.503" endtime="20201103 12:25:06.517"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.521" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:06.520" endtime="20201103 12:25:06.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.523" level="INFO">VALUE: [0.10000893099999986, 0.10000869499999987, 0.10000870800000006, 0.10000870800000006, 0.10000867999999996, 0.10000869400000001, 0.10000869400000001, 0.10000873599999993, 0.1000087220000001, 0.10000868099999982, 0.10000869500000009, 0.10000872300000019, 0.10000869500000009, 0.10000869500000009, 0.10000869400000001, 0.1000087220000001, 0.10000870800000028, 0.10000869400000001, 0.10000870799999984, 0.10000868099999982, 0.10000873599999993, 0.10000872199999966, 0.10000870800000028, 0.10000873599999993, 0.1000087500000002, 0.10000869400000001, 0.10000869400000001, 0.10000867999999974, 0.10000873599999993, 0.10000879200000057, 0.10000874999999976, 0.10000873699999957, 0.10000874999999976, 0.10000868100000027, 0.10000869400000045, 0.10000870799999984, 0.10000868000000018, 0.1000087220000001, 0.10000869399999956, 0.10000870799999984, 0.10000869400000045, 0.10000870799999984, 0.10000869399999956, 0.10000869499999965, 0.10000869499999965, 0.10000869499999965, 0.1000087780000003, 0.10000869499999965, 0.10000870799999984, 0.10000870799999984]</msg>
<status status="PASS" starttime="20201103 12:25:06.522" endtime="20201103 12:25:06.524"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.517" endtime="20201103 12:25:06.524"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.527" endtime="20201103 12:25:06.528"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:06.530" endtime="20201103 12:25:06.549"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.529" endtime="20201103 12:25:06.550"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.525" endtime="20201103 12:25:06.551"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.058" endtime="20201103 12:25:06.551"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:58.986" endtime="20201103 12:25:06.551" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:06.558" endtime="20201103 12:25:06.578"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.557" endtime="20201103 12:25:06.578"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.605" endtime="20201103 12:25:06.628"></status>
</kw>
<msg timestamp="20201103 12:25:06.629" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.601" endtime="20201103 12:25:06.630"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.635" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.633" endtime="20201103 12:25:06.635"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.641" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:06.636" endtime="20201103 12:25:06.641"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:06.597" endtime="20201103 12:25:06.643"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:06.585" endtime="20201103 12:25:06.644"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.584" endtime="20201103 12:25:06.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:06.652" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:06.651" endtime="20201103 12:25:06.653"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.646" endtime="20201103 12:25:06.655"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.583" endtime="20201103 12:25:06.656"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.582" endtime="20201103 12:25:06.656"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.658" endtime="20201103 12:25:06.661"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.581" endtime="20201103 12:25:06.663"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.579" endtime="20201103 12:25:06.664"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.555" endtime="20201103 12:25:06.664"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.680" endtime="20201103 12:25:13.707"></status>
</kw>
<msg timestamp="20201103 12:25:13.708" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.677" endtime="20201103 12:25:13.709"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.714" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:13.710" endtime="20201103 12:25:13.714"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:13.716" endtime="20201103 12:25:13.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.672" endtime="20201103 12:25:13.720"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.668" endtime="20201103 12:25:13.721"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:13.726" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 5, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:13.723" endtime="20201103 12:25:13.727"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.735" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:13.733" endtime="20201103 12:25:13.736"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.739" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:13.737" endtime="20201103 12:25:13.740"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.728" endtime="20201103 12:25:13.741"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.749" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:13.747" endtime="20201103 12:25:13.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.754" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:13.752" endtime="20201103 12:25:13.755"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.742" endtime="20201103 12:25:13.756"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.764" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:13.762" endtime="20201103 12:25:13.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.769" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:25:13.767" endtime="20201103 12:25:13.769"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.758" endtime="20201103 12:25:13.770"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:13.784" endtime="20201103 12:25:14.089"></status>
</kw>
<msg timestamp="20201103 12:25:14.092" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.112510264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.212519222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:13.781" endtime="20201103 12:25:14.093"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.100" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.112510264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.212519222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:14.093" endtime="20201103 12:25:14.101"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.101" endtime="20201103 12:25:14.103"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.775" endtime="20201103 12:25:14.104"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.772" endtime="20201103 12:25:14.104"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:14.108" level="INFO">${FILTERED} = [{'time': 1.212519222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000895800000009, 'source_diff': 0.10000895800000009}, {'time': 1.312529431, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:14.105" endtime="20201103 12:25:14.108"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:14.122" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:14.109" endtime="20201103 12:25:14.122"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.126" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:14.125" endtime="20201103 12:25:14.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.128" level="INFO">VALUE: [0.10000895800000009, 0.10000966699999991, 0.10000869499999987, 0.10000869499999987, 0.10000870899999992, 0.10000870900000014, 0.10000869500000009, 0.10000867999999996, 0.10000869400000001, 0.10000869400000001, 0.10000873599999993, 0.10000873599999993, 0.10000870799999984, 0.10000872299999974, 0.10000869500000009, 0.10000872300000019, 0.10000869500000009, 0.10000869500000009, 0.10000869400000001, 0.10000869400000001, 0.10000868000000018, 0.10000869399999956, 0.10000872199999966, 0.10000868100000027, 0.10000870899999992, 0.1000087220000001, 0.10000869500000009, 0.10000868099999982, 0.10000869499999965, 0.10000870799999984, 0.10000870800000072, 0.10000869400000045, 0.1000087220000001, 0.10000870799999984, 0.1000087220000001, 0.10000874999999976, 0.10000872199999922, 0.10000873599999949, 0.1000086799999993, 0.10000870799999984, 0.10000869399999956, 0.10000869499999965, 0.10000870899999992, 0.10000870899999992, 0.1000087220000001, 0.1000087220000001, 0.10000874999999976, 0.10000870899999992, 0.10000868099999938, 0.10000870899999992]</msg>
<status status="PASS" starttime="20201103 12:25:14.127" endtime="20201103 12:25:14.129"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.123" endtime="20201103 12:25:14.129"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.131" endtime="20201103 12:25:14.133"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:14.135" endtime="20201103 12:25:14.154"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.133" endtime="20201103 12:25:14.155"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.130" endtime="20201103 12:25:14.155"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.665" endtime="20201103 12:25:14.156"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:06.553" endtime="20201103 12:25:14.156" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:14.163" endtime="20201103 12:25:14.182"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.162" endtime="20201103 12:25:14.183"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.196" endtime="20201103 12:25:14.215"></status>
</kw>
<msg timestamp="20201103 12:25:14.216" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.195" endtime="20201103 12:25:14.216"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.218" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.217" endtime="20201103 12:25:14.219"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.221" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:14.219" endtime="20201103 12:25:14.221"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:14.192" endtime="20201103 12:25:14.222"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:14.190" endtime="20201103 12:25:14.223"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.188" endtime="20201103 12:25:14.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:14.227" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:14.226" endtime="20201103 12:25:14.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.224" endtime="20201103 12:25:14.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.188" endtime="20201103 12:25:14.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.187" endtime="20201103 12:25:14.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.228" endtime="20201103 12:25:14.230"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.185" endtime="20201103 12:25:14.230"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.184" endtime="20201103 12:25:14.231"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.160" endtime="20201103 12:25:14.231"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.239" endtime="20201103 12:25:21.265"></status>
</kw>
<msg timestamp="20201103 12:25:21.266" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.238" endtime="20201103 12:25:21.266"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.271" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:21.268" endtime="20201103 12:25:21.272"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.273" endtime="20201103 12:25:21.277"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.235" endtime="20201103 12:25:21.278"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.233" endtime="20201103 12:25:21.279"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:21.284" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 10, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:21.280" endtime="20201103 12:25:21.284"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.293" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:21.290" endtime="20201103 12:25:21.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.298" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:21.296" endtime="20201103 12:25:21.299"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.286" endtime="20201103 12:25:21.300"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.306" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:21.305" endtime="20201103 12:25:21.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.308" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:21.307" endtime="20201103 12:25:21.308"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.301" endtime="20201103 12:25:21.309"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.312" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:21.311" endtime="20201103 12:25:21.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.314" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:25:21.314" endtime="20201103 12:25:21.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.309" endtime="20201103 12:25:21.315"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.322" endtime="20201103 12:25:21.618"></status>
</kw>
<msg timestamp="20201103 12:25:21.621" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065903569, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.1659115, 'source': 'DUT_IC', 'event': 'FALLI...</msg>
<status status="PASS" starttime="20201103 12:25:21.320" endtime="20201103 12:25:21.622"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.629" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065903569, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.1659115, 'source': 'DUT_IC', 'event': 'FALLI...</msg>
<status status="PASS" starttime="20201103 12:25:21.622" endtime="20201103 12:25:21.630"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.630" endtime="20201103 12:25:21.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.318" endtime="20201103 12:25:21.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.316" endtime="20201103 12:25:21.633"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:21.637" level="INFO">${FILTERED} = [{'time': 1.1659115, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000793099999994, 'source_diff': 0.10000793099999994}, {'time': 1.26592175, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10...</msg>
<status status="PASS" starttime="20201103 12:25:21.634" endtime="20201103 12:25:21.637"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:21.650" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:21.638" endtime="20201103 12:25:21.650"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.654" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:21.653" endtime="20201103 12:25:21.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.657" level="INFO">VALUE: [0.10000793099999994, 0.10000970799999997, 0.10000869400000001, 0.1000087220000001, 0.10000869400000001, 0.10000870800000006, 0.10000869400000001, 0.10000870799999984, 0.10000870800000006, 0.1000087220000001, 0.10000869400000001, 0.10000870799999984, 0.100008667, 0.10000870900000036, 0.1000087220000001, 0.10000873599999993, 0.10000869500000009, 0.10000868100000027, 0.10000869400000001, 0.10000874999999976, 0.10000872199999966, 0.10000869400000001, 0.10000868000000018, 0.1000087220000001, 0.10000868099999982, 0.10000873600000038, 0.10000876399999958, 0.10000869499999965, 0.10000870899999992, 0.1000087220000001, 0.10000865300000061, 0.10000870799999984, 0.10000868000000018, 0.10000870799999984, 0.10000869399999956, 0.10000870799999984, 0.10000869399999956, 0.10000873599999949, 0.10000870899999992, 0.10000870899999992, 0.10000869499999965, 0.10000873699999957, 0.10000868099999938, 0.10000874999999976, 0.10000873600000038, 0.10000872300000019, 0.10000868099999938, 0.10000869399999956, 0.10000868000000018, 0.10000873600000038]</msg>
<status status="PASS" starttime="20201103 12:25:21.655" endtime="20201103 12:25:21.657"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.651" endtime="20201103 12:25:21.658"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.660" endtime="20201103 12:25:21.662"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:21.664" endtime="20201103 12:25:21.683"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.662" endtime="20201103 12:25:21.684"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.658" endtime="20201103 12:25:21.684"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.232" endtime="20201103 12:25:21.684"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:14.158" endtime="20201103 12:25:21.685" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:21.692" endtime="20201103 12:25:21.711"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.690" endtime="20201103 12:25:21.712"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.725" endtime="20201103 12:25:21.744"></status>
</kw>
<msg timestamp="20201103 12:25:21.744" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:21.724" endtime="20201103 12:25:21.745"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.747" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:21.745" endtime="20201103 12:25:21.747"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.750" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:21.748" endtime="20201103 12:25:21.750"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:21.720" endtime="20201103 12:25:21.751"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:21.718" endtime="20201103 12:25:21.751"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.717" endtime="20201103 12:25:21.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:21.755" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:21.755" endtime="20201103 12:25:21.756"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.753" endtime="20201103 12:25:21.756"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.716" endtime="20201103 12:25:21.756"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.715" endtime="20201103 12:25:21.756"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.757" endtime="20201103 12:25:21.759"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.714" endtime="20201103 12:25:21.759"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.712" endtime="20201103 12:25:21.760"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.689" endtime="20201103 12:25:21.760"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.768" endtime="20201103 12:25:28.794"></status>
</kw>
<msg timestamp="20201103 12:25:28.795" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:21.767" endtime="20201103 12:25:28.795"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.800" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:28.797" endtime="20201103 12:25:28.801"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:28.802" endtime="20201103 12:25:28.806"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.764" endtime="20201103 12:25:28.807"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.762" endtime="20201103 12:25:28.808"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:28.813" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 15, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:28.810" endtime="20201103 12:25:28.814"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.822" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:28.820" endtime="20201103 12:25:28.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.827" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:28.825" endtime="20201103 12:25:28.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.815" endtime="20201103 12:25:28.828"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.837" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:28.834" endtime="20201103 12:25:28.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.841" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:28.839" endtime="20201103 12:25:28.842"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.830" endtime="20201103 12:25:28.843"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.851" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:28.849" endtime="20201103 12:25:28.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.855" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:25:28.853" endtime="20201103 12:25:28.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.844" endtime="20201103 12:25:28.857"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:28.873" endtime="20201103 12:25:29.176"></status>
</kw>
<msg timestamp="20201103 12:25:29.178" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.06619225, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166201167, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:25:28.869" endtime="20201103 12:25:29.179"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.186" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.06619225, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166201167, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:25:29.180" endtime="20201103 12:25:29.187"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.187" endtime="20201103 12:25:29.189"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.862" endtime="20201103 12:25:29.190"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.858" endtime="20201103 12:25:29.190"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:29.194" level="INFO">${FILTERED} = [{'time': 1.166201167, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000891700000003, 'source_diff': 0.10000891700000003}, {'time': 1.266210444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:29.191" endtime="20201103 12:25:29.194"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:29.207" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:29.195" endtime="20201103 12:25:29.207"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.211" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:29.210" endtime="20201103 12:25:29.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.213" level="INFO">VALUE: [0.10000891700000003, 0.10000873599999993, 0.10000868100000004, 0.10000870899999992, 0.10000868100000004, 0.1000087220000001, 0.10000868100000004, 0.10000869400000001, 0.10000869400000001, 0.10000870799999984, 0.10000869400000001, 0.1000087220000001, 0.100008667, 0.10000873599999993, 0.10000870799999984, 0.10000873599999993, 0.10000869500000009, 0.10000872300000019, 0.100008667, 0.1000087220000001, 0.10000869400000001, 0.10000870799999984, 0.10000869400000001, 0.10000873599999993, 0.10000869400000001, 0.10000870799999984, 0.10000869500000009, 0.10000877799999985, 0.10000869500000009, 0.10000869500000009, 0.10000870899999992, 0.10000869500000054, 0.10000869400000045, 0.1000087220000001, 0.10000873599999949, 0.10000875000000065, 0.10000866599999991, 0.10000870799999984, 0.10000868000000018, 0.1000087220000001, 0.10000870799999984, 0.10000869399999956, 0.10000869499999965, 0.1000087220000001, 0.10000869500000054, 0.1000087220000001, 0.10000868099999938, 0.10000869499999965, 0.100008667, 0.10000870800000072]</msg>
<status status="PASS" starttime="20201103 12:25:29.212" endtime="20201103 12:25:29.214"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.208" endtime="20201103 12:25:29.215"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.217" endtime="20201103 12:25:29.218"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:29.221" endtime="20201103 12:25:29.240"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.219" endtime="20201103 12:25:29.240"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.215" endtime="20201103 12:25:29.241"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.761" endtime="20201103 12:25:29.241"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:21.687" endtime="20201103 12:25:29.242" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:29.248" endtime="20201103 12:25:29.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.247" endtime="20201103 12:25:29.268"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.282" endtime="20201103 12:25:29.300"></status>
</kw>
<msg timestamp="20201103 12:25:29.301" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:29.281" endtime="20201103 12:25:29.301"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.303" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:29.302" endtime="20201103 12:25:29.303"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.306" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:29.304" endtime="20201103 12:25:29.306"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:29.278" endtime="20201103 12:25:29.307"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:29.275" endtime="20201103 12:25:29.308"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.274" endtime="20201103 12:25:29.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:29.312" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:29.311" endtime="20201103 12:25:29.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.309" endtime="20201103 12:25:29.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.273" endtime="20201103 12:25:29.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.272" endtime="20201103 12:25:29.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.313" endtime="20201103 12:25:29.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.271" endtime="20201103 12:25:29.316"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.269" endtime="20201103 12:25:29.316"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.246" endtime="20201103 12:25:29.316"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.325" endtime="20201103 12:25:36.350"></status>
</kw>
<msg timestamp="20201103 12:25:36.351" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:29.323" endtime="20201103 12:25:36.351"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.356" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:36.353" endtime="20201103 12:25:36.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.359" endtime="20201103 12:25:36.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.320" endtime="20201103 12:25:36.364"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.318" endtime="20201103 12:25:36.365"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:36.370" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 20, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:36.366" endtime="20201103 12:25:36.370"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.379" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:36.377" endtime="20201103 12:25:36.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.383" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:36.381" endtime="20201103 12:25:36.384"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.372" endtime="20201103 12:25:36.385"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.393" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:36.391" endtime="20201103 12:25:36.394"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.397" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:36.395" endtime="20201103 12:25:36.398"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.386" endtime="20201103 12:25:36.399"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.409" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:36.405" endtime="20201103 12:25:36.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.414" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:25:36.412" endtime="20201103 12:25:36.414"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.400" endtime="20201103 12:25:36.416"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.429" endtime="20201103 12:25:36.731"></status>
</kw>
<msg timestamp="20201103 12:25:36.734" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065810736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165819694, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:36.426" endtime="20201103 12:25:36.734"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.741" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065810736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165819694, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:36.735" endtime="20201103 12:25:36.742"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.742" endtime="20201103 12:25:36.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.420" endtime="20201103 12:25:36.745"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.417" endtime="20201103 12:25:36.745"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:36.749" level="INFO">${FILTERED} = [{'time': 1.165819694, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000895800000009, 'source_diff': 0.10000895800000009}, {'time': 1.265829917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:36.746" endtime="20201103 12:25:36.749"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:36.764" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:36.750" endtime="20201103 12:25:36.764"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.768" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:36.767" endtime="20201103 12:25:36.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.776" level="INFO">VALUE: [0.10000895800000009, 0.10000968099999996, 0.10000870900000014, 0.10000869500000009, 0.10000872299999997, 0.10000868099999982, 0.10000869400000001, 0.10000869400000001, 0.10000870800000006, 0.1000087220000001, 0.10000866599999991, 0.10000869400000001, 0.1000087500000002, 0.10000872299999974, 0.1000087220000001, 0.10000868100000027, 0.10000869500000009, 0.10000868099999982, 0.10000873599999993, 0.10000873599999993, 0.10000870799999984, 0.10000869400000001, 0.10000870800000028, 0.10000869400000001, 0.10000869400000001, 0.10000876400000003, 0.10000869500000009, 0.10000870899999992, 0.1000087220000001, 0.10000868099999982, 0.10000868100000027, 0.10000870799999984, 0.10000869399999956, 0.10000869399999956, 0.1000087220000001, 0.10000875000000065, 0.10000869400000045, 0.10000870799999984, 0.10000870799999984, 0.10000868000000018, 0.10000869499999965, 0.10000870899999992, 0.1000087090000008, 0.10000870899999992, 0.10000870899999992, 0.10000869499999965, 0.10000870899999992, 0.10000870899999992, 0.10000872300000019, 0.10000875000000065]</msg>
<status status="PASS" starttime="20201103 12:25:36.769" endtime="20201103 12:25:36.776"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.765" endtime="20201103 12:25:36.777"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.779" endtime="20201103 12:25:36.781"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:36.783" endtime="20201103 12:25:36.802"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.781" endtime="20201103 12:25:36.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.777" endtime="20201103 12:25:36.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.317" endtime="20201103 12:25:36.804"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:29.243" endtime="20201103 12:25:36.804" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:36.811" endtime="20201103 12:25:36.831"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.810" endtime="20201103 12:25:36.831"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.845" endtime="20201103 12:25:36.864"></status>
</kw>
<msg timestamp="20201103 12:25:36.864" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:36.844" endtime="20201103 12:25:36.864"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.867" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:36.865" endtime="20201103 12:25:36.867"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.870" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:36.868" endtime="20201103 12:25:36.870"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:36.841" endtime="20201103 12:25:36.871"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:36.838" endtime="20201103 12:25:36.872"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.837" endtime="20201103 12:25:36.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:36.876" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:36.875" endtime="20201103 12:25:36.876"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.873" endtime="20201103 12:25:36.877"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.836" endtime="20201103 12:25:36.877"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.835" endtime="20201103 12:25:36.877"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.878" endtime="20201103 12:25:36.879"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.834" endtime="20201103 12:25:36.880"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.832" endtime="20201103 12:25:36.880"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.808" endtime="20201103 12:25:36.880"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.889" endtime="20201103 12:25:43.916"></status>
</kw>
<msg timestamp="20201103 12:25:43.917" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:36.888" endtime="20201103 12:25:43.917"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.922" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:43.919" endtime="20201103 12:25:43.923"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:43.925" endtime="20201103 12:25:43.928"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.885" endtime="20201103 12:25:43.930"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.883" endtime="20201103 12:25:43.931"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:43.936" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 25, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:43.932" endtime="20201103 12:25:43.937"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.945" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:43.943" endtime="20201103 12:25:43.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.950" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:43.948" endtime="20201103 12:25:43.951"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:43.938" endtime="20201103 12:25:43.952"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.960" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:43.958" endtime="20201103 12:25:43.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.965" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:43.963" endtime="20201103 12:25:43.966"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:43.953" endtime="20201103 12:25:43.967"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.975" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:43.973" endtime="20201103 12:25:43.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:43.983" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:25:43.980" endtime="20201103 12:25:43.983"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:43.968" endtime="20201103 12:25:43.985"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:43.999" endtime="20201103 12:25:44.301"></status>
</kw>
<msg timestamp="20201103 12:25:44.304" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.06799275, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168001681, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:25:43.996" endtime="20201103 12:25:44.304"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:44.312" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.06799275, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168001681, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:25:44.305" endtime="20201103 12:25:44.312"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:44.313" endtime="20201103 12:25:44.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:43.990" endtime="20201103 12:25:44.316"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:43.986" endtime="20201103 12:25:44.316"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:44.320" level="INFO">${FILTERED} = [{'time': 1.168001681, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000893100000008, 'source_diff': 0.10000893100000008}, {'time': 1.268011944, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:44.317" endtime="20201103 12:25:44.320"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:44.334" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:44.322" endtime="20201103 12:25:44.334"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:44.338" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:44.337" endtime="20201103 12:25:44.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:44.341" level="INFO">VALUE: [0.10000893100000008, 0.10000972200000002, 0.10000870800000006, 0.10000869500000009, 0.10000870899999992, 0.10000870899999992, 0.10000870899999992, 0.10000868100000004, 0.10000869499999987, 0.1000087220000001, 0.10000870899999992, 0.1000087780000003, 0.10000873700000001, 0.1000087220000001, 0.10000870799999984, 0.10000873599999993, 0.1000087220000001, 0.10000869400000001, 0.1000087220000001, 0.10000867999999974, 0.10000869500000009, 0.10000870900000036, 0.10000868099999982, 0.10000872300000019, 0.10000868100000027, 0.10000869400000001, 0.10000869400000001, 0.10000872199999966, 0.1000087220000001, 0.10000870799999984, 0.1000087220000001, 0.10000879199999968, 0.10000869500000054, 0.10000869500000054, 0.10000873700000046, 0.10000873600000038, 0.10000869400000045, 0.10000869400000045, 0.10000870799999984, 0.10000870799999984, 0.10000869400000045, 0.10000870800000072, 0.10000869400000045, 0.10000869400000045, 0.10000869500000054, 0.10000869500000054, 0.10000870899999992, 0.10000870899999992, 0.10000869499999965, 0.10000869499999965]</msg>
<status status="PASS" starttime="20201103 12:25:44.340" endtime="20201103 12:25:44.341"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:44.335" endtime="20201103 12:25:44.342"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:44.344" endtime="20201103 12:25:44.346"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:44.348" endtime="20201103 12:25:44.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:44.346" endtime="20201103 12:25:44.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:44.343" endtime="20201103 12:25:44.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.881" endtime="20201103 12:25:44.369"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:36.806" endtime="20201103 12:25:44.369" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:56.522" endtime="20201103 12:25:44.377"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">esp32-wroom-32</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:24:53.534" endtime="20201103 12:25:44.404"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_esp32-wroom-32</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
