<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:35:42.066" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:42.649" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:42.657" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:43.684" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:42.648" endtime="20201103 12:35:43.685"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:44.689" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20201103 12:35:43.686" endtime="20201103 12:35:44.690"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:42.646" endtime="20201103 12:35:44.691"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:44.695" endtime="20201103 12:35:44.925"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.692" endtime="20201103 12:35:44.925"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:44.939" endtime="20201103 12:35:44.960"></status>
</kw>
<msg timestamp="20201103 12:35:44.960" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:44.937" endtime="20201103 12:35:44.961"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:44.963" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:44.961" endtime="20201103 12:35:44.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:44.966" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:44.964" endtime="20201103 12:35:44.966"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:44.934" endtime="20201103 12:35:44.967"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:44.932" endtime="20201103 12:35:44.968"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.931" endtime="20201103 12:35:44.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:44.972" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:44.971" endtime="20201103 12:35:44.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.969" endtime="20201103 12:35:44.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.930" endtime="20201103 12:35:44.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.929" endtime="20201103 12:35:44.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:44.973" endtime="20201103 12:35:44.975"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.928" endtime="20201103 12:35:44.975"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:44.976" endtime="20201103 12:35:44.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.926" endtime="20201103 12:35:44.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:42.645" endtime="20201103 12:35:44.979"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:44.985" endtime="20201103 12:35:45.005"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.983" endtime="20201103 12:35:45.005"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.022" endtime="20201103 12:35:45.040"></status>
</kw>
<msg timestamp="20201103 12:35:45.040" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.020" endtime="20201103 12:35:45.040"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.042" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.041" endtime="20201103 12:35:45.043"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.045" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:45.043" endtime="20201103 12:35:45.046"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:45.017" endtime="20201103 12:35:45.046"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:45.014" endtime="20201103 12:35:45.047"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.012" endtime="20201103 12:35:45.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:45.051" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:45.050" endtime="20201103 12:35:45.051"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.048" endtime="20201103 12:35:45.051"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.011" endtime="20201103 12:35:45.052"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.010" endtime="20201103 12:35:45.052"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.053" endtime="20201103 12:35:45.054"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.009" endtime="20201103 12:35:45.055"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.006" endtime="20201103 12:35:45.055"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.982" endtime="20201103 12:35:45.055"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.062" endtime="20201103 12:35:45.075"></status>
</kw>
<msg timestamp="20201103 12:35:45.075" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.060" endtime="20201103 12:35:45.076"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.078" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.076" endtime="20201103 12:35:45.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.079" endtime="20201103 12:35:45.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.058" endtime="20201103 12:35:45.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.056" endtime="20201103 12:35:45.081"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.085" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:35:45.084" endtime="20201103 12:35:45.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.087" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:35:45.086" endtime="20201103 12:35:45.088"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.082" endtime="20201103 12:35:45.088"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:44.979" endtime="20201103 12:35:45.089" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:42.189" endtime="20201103 12:35:45.092"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.143" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:45.151" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:46.199" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:45.142" endtime="20201103 12:35:46.200"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:47.203" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20201103 12:35:46.201" endtime="20201103 12:35:47.204"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.140" endtime="20201103 12:35:47.205"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:47.209" endtime="20201103 12:35:47.485"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.207" endtime="20201103 12:35:47.486"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:47.498" endtime="20201103 12:35:47.518"></status>
</kw>
<msg timestamp="20201103 12:35:47.519" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:47.497" endtime="20201103 12:35:47.519"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:47.521" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:47.520" endtime="20201103 12:35:47.522"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:47.524" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:47.522" endtime="20201103 12:35:47.524"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:47.494" endtime="20201103 12:35:47.525"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:47.492" endtime="20201103 12:35:47.526"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.491" endtime="20201103 12:35:47.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:47.531" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:47.530" endtime="20201103 12:35:47.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.527" endtime="20201103 12:35:47.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.490" endtime="20201103 12:35:47.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.489" endtime="20201103 12:35:47.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:47.532" endtime="20201103 12:35:47.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.488" endtime="20201103 12:35:47.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:47.535" endtime="20201103 12:35:47.537"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.487" endtime="20201103 12:35:47.537"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.139" endtime="20201103 12:35:47.537"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:47.543" endtime="20201103 12:35:47.562"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.541" endtime="20201103 12:35:47.563"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:47.575" endtime="20201103 12:35:47.594"></status>
</kw>
<msg timestamp="20201103 12:35:47.594" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:47.574" endtime="20201103 12:35:47.595"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:47.597" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:47.596" endtime="20201103 12:35:47.598"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:47.600" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:47.598" endtime="20201103 12:35:47.601"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:47.571" endtime="20201103 12:35:47.601"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:47.569" endtime="20201103 12:35:47.602"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.568" endtime="20201103 12:35:47.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:47.606" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:47.605" endtime="20201103 12:35:47.607"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.603" endtime="20201103 12:35:47.607"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.567" endtime="20201103 12:35:47.607"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.567" endtime="20201103 12:35:47.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:47.608" endtime="20201103 12:35:47.610"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.565" endtime="20201103 12:35:47.611"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.563" endtime="20201103 12:35:47.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.540" endtime="20201103 12:35:47.612"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:47.622" endtime="20201103 12:35:54.648"></status>
</kw>
<msg timestamp="20201103 12:35:54.649" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:47.620" endtime="20201103 12:35:54.649"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.654" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:54.651" endtime="20201103 12:35:54.655"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:54.656" endtime="20201103 12:35:54.660"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.617" endtime="20201103 12:35:54.661"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.614" endtime="20201103 12:35:54.662"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:54.667" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 0, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:35:54.663" endtime="20201103 12:35:54.667"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.675" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:54.673" endtime="20201103 12:35:54.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.679" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:54.677" endtime="20201103 12:35:54.680"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.668" endtime="20201103 12:35:54.681"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.689" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:54.687" endtime="20201103 12:35:54.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.693" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:54.691" endtime="20201103 12:35:54.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.682" endtime="20201103 12:35:54.695"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.703" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:54.701" endtime="20201103 12:35:54.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.708" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:35:54.705" endtime="20201103 12:35:54.709"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.696" endtime="20201103 12:35:54.710"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:54.723" endtime="20201103 12:35:55.028"></status>
</kw>
<msg timestamp="20201103 12:35:55.031" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068499708, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168508667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:54.720" endtime="20201103 12:35:55.031"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.039" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068499708, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168508667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:55.032" endtime="20201103 12:35:55.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.040" endtime="20201103 12:35:55.042"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.714" endtime="20201103 12:35:55.042"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.711" endtime="20201103 12:35:55.042"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:55.046" level="INFO">${FILTERED} = [{'time': 1.168508667, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000895899999995, 'source_diff': 0.10000895899999995}, {'time': 1.268517917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:55.043" endtime="20201103 12:35:55.047"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:55.060" level="INFO">${RESULT} = {'time': [1.168508667, 1.268517917, 1.368527167, 1.468536403, 1.568545653, 1.668554931, 1.768564153, 1.868573403, 1.968582625, 2.068591875, 2.168601139, 2.268610375, 2.368619625, 2.468628875, 2.568638...</msg>
<status status="PASS" starttime="20201103 12:35:55.047" endtime="20201103 12:35:55.060"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.064" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:55.063" endtime="20201103 12:35:55.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.066" level="INFO">VALUE: [0.10000895899999995, 0.10000870900000014, 0.10000870900000014, 0.10000869500000009, 0.10000870899999992, 0.10000873700000001, 0.10000868100000004, 0.10000870900000014, 0.10000868100000004, 0.10000870800000006, 0.1000087220000001, 0.1000087500000002, 0.10000870799999984, 0.10000870799999984, 0.1000087220000001, 0.10000869400000001, 0.10000870799999984, 0.10000869500000009, 0.1000087220000001, 0.10000870799999984, 0.10000869500000009, 0.10000870899999992, 0.10000869499999965, 0.10000870899999992, 0.10000870899999992, 0.10000869500000009, 0.10000870899999992, 0.10000868099999982, 0.10000869400000001, 0.10000876400000047, 0.10000873599999949, 0.1000086799999993, 0.1000087220000001, 0.10000875000000065, 0.10000873599999949, 0.10000870799999984, 0.10000868000000018, 0.1000087220000001, 0.10000880599999995, 0.10000869500000054, 0.1000087090000008, 0.10000870899999992, 0.10000870899999992, 0.10000868100000027, 0.10000870899999992, 0.1000087090000008, 0.10000870899999992, 0.10000873699999957, 0.10000874999999976, 0.10000868100000027]</msg>
<status status="PASS" starttime="20201103 12:35:55.065" endtime="20201103 12:35:55.067"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.061" endtime="20201103 12:35:55.067"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.069" endtime="20201103 12:35:55.071"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:55.073" endtime="20201103 12:35:55.092"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.071" endtime="20201103 12:35:55.093"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.068" endtime="20201103 12:35:55.093"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:47.613" endtime="20201103 12:35:55.093"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:47.538" endtime="20201103 12:35:55.094" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:55.100" endtime="20201103 12:35:55.120"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.099" endtime="20201103 12:35:55.120"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.133" endtime="20201103 12:35:55.149"></status>
</kw>
<msg timestamp="20201103 12:35:55.150" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:55.132" endtime="20201103 12:35:55.150"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.152" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:55.151" endtime="20201103 12:35:55.153"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.155" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:55.153" endtime="20201103 12:35:55.156"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:55.129" endtime="20201103 12:35:55.156"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:55.127" endtime="20201103 12:35:55.157"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.125" endtime="20201103 12:35:55.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:55.161" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:55.160" endtime="20201103 12:35:55.161"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.158" endtime="20201103 12:35:55.162"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.124" endtime="20201103 12:35:55.162"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.124" endtime="20201103 12:35:55.163"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.163" endtime="20201103 12:35:55.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.123" endtime="20201103 12:35:55.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.121" endtime="20201103 12:35:55.166"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.098" endtime="20201103 12:35:55.166"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.174" endtime="20201103 12:36:02.200"></status>
</kw>
<msg timestamp="20201103 12:36:02.201" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:55.173" endtime="20201103 12:36:02.201"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.206" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:02.203" endtime="20201103 12:36:02.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.208" endtime="20201103 12:36:02.211"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.170" endtime="20201103 12:36:02.212"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.168" endtime="20201103 12:36:02.213"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:02.218" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 5, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:02.215" endtime="20201103 12:36:02.219"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.227" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:02.225" endtime="20201103 12:36:02.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.232" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:02.229" endtime="20201103 12:36:02.233"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.220" endtime="20201103 12:36:02.235"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.245" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:02.243" endtime="20201103 12:36:02.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.250" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:02.248" endtime="20201103 12:36:02.250"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.237" endtime="20201103 12:36:02.252"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.260" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:02.257" endtime="20201103 12:36:02.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.264" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:36:02.262" endtime="20201103 12:36:02.264"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.253" endtime="20201103 12:36:02.266"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.279" endtime="20201103 12:36:02.583"></status>
</kw>
<msg timestamp="20201103 12:36:02.586" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063284778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.16329375, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:36:02.276" endtime="20201103 12:36:02.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.594" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063284778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.16329375, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:36:02.587" endtime="20201103 12:36:02.594"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.595" endtime="20201103 12:36:02.596"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.270" endtime="20201103 12:36:02.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.267" endtime="20201103 12:36:02.597"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:02.601" level="INFO">${FILTERED} = [{'time': 1.16329375, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000897199999992, 'source_diff': 0.10000897199999992}, {'time': 1.263302986, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:36:02.598" endtime="20201103 12:36:02.601"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:02.615" level="INFO">${RESULT} = {'time': [1.16329375, 1.263302986, 1.363312222, 1.463321486, 1.563330708, 1.663339958, 1.763349181, 1.863358431, 1.963367694, 2.063376917, 2.163386153, 2.263395403, 2.363404639, 2.463413903, 2.5634231...</msg>
<status status="PASS" starttime="20201103 12:36:02.602" endtime="20201103 12:36:02.615"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.619" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:02.618" endtime="20201103 12:36:02.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.621" level="INFO">VALUE: [0.10000897199999992, 0.10000869400000001, 0.10000869400000001, 0.10000872199999988, 0.10000873600000015, 0.10000870799999984, 0.10000868099999982, 0.10000870899999992, 0.1000087220000001, 0.10000868099999982, 0.10000869499999965, 0.10000870899999992, 0.10000869500000009, 0.1000087220000001, 0.10000870899999992, 0.10000869500000009, 0.1000087500000002, 0.10000873599999993, 0.10000866599999991, 0.10000869400000001, 0.1000087220000001, 0.10000869400000001, 0.10000870799999984, 0.10000870800000028, 0.10000868099999982, 0.10000869500000009, 0.10000870899999992, 0.10000870899999992, 0.10000870899999992, 0.10000870899999992, 0.10000870899999992, 0.100008667, 0.10000869400000045, 0.10000870799999984, 0.10000870799999984, 0.1000087220000001, 0.10000870799999984, 0.10000876400000003, 0.10000869400000045, 0.10000868000000018, 0.10000869399999956, 0.10000869499999965, 0.10000872199999922, 0.10000873600000038, 0.10000872300000019, 0.10000869499999965, 0.10000869499999965, 0.10000873699999957, 0.1000087220000001, 0.10000869400000045]</msg>
<status status="PASS" starttime="20201103 12:36:02.620" endtime="20201103 12:36:02.622"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.616" endtime="20201103 12:36:02.622"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.624" endtime="20201103 12:36:02.625"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:02.628" endtime="20201103 12:36:02.647"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.626" endtime="20201103 12:36:02.648"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.623" endtime="20201103 12:36:02.648"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.167" endtime="20201103 12:36:02.648"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:55.095" endtime="20201103 12:36:02.649" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:02.656" endtime="20201103 12:36:02.675"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.654" endtime="20201103 12:36:02.676"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.688" endtime="20201103 12:36:02.706"></status>
</kw>
<msg timestamp="20201103 12:36:02.706" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:02.687" endtime="20201103 12:36:02.706"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.709" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:02.707" endtime="20201103 12:36:02.709"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:02.712" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:02.710" endtime="20201103 12:36:02.712"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:02.684" endtime="20201103 12:36:02.712"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:02.682" endtime="20201103 12:36:02.713"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.681" endtime="20201103 12:36:02.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:02.717" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:02.716" endtime="20201103 12:36:02.717"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.714" endtime="20201103 12:36:02.718"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.680" endtime="20201103 12:36:02.718"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.679" endtime="20201103 12:36:02.718"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.719" endtime="20201103 12:36:02.720"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.678" endtime="20201103 12:36:02.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.676" endtime="20201103 12:36:02.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.652" endtime="20201103 12:36:02.721"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:02.729" endtime="20201103 12:36:09.755"></status>
</kw>
<msg timestamp="20201103 12:36:09.756" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:02.728" endtime="20201103 12:36:09.756"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.761" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:09.758" endtime="20201103 12:36:09.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:09.763" endtime="20201103 12:36:09.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.725" endtime="20201103 12:36:09.767"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.723" endtime="20201103 12:36:09.768"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:09.773" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 10, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:09.770" endtime="20201103 12:36:09.774"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.782" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:09.779" endtime="20201103 12:36:09.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.787" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:09.785" endtime="20201103 12:36:09.787"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.775" endtime="20201103 12:36:09.788"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.796" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:09.794" endtime="20201103 12:36:09.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.800" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:09.798" endtime="20201103 12:36:09.801"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.790" endtime="20201103 12:36:09.802"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.810" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:09.808" endtime="20201103 12:36:09.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.814" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:36:09.812" endtime="20201103 12:36:09.815"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.803" endtime="20201103 12:36:09.816"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:09.829" endtime="20201103 12:36:10.128"></status>
</kw>
<msg timestamp="20201103 12:36:10.131" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063265597, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163273542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:09.826" endtime="20201103 12:36:10.131"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.139" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063265597, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163273542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:10.132" endtime="20201103 12:36:10.139"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.140" endtime="20201103 12:36:10.142"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.821" endtime="20201103 12:36:10.142"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.817" endtime="20201103 12:36:10.143"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:10.146" level="INFO">${FILTERED} = [{'time': 1.163273542, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000794499999999, 'source_diff': 0.10000794499999999}, {'time': 1.263283792, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:10.143" endtime="20201103 12:36:10.147"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:10.159" level="INFO">${RESULT} = {'time': [1.163273542, 1.263283792, 1.363293069, 1.463302319, 1.563311486, 1.66332075, 1.76333, 1.863339208, 1.963348458, 2.063357681, 2.163366931, 2.263376167, 2.363385403, 2.463394639, 2.563403889, ...</msg>
<status status="PASS" starttime="20201103 12:36:10.147" endtime="20201103 12:36:10.159"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.163" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:10.162" endtime="20201103 12:36:10.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.165" level="INFO">VALUE: [0.10000794499999999, 0.10000970900000006, 0.10000873599999993, 0.100008777, 0.10000869400000001, 0.1000087220000001, 0.10000870800000006, 0.10000872199999988, 0.10000870800000006, 0.10000868099999982, 0.10000870899999992, 0.10000869500000009, 0.10000869500000009, 0.10000869500000009, 0.10000870799999984, 0.10000870800000028, 0.10000869400000001, 0.10000870799999984, 0.10000868000000018, 0.10000870799999984, 0.10000869400000001, 0.10000869400000001, 0.10000870799999984, 0.1000087220000001, 0.10000870799999984, 0.10000869400000001, 0.1000087220000001, 0.10000869400000001, 0.100008667, 0.10000870900000036, 0.10000872300000019, 0.10000874999999976, 0.1000087220000001, 0.1000087229999993, 0.10000873599999949, 0.10000870800000072, 0.10000870799999984, 0.10000869399999956, 0.1000087220000001, 0.10000868000000018, 0.10000870800000072, 0.10000873600000038, 0.1000087780000003, 0.1000087220000001, 0.10000869399999956, 0.10000870799999984, 0.10000870799999984, 0.1000087220000001, 0.10000870800000072, 0.10000870799999984]</msg>
<status status="PASS" starttime="20201103 12:36:10.164" endtime="20201103 12:36:10.166"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.160" endtime="20201103 12:36:10.166"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.168" endtime="20201103 12:36:10.170"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:10.172" endtime="20201103 12:36:10.192"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.171" endtime="20201103 12:36:10.192"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.167" endtime="20201103 12:36:10.193"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:02.722" endtime="20201103 12:36:10.193"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:02.650" endtime="20201103 12:36:10.193" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:10.201" endtime="20201103 12:36:10.221"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.199" endtime="20201103 12:36:10.222"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.238" endtime="20201103 12:36:10.256"></status>
</kw>
<msg timestamp="20201103 12:36:10.257" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:10.236" endtime="20201103 12:36:10.257"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.259" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:10.258" endtime="20201103 12:36:10.260"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.262" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:10.260" endtime="20201103 12:36:10.263"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:10.233" endtime="20201103 12:36:10.263"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:10.230" endtime="20201103 12:36:10.264"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.229" endtime="20201103 12:36:10.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:10.268" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:10.267" endtime="20201103 12:36:10.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.265" endtime="20201103 12:36:10.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.227" endtime="20201103 12:36:10.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.226" endtime="20201103 12:36:10.269"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.270" endtime="20201103 12:36:10.271"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.224" endtime="20201103 12:36:10.272"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.222" endtime="20201103 12:36:10.272"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.197" endtime="20201103 12:36:10.272"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.281" endtime="20201103 12:36:17.306"></status>
</kw>
<msg timestamp="20201103 12:36:17.307" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:10.279" endtime="20201103 12:36:17.308"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.312" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:17.309" endtime="20201103 12:36:17.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.315" endtime="20201103 12:36:17.319"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.276" endtime="20201103 12:36:17.320"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.274" endtime="20201103 12:36:17.321"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:17.326" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 15, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:17.322" endtime="20201103 12:36:17.326"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.334" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:17.332" endtime="20201103 12:36:17.335"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.339" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:17.337" endtime="20201103 12:36:17.339"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.328" endtime="20201103 12:36:17.340"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.348" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:17.346" endtime="20201103 12:36:17.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.353" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:17.351" endtime="20201103 12:36:17.353"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.342" endtime="20201103 12:36:17.354"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.362" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:17.360" endtime="20201103 12:36:17.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.367" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:17.365" endtime="20201103 12:36:17.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.356" endtime="20201103 12:36:17.368"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.384" endtime="20201103 12:36:17.682"></status>
</kw>
<msg timestamp="20201103 12:36:17.685" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068719153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168728125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:17.381" endtime="20201103 12:36:17.685"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.693" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068719153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168728125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:17.686" endtime="20201103 12:36:17.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.694" endtime="20201103 12:36:17.696"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.373" endtime="20201103 12:36:17.696"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.370" endtime="20201103 12:36:17.697"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:17.701" level="INFO">${FILTERED} = [{'time': 1.168728125, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000897199999992, 'source_diff': 0.10000897199999992}, {'time': 1.268736361, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:17.697" endtime="20201103 12:36:17.701"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:17.713" level="INFO">${RESULT} = {'time': [1.168728125, 1.268736361, 1.368745569, 1.468754833, 1.568764056, 1.668773347, 1.768782542, 1.868791778, 1.968801014, 2.06881025, 2.168819486, 2.268828736, 2.368837958, 2.468847208, 2.5688564...</msg>
<status status="PASS" starttime="20201103 12:36:17.701" endtime="20201103 12:36:17.713"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.717" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:17.716" endtime="20201103 12:36:17.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.720" level="INFO">VALUE: [0.10000897199999992, 0.10000769399999987, 0.10000866600000013, 0.10000872199999988, 0.10000868100000004, 0.10000874999999998, 0.10000870900000014, 0.10000869500000009, 0.10000869500000009, 0.10000869399999979, 0.10000869400000001, 0.10000870800000028, 0.10000867999999974, 0.10000870800000028, 0.10000868099999982, 0.10000870900000036, 0.10000869500000009, 0.10000872299999974, 0.10000869499999965, 0.10000870899999992, 0.10000874999999976, 0.1000087220000001, 0.10000869500000009, 0.1000087220000001, 0.10000870899999992, 0.10000870900000036, 0.10000869500000009, 0.10000872199999966, 0.10000868099999982, 0.10000869400000045, 0.10000869400000045, 0.10000869399999956, 0.10000869399999956, 0.1000087220000001, 0.10000869400000045, 0.10000870800000072, 0.10000868100000027, 0.10000872300000019, 0.10000869499999965, 0.10000877799999941, 0.10000869500000054, 0.10000869500000054, 0.10000868000000018, 0.10000870799999984, 0.10000870800000072, 0.10000870799999984, 0.10000870799999984, 0.10000870800000072, 0.1000087220000001, 0.1000087220000001]</msg>
<status status="PASS" starttime="20201103 12:36:17.718" endtime="20201103 12:36:17.720"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.714" endtime="20201103 12:36:17.721"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.723" endtime="20201103 12:36:17.724"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:17.727" endtime="20201103 12:36:17.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.725" endtime="20201103 12:36:17.747"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.722" endtime="20201103 12:36:17.747"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.273" endtime="20201103 12:36:17.747"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:10.195" endtime="20201103 12:36:17.748" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:17.754" endtime="20201103 12:36:17.773"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.753" endtime="20201103 12:36:17.774"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.788" endtime="20201103 12:36:17.806"></status>
</kw>
<msg timestamp="20201103 12:36:17.807" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:17.786" endtime="20201103 12:36:17.807"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.809" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:17.808" endtime="20201103 12:36:17.810"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:17.812" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:17.810" endtime="20201103 12:36:17.813"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:17.784" endtime="20201103 12:36:17.813"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:17.780" endtime="20201103 12:36:17.814"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.779" endtime="20201103 12:36:17.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:17.818" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:17.817" endtime="20201103 12:36:17.818"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.815" endtime="20201103 12:36:17.818"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.778" endtime="20201103 12:36:17.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.778" endtime="20201103 12:36:17.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.819" endtime="20201103 12:36:17.821"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.776" endtime="20201103 12:36:17.821"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.775" endtime="20201103 12:36:17.822"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.751" endtime="20201103 12:36:17.822"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:17.830" endtime="20201103 12:36:24.850"></status>
</kw>
<msg timestamp="20201103 12:36:24.850" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:17.829" endtime="20201103 12:36:24.850"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.853" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:24.851" endtime="20201103 12:36:24.853"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.854" endtime="20201103 12:36:24.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.826" endtime="20201103 12:36:24.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.824" endtime="20201103 12:36:24.857"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:24.859" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 20, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:24.858" endtime="20201103 12:36:24.859"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.863" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:24.862" endtime="20201103 12:36:24.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.865" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:24.864" endtime="20201103 12:36:24.866"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.860" endtime="20201103 12:36:24.866"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.870" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:24.869" endtime="20201103 12:36:24.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.872" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:24.871" endtime="20201103 12:36:24.872"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.867" endtime="20201103 12:36:24.873"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.878" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:24.876" endtime="20201103 12:36:24.878"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.880" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:36:24.879" endtime="20201103 12:36:24.880"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.874" endtime="20201103 12:36:24.881"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.887" endtime="20201103 12:36:25.184"></status>
</kw>
<msg timestamp="20201103 12:36:25.187" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065664444, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165673375, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:24.886" endtime="20201103 12:36:25.187"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.195" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065664444, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165673375, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:25.188" endtime="20201103 12:36:25.195"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.196" endtime="20201103 12:36:25.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.883" endtime="20201103 12:36:25.198"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.882" endtime="20201103 12:36:25.198"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:25.202" level="INFO">${FILTERED} = [{'time': 1.165673375, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000893099999986, 'source_diff': 0.10000893099999986}, {'time': 1.265683625, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:25.199" endtime="20201103 12:36:25.202"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:25.217" level="INFO">${RESULT} = {'time': [1.165673375, 1.265683625, 1.365692889, 1.465702167, 1.565711389, 1.665720597, 1.765729861, 1.865739083, 1.965748347, 2.065757583, 2.165766819, 2.265776069, 2.365785333, 2.465794556, 2.565803...</msg>
<status status="PASS" starttime="20201103 12:36:25.203" endtime="20201103 12:36:25.217"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.221" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:25.220" endtime="20201103 12:36:25.222"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.224" level="INFO">VALUE: [0.10000893099999986, 0.1000097080000002, 0.10000872199999988, 0.10000873599999993, 0.10000874999999998, 0.10000866599999991, 0.1000087220000001, 0.10000867999999996, 0.10000872199999988, 0.10000869399999979, 0.10000869400000001, 0.10000870800000028, 0.10000872199999966, 0.10000868100000027, 0.1000087220000001, 0.10000868099999982, 0.10000870900000036, 0.10000870899999992, 0.10000872300000019, 0.100008667, 0.10000870799999984, 0.10000869400000001, 0.1000087220000001, 0.10000870800000028, 0.10000869400000001, 0.10000867999999974, 0.10000876400000003, 0.10000870800000028, 0.10000872199999966, 0.10000869400000045, 0.10000870799999984, 0.10000868100000027, 0.10000870899999992, 0.10000870899999992, 0.10000872199999922, 0.10000869499999965, 0.1000087220000001, 0.10000868100000027, 0.1000087229999993, 0.100008667, 0.10000870799999984, 0.10000869400000045, 0.10000870799999984, 0.10000869399999956, 0.1000087220000001, 0.10000870799999984, 0.1000087220000001, 0.10000868000000018, 0.10000876400000003, 0.1000087220000001]</msg>
<status status="PASS" starttime="20201103 12:36:25.222" endtime="20201103 12:36:25.225"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.218" endtime="20201103 12:36:25.225"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.227" endtime="20201103 12:36:25.229"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:25.231" endtime="20201103 12:36:25.250"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.229" endtime="20201103 12:36:25.250"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.226" endtime="20201103 12:36:25.251"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:17.823" endtime="20201103 12:36:25.251"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:17.749" endtime="20201103 12:36:25.252" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:25.258" endtime="20201103 12:36:25.278"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.257" endtime="20201103 12:36:25.278"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.292" endtime="20201103 12:36:25.308"></status>
</kw>
<msg timestamp="20201103 12:36:25.308" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.290" endtime="20201103 12:36:25.309"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.311" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.309" endtime="20201103 12:36:25.311"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.314" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:25.312" endtime="20201103 12:36:25.314"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:25.288" endtime="20201103 12:36:25.315"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:25.284" endtime="20201103 12:36:25.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.283" endtime="20201103 12:36:25.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:25.319" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:25.319" endtime="20201103 12:36:25.320"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.316" endtime="20201103 12:36:25.320"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.282" endtime="20201103 12:36:25.320"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.282" endtime="20201103 12:36:25.320"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.321" endtime="20201103 12:36:25.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.280" endtime="20201103 12:36:25.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.279" endtime="20201103 12:36:25.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.255" endtime="20201103 12:36:25.324"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.332" endtime="20201103 12:36:32.358"></status>
</kw>
<msg timestamp="20201103 12:36:32.359" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.331" endtime="20201103 12:36:32.360"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.365" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:32.362" endtime="20201103 12:36:32.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.367" endtime="20201103 12:36:32.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.328" endtime="20201103 12:36:32.372"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.326" endtime="20201103 12:36:32.373"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:32.378" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 25, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:32.374" endtime="20201103 12:36:32.379"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.387" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:32.385" endtime="20201103 12:36:32.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.391" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:32.389" endtime="20201103 12:36:32.392"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.380" endtime="20201103 12:36:32.393"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.401" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:32.399" endtime="20201103 12:36:32.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.405" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:32.403" endtime="20201103 12:36:32.406"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.394" endtime="20201103 12:36:32.407"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.415" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:32.413" endtime="20201103 12:36:32.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.421" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:36:32.419" endtime="20201103 12:36:32.422"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.408" endtime="20201103 12:36:32.423"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.436" endtime="20201103 12:36:32.738"></status>
</kw>
<msg timestamp="20201103 12:36:32.741" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063766569, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163775528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:32.433" endtime="20201103 12:36:32.742"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.749" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063766569, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163775528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:32.742" endtime="20201103 12:36:32.750"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.750" endtime="20201103 12:36:32.752"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.428" endtime="20201103 12:36:32.752"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.424" endtime="20201103 12:36:32.753"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:32.757" level="INFO">${FILTERED} = [{'time': 1.163775528, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000895899999995, 'source_diff': 0.10000895899999995}, {'time': 1.26378475, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:36:32.754" endtime="20201103 12:36:32.757"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:32.770" level="INFO">${RESULT} = {'time': [1.163775528, 1.26378475, 1.363794014, 1.463803264, 1.563812486, 1.663821722, 1.763830972, 1.863840236, 1.963849458, 2.063858708, 2.163867958, 2.263877181, 2.363886417, 2.463895653, 2.5639048...</msg>
<status status="PASS" starttime="20201103 12:36:32.758" endtime="20201103 12:36:32.770"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.774" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:32.773" endtime="20201103 12:36:32.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.776" level="INFO">VALUE: [0.10000895899999995, 0.10000868099999982, 0.1000087220000001, 0.10000870800000006, 0.10000867999999996, 0.10000869400000001, 0.10000870800000006, 0.10000872199999988, 0.10000868000000018, 0.10000870800000006, 0.10000870799999984, 0.10000873700000001, 0.10000869499999965, 0.10000869499999965, 0.10000868099999982, 0.10000869400000001, 0.1000087220000001, 0.10000869400000001, 0.10000869400000001, 0.10000870799999984, 0.10000868000000018, 0.10000869500000009, 0.10000870899999992, 0.10000869500000009, 0.10000873599999993, 0.10000873599999993, 0.10000872299999974, 0.10000873599999993, 0.10000869400000001, 0.10000870800000028, 0.10000869400000045, 0.10000870800000072, 0.1000087780000003, 0.1000087220000001, 0.10000869400000045, 0.10000868000000018, 0.10000869500000054, 0.10000869500000054, 0.10000869500000054, 0.10000869500000054, 0.10000870800000072, 0.1000087220000001, 0.10000868099999938, 0.10000869399999956, 0.10000870799999984, 0.10000869400000045, 0.10000870800000072, 0.1000087220000001, 0.10000870799999984, 0.10000873600000038]</msg>
<status status="PASS" starttime="20201103 12:36:32.775" endtime="20201103 12:36:32.777"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.771" endtime="20201103 12:36:32.777"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.779" endtime="20201103 12:36:32.781"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:32.783" endtime="20201103 12:36:32.802"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.781" endtime="20201103 12:36:32.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.778" endtime="20201103 12:36:32.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.324" endtime="20201103 12:36:32.803"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:25.253" endtime="20201103 12:36:32.804" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:45.099" endtime="20201103 12:36:32.811"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">esp32-wroom-32</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:35:42.069" endtime="20201103 12:36:32.840"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_esp32-wroom-32</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
