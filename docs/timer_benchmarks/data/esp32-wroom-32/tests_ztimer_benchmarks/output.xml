<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:36:44.799" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.372" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:45.381" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:46.438" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:45.371" endtime="20201103 12:36:46.439"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.443" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20201103 12:36:46.440" endtime="20201103 12:36:47.444"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.370" endtime="20201103 12:36:47.445"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:47.449" endtime="20201103 12:36:47.700"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.447" endtime="20201103 12:36:47.701"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.713" endtime="20201103 12:36:47.735"></status>
</kw>
<msg timestamp="20201103 12:36:47.736" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.712" endtime="20201103 12:36:47.736"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.738" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.737" endtime="20201103 12:36:47.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.742" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:47.739" endtime="20201103 12:36:47.742"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:47.709" endtime="20201103 12:36:47.743"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:47.707" endtime="20201103 12:36:47.743"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.706" endtime="20201103 12:36:47.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:47.747" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:47.747" endtime="20201103 12:36:47.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.744" endtime="20201103 12:36:47.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.705" endtime="20201103 12:36:47.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.704" endtime="20201103 12:36:47.748"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.749" endtime="20201103 12:36:47.751"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.703" endtime="20201103 12:36:47.751"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.752" endtime="20201103 12:36:47.754"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.701" endtime="20201103 12:36:47.754"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.368" endtime="20201103 12:36:47.755"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:47.761" endtime="20201103 12:36:47.781"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.760" endtime="20201103 12:36:47.781"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.879" endtime="20201103 12:36:47.897"></status>
</kw>
<msg timestamp="20201103 12:36:47.898" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.877" endtime="20201103 12:36:47.898"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.900" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.899" endtime="20201103 12:36:47.900"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.903" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:47.901" endtime="20201103 12:36:47.903"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:47.874" endtime="20201103 12:36:47.904"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:47.871" endtime="20201103 12:36:47.905"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.787" endtime="20201103 12:36:47.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:47.909" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:47.908" endtime="20201103 12:36:47.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.906" endtime="20201103 12:36:47.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.786" endtime="20201103 12:36:47.910"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.785" endtime="20201103 12:36:47.910"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.910" endtime="20201103 12:36:47.912"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.784" endtime="20201103 12:36:47.912"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.782" endtime="20201103 12:36:47.913"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.758" endtime="20201103 12:36:47.913"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.920" endtime="20201103 12:36:47.933"></status>
</kw>
<msg timestamp="20201103 12:36:47.933" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.918" endtime="20201103 12:36:47.933"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.936" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.934" endtime="20201103 12:36:47.936"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.937" endtime="20201103 12:36:47.938"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.916" endtime="20201103 12:36:47.939"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.914" endtime="20201103 12:36:47.939"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.943" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:36:47.942" endtime="20201103 12:36:47.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.945" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:36:47.944" endtime="20201103 12:36:47.946"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.940" endtime="20201103 12:36:47.946"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:47.755" endtime="20201103 12:36:47.947" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:44.913" endtime="20201103 12:36:47.949"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.999" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:48.007" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:49.056" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:47.998" endtime="20201103 12:36:49.057"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.060" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20201103 12:36:49.058" endtime="20201103 12:36:50.060"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.996" endtime="20201103 12:36:50.061"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:50.063" endtime="20201103 12:36:50.289"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.062" endtime="20201103 12:36:50.290"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.302" endtime="20201103 12:36:50.322"></status>
</kw>
<msg timestamp="20201103 12:36:50.323" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:50.300" endtime="20201103 12:36:50.323"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.327" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:50.326" endtime="20201103 12:36:50.328"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.330" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:50.328" endtime="20201103 12:36:50.331"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:50.298" endtime="20201103 12:36:50.331"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:50.296" endtime="20201103 12:36:50.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.294" endtime="20201103 12:36:50.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:50.339" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:50.338" endtime="20201103 12:36:50.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.333" endtime="20201103 12:36:50.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.294" endtime="20201103 12:36:50.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.293" endtime="20201103 12:36:50.340"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.341" endtime="20201103 12:36:50.342"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.292" endtime="20201103 12:36:50.343"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.344" endtime="20201103 12:36:50.346"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.290" endtime="20201103 12:36:50.346"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.995" endtime="20201103 12:36:50.346"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:50.357" endtime="20201103 12:36:50.376"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.354" endtime="20201103 12:36:50.377"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.390" endtime="20201103 12:36:50.409"></status>
</kw>
<msg timestamp="20201103 12:36:50.409" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:50.389" endtime="20201103 12:36:50.410"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.412" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:50.411" endtime="20201103 12:36:50.412"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:50.415" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:50.413" endtime="20201103 12:36:50.415"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:50.386" endtime="20201103 12:36:50.416"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:50.384" endtime="20201103 12:36:50.417"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.382" endtime="20201103 12:36:50.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:50.421" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:50.420" endtime="20201103 12:36:50.421"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.418" endtime="20201103 12:36:50.421"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.381" endtime="20201103 12:36:50.422"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.381" endtime="20201103 12:36:50.422"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.423" endtime="20201103 12:36:50.424"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.379" endtime="20201103 12:36:50.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.378" endtime="20201103 12:36:50.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.351" endtime="20201103 12:36:50.425"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:50.434" endtime="20201103 12:36:57.462"></status>
</kw>
<msg timestamp="20201103 12:36:57.464" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:50.432" endtime="20201103 12:36:57.465"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.471" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.467" endtime="20201103 12:36:57.472"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.474" endtime="20201103 12:36:57.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.430" endtime="20201103 12:36:57.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.428" endtime="20201103 12:36:57.482"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:57.490" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:36:57.484" endtime="20201103 12:36:57.490"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.501" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:57.498" endtime="20201103 12:36:57.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.508" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:57.505" endtime="20201103 12:36:57.509"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.492" endtime="20201103 12:36:57.511"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.522" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:57.519" endtime="20201103 12:36:57.523"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.528" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:57.525" endtime="20201103 12:36:57.529"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.512" endtime="20201103 12:36:57.531"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.542" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:57.539" endtime="20201103 12:36:57.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.546" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:36:57.543" endtime="20201103 12:36:57.546"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.532" endtime="20201103 12:36:57.547"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.558" endtime="20201103 12:36:57.860"></status>
</kw>
<msg timestamp="20201103 12:36:57.863" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067510528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167518486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:57.555" endtime="20201103 12:36:57.863"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.871" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067510528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167518486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:57.864" endtime="20201103 12:36:57.871"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.872" endtime="20201103 12:36:57.874"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.551" endtime="20201103 12:36:57.874"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.548" endtime="20201103 12:36:57.875"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:57.879" level="INFO">${FILTERED} = [{'time': 1.167518486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000795800000017, 'source_diff': 0.10000795800000017}, {'time': 1.26752775, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:36:57.876" endtime="20201103 12:36:57.879"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:57.892" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:36:57.880" endtime="20201103 12:36:57.892"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.897" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:57.895" endtime="20201103 12:36:57.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.899" level="INFO">VALUE: [0.10000795800000017, 0.10000877799999985, 0.10000873599999993, 0.10000874999999998, 0.10000870800000006, 0.10000876400000003, 0.10000868100000004, 0.10000880499999987, 0.10000870900000014, 0.10000877799999985, 0.10000873599999993, 0.10000870799999984, 0.10000868000000018, 0.10000876400000003, 0.10000873599999993, 0.1000087220000001, 0.10000876400000003, 0.10000876400000003, 0.10000869400000001, 0.10000876400000003, 0.10000873599999993, 0.1000087500000002, 0.1000087220000001, 0.10000873599999993, 0.10000876400000003, 0.10000876400000003, 0.10000873700000001, 0.10000874999999976, 0.10000873599999993, 0.1000087500000002, 0.10000869400000045, 0.10000873600000038, 0.10000874999999976, 0.10000876400000003, 0.10000869400000045, 0.10000869400000045, 0.10000869400000045, 0.10000870799999984, 0.10000869499999965, 0.1000087220000001, 0.10000870799999984, 0.10000877700000022, 0.10000873699999957, 0.10000872199999922, 0.1000087229999993, 0.10000873600000038, 0.10000875000000065, 0.10000876299999995, 0.1000087220000001, 0.10000872199999922]</msg>
<status status="PASS" starttime="20201103 12:36:57.898" endtime="20201103 12:36:57.900"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.893" endtime="20201103 12:36:57.900"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.903" endtime="20201103 12:36:57.904"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:57.906" endtime="20201103 12:36:57.925"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.904" endtime="20201103 12:36:57.926"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.901" endtime="20201103 12:36:57.926"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:50.426" endtime="20201103 12:36:57.927"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:50.347" endtime="20201103 12:36:57.927" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:57.934" endtime="20201103 12:36:57.953"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.932" endtime="20201103 12:36:57.954"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.969" endtime="20201103 12:36:57.987"></status>
</kw>
<msg timestamp="20201103 12:36:57.988" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.967" endtime="20201103 12:36:57.988"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.990" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.989" endtime="20201103 12:36:57.991"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.994" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:57.992" endtime="20201103 12:36:57.994"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:57.964" endtime="20201103 12:36:57.995"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:57.961" endtime="20201103 12:36:57.995"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.960" endtime="20201103 12:36:57.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:57.999" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:57.999" endtime="20201103 12:36:58.000"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.996" endtime="20201103 12:36:58.000"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.959" endtime="20201103 12:36:58.000"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.958" endtime="20201103 12:36:58.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.001" endtime="20201103 12:36:58.003"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.957" endtime="20201103 12:36:58.003"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.955" endtime="20201103 12:36:58.004"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.931" endtime="20201103 12:36:58.004"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.013" endtime="20201103 12:37:05.038"></status>
</kw>
<msg timestamp="20201103 12:37:05.039" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:58.012" endtime="20201103 12:37:05.040"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.045" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:05.042" endtime="20201103 12:37:05.046"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.047" endtime="20201103 12:37:05.051"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.009" endtime="20201103 12:37:05.052"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.006" endtime="20201103 12:37:05.053"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:05.058" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:37:05.054" endtime="20201103 12:37:05.058"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.066" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:05.064" endtime="20201103 12:37:05.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.071" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:05.069" endtime="20201103 12:37:05.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.060" endtime="20201103 12:37:05.072"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.080" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:05.078" endtime="20201103 12:37:05.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.086" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:05.083" endtime="20201103 12:37:05.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.074" endtime="20201103 12:37:05.088"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.095" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:05.093" endtime="20201103 12:37:05.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.100" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:37:05.098" endtime="20201103 12:37:05.101"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.089" endtime="20201103 12:37:05.102"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.112" endtime="20201103 12:37:05.408"></status>
</kw>
<msg timestamp="20201103 12:37:05.411" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068902028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168910958, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:05.111" endtime="20201103 12:37:05.411"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.418" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068902028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168910958, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:05.412" endtime="20201103 12:37:05.419"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.420" endtime="20201103 12:37:05.421"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.107" endtime="20201103 12:37:05.422"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.103" endtime="20201103 12:37:05.422"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:05.426" level="INFO">${FILTERED} = [{'time': 1.168910958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000893000000022, 'source_diff': 0.10000893000000022}, {'time': 1.268920222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:05.423" endtime="20201103 12:37:05.426"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:05.440" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:37:05.427" endtime="20201103 12:37:05.441"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.445" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:05.444" endtime="20201103 12:37:05.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.447" level="INFO">VALUE: [0.10000893000000022, 0.10000877800000008, 0.10000874999999998, 0.10000877800000008, 0.10000867999999996, 0.10000872199999988, 0.10000868100000004, 0.10000872199999988, 0.10000874999999998, 0.1000087639999998, 0.10000869500000009, 0.10000874999999976, 0.10000869500000009, 0.10000874999999976, 0.10000870800000028, 0.10000876400000003, 0.10000869400000001, 0.10000870799999984, 0.1000087500000002, 0.10000870799999984, 0.10000870800000028, 0.1000087780000003, 0.10000873599999993, 0.1000087500000002, 0.1000087220000001, 0.10000874999999976, 0.10000873599999993, 0.1000087220000001, 0.10000869500000009, 0.10000876400000047, 0.10000868000000018, 0.1000087220000001, 0.10000870799999984, 0.1000087220000001, 0.10000869399999956, 0.1000087220000001, 0.10000868000000018, 0.10000870799999984, 0.10000868000000018, 0.10000870799999984, 0.10000875000000065, 0.10000872199999922, 0.10000869499999965, 0.10000873600000038, 0.10000875000000065, 0.10000876299999995, 0.100008667, 0.10000870899999992, 0.10000868100000027, 0.1000087220000001]</msg>
<status status="PASS" starttime="20201103 12:37:05.446" endtime="20201103 12:37:05.448"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.441" endtime="20201103 12:37:05.448"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.450" endtime="20201103 12:37:05.452"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:05.454" endtime="20201103 12:37:05.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.452" endtime="20201103 12:37:05.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.449" endtime="20201103 12:37:05.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.004" endtime="20201103 12:37:05.474"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:57.929" endtime="20201103 12:37:05.475" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:05.482" endtime="20201103 12:37:05.501"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.480" endtime="20201103 12:37:05.502"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.515" endtime="20201103 12:37:05.534"></status>
</kw>
<msg timestamp="20201103 12:37:05.534" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:05.514" endtime="20201103 12:37:05.534"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.537" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:05.535" endtime="20201103 12:37:05.537"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.540" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:05.538" endtime="20201103 12:37:05.540"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:05.511" endtime="20201103 12:37:05.541"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:05.509" endtime="20201103 12:37:05.541"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.507" endtime="20201103 12:37:05.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:05.547" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:05.545" endtime="20201103 12:37:05.547"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.543" endtime="20201103 12:37:05.547"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.506" endtime="20201103 12:37:05.547"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.506" endtime="20201103 12:37:05.548"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.548" endtime="20201103 12:37:05.550"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.504" endtime="20201103 12:37:05.550"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.503" endtime="20201103 12:37:05.551"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.479" endtime="20201103 12:37:05.551"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.559" endtime="20201103 12:37:12.585"></status>
</kw>
<msg timestamp="20201103 12:37:12.586" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:05.558" endtime="20201103 12:37:12.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.591" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:12.588" endtime="20201103 12:37:12.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:12.593" endtime="20201103 12:37:12.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.555" endtime="20201103 12:37:12.598"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.553" endtime="20201103 12:37:12.599"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:12.604" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:37:12.601" endtime="20201103 12:37:12.604"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.613" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:12.610" endtime="20201103 12:37:12.614"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.618" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:12.616" endtime="20201103 12:37:12.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.606" endtime="20201103 12:37:12.620"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.626" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:12.625" endtime="20201103 12:37:12.626"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.628" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:12.627" endtime="20201103 12:37:12.629"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.621" endtime="20201103 12:37:12.629"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.633" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:12.632" endtime="20201103 12:37:12.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.635" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:37:12.634" endtime="20201103 12:37:12.635"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.630" endtime="20201103 12:37:12.636"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:12.642" endtime="20201103 12:37:12.939"></status>
</kw>
<msg timestamp="20201103 12:37:12.942" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067027944, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167036917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:12.641" endtime="20201103 12:37:12.942"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.950" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067027944, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167036917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:12.943" endtime="20201103 12:37:12.950"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:12.951" endtime="20201103 12:37:12.953"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.638" endtime="20201103 12:37:12.953"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.637" endtime="20201103 12:37:12.954"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:12.958" level="INFO">${FILTERED} = [{'time': 1.167036917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100008973, 'source_diff': 0.100008973}, {'time': 1.267046181, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100008722999999...</msg>
<status status="PASS" starttime="20201103 12:37:12.955" endtime="20201103 12:37:12.958"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:12.971" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:37:12.959" endtime="20201103 12:37:12.971"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.975" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:12.974" endtime="20201103 12:37:12.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:12.978" level="INFO">VALUE: [0.100008973, 0.10000872299999997, 0.10000876400000003, 0.10000873599999993, 0.10000873600000015, 0.10000872299999997, 0.10000874999999998, 0.1000087220000001, 0.10000872199999988, 0.10000869400000001, 0.10000870800000028, 0.10000870799999984, 0.10000876400000003, 0.10000869400000001, 0.1000087220000001, 0.10000870799999984, 0.10000876399999958, 0.10000867999999974, 0.10000873599999993, 0.10000873599999993, 0.10000873599999993, 0.10000876400000003, 0.10000879200000012, 0.10000870899999992, 0.10000870899999992, 0.10000869500000009, 0.10000872300000019, 0.1000087500000002, 0.10000876400000003, 0.10000873599999949, 0.10000876400000003, 0.1000087909999996, 0.1000087220000001, 0.10000869499999965, 0.1000087220000001, 0.10000869500000054, 0.1000087220000001, 0.10000870899999992, 0.10000876400000003, 0.10000870899999992, 0.10000872300000019, 0.1000087220000001, 0.1000087220000001, 0.10000873600000038, 0.10000870800000072, 0.10000870799999984, 0.10000882000000022, 0.1000087220000001, 0.10000880599999995, 0.10000873600000038]</msg>
<status status="PASS" starttime="20201103 12:37:12.976" endtime="20201103 12:37:12.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.972" endtime="20201103 12:37:12.979"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:12.981" endtime="20201103 12:37:12.983"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:12.985" endtime="20201103 12:37:13.004"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.983" endtime="20201103 12:37:13.005"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:12.979" endtime="20201103 12:37:13.005"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.552" endtime="20201103 12:37:13.005"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:05.477" endtime="20201103 12:37:13.006" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:13.013" endtime="20201103 12:37:13.032"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.011" endtime="20201103 12:37:13.033"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:13.046" endtime="20201103 12:37:13.065"></status>
</kw>
<msg timestamp="20201103 12:37:13.065" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:13.044" endtime="20201103 12:37:13.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.068" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:13.067" endtime="20201103 12:37:13.068"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.071" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:13.069" endtime="20201103 12:37:13.071"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:13.041" endtime="20201103 12:37:13.072"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:13.039" endtime="20201103 12:37:13.073"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.038" endtime="20201103 12:37:13.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:13.077" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:13.076" endtime="20201103 12:37:13.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.074" endtime="20201103 12:37:13.078"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.037" endtime="20201103 12:37:13.078"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.036" endtime="20201103 12:37:13.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:13.079" endtime="20201103 12:37:13.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.035" endtime="20201103 12:37:13.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.033" endtime="20201103 12:37:13.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.010" endtime="20201103 12:37:13.081"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:13.090" endtime="20201103 12:37:20.109"></status>
</kw>
<msg timestamp="20201103 12:37:20.110" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:13.088" endtime="20201103 12:37:20.110"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.112" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:20.111" endtime="20201103 12:37:20.113"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.114" endtime="20201103 12:37:20.116"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.085" endtime="20201103 12:37:20.116"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.083" endtime="20201103 12:37:20.117"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:20.119" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:37:20.117" endtime="20201103 12:37:20.119"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.123" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:20.122" endtime="20201103 12:37:20.124"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.126" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:20.125" endtime="20201103 12:37:20.126"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.120" endtime="20201103 12:37:20.126"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.130" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:20.129" endtime="20201103 12:37:20.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.132" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:20.131" endtime="20201103 12:37:20.133"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.127" endtime="20201103 12:37:20.133"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.137" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:20.136" endtime="20201103 12:37:20.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.139" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:37:20.138" endtime="20201103 12:37:20.140"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.134" endtime="20201103 12:37:20.140"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.148" endtime="20201103 12:37:20.464"></status>
</kw>
<msg timestamp="20201103 12:37:20.467" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066622389, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166631333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:20.145" endtime="20201103 12:37:20.467"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.475" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066622389, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166631333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:20.468" endtime="20201103 12:37:20.475"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.476" endtime="20201103 12:37:20.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.142" endtime="20201103 12:37:20.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.141" endtime="20201103 12:37:20.479"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:20.483" level="INFO">${FILTERED} = [{'time': 1.166631333, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000894400000004, 'source_diff': 0.10000894400000004}, {'time': 1.266640569, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:20.480" endtime="20201103 12:37:20.483"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:20.496" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:37:20.484" endtime="20201103 12:37:20.497"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.501" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:20.500" endtime="20201103 12:37:20.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.503" level="INFO">VALUE: [0.10000894400000004, 0.10000869400000001, 0.1000087220000001, 0.10000869400000001, 0.10000870799999984, 0.1000087220000001, 0.10000877799999985, 0.10000872300000019, 0.10000870899999992, 0.10000869500000009, 0.10000870899999992, 0.10000869500000009, 0.10000873700000001, 0.10000873599999993, 0.10000872300000019, 0.10000870899999992, 0.10000876400000003, 0.10000870899999992, 0.1000087500000002, 0.1000087500000002, 0.1000087220000001, 0.10000869500000009, 0.10000873599999993, 0.10000869400000001, 0.10000873599999993, 0.10000868000000018, 0.10000870799999984, 0.10000868100000027, 0.10000873599999993, 0.10000873599999993, 0.10000879199999968, 0.10000869500000054, 0.10000872300000019, 0.10000873599999949, 0.10000876299999995, 0.10000877799999941, 0.1000087220000001, 0.10000869399999956, 0.10000870799999984, 0.10000869500000054, 0.10000884699999979, 0.10000868100000027, 0.10000872300000019, 0.10000873599999949, 0.10000873699999957, 0.1000087220000001, 0.10000870800000072, 0.10000870799999984, 0.10000876400000003, 0.1000086799999993]</msg>
<status status="PASS" starttime="20201103 12:37:20.502" endtime="20201103 12:37:20.504"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.497" endtime="20201103 12:37:20.505"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.507" endtime="20201103 12:37:20.509"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:20.511" endtime="20201103 12:37:20.530"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.509" endtime="20201103 12:37:20.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.505" endtime="20201103 12:37:20.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.082" endtime="20201103 12:37:20.532"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:13.008" endtime="20201103 12:37:20.532" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:20.539" endtime="20201103 12:37:20.559"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.538" endtime="20201103 12:37:20.559"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.574" endtime="20201103 12:37:20.592"></status>
</kw>
<msg timestamp="20201103 12:37:20.593" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:20.572" endtime="20201103 12:37:20.593"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.596" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:20.594" endtime="20201103 12:37:20.596"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:20.599" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:20.597" endtime="20201103 12:37:20.599"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:20.569" endtime="20201103 12:37:20.600"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:20.566" endtime="20201103 12:37:20.601"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.565" endtime="20201103 12:37:20.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:20.605" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:20.604" endtime="20201103 12:37:20.605"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.602" endtime="20201103 12:37:20.606"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.564" endtime="20201103 12:37:20.606"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.563" endtime="20201103 12:37:20.606"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.607" endtime="20201103 12:37:20.608"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.562" endtime="20201103 12:37:20.609"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.560" endtime="20201103 12:37:20.609"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.536" endtime="20201103 12:37:20.610"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:20.619" endtime="20201103 12:37:27.644"></status>
</kw>
<msg timestamp="20201103 12:37:27.645" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:20.617" endtime="20201103 12:37:27.646"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.651" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:27.648" endtime="20201103 12:37:27.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:27.654" endtime="20201103 12:37:27.658"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.614" endtime="20201103 12:37:27.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.612" endtime="20201103 12:37:27.660"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:27.665" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:37:27.662" endtime="20201103 12:37:27.665"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.673" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:27.671" endtime="20201103 12:37:27.674"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.678" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:27.676" endtime="20201103 12:37:27.679"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:27.667" endtime="20201103 12:37:27.681"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.689" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:27.687" endtime="20201103 12:37:27.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.693" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:27.691" endtime="20201103 12:37:27.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:27.682" endtime="20201103 12:37:27.695"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.703" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:27.701" endtime="20201103 12:37:27.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:27.709" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:37:27.705" endtime="20201103 12:37:27.710"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:27.696" endtime="20201103 12:37:27.711"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:27.724" endtime="20201103 12:37:28.028"></status>
</kw>
<msg timestamp="20201103 12:37:28.030" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.069566694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.169575667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:27.721" endtime="20201103 12:37:28.031"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.038" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.069566694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.169575667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:28.032" endtime="20201103 12:37:28.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.039" endtime="20201103 12:37:28.041"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:27.716" endtime="20201103 12:37:28.042"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:27.712" endtime="20201103 12:37:28.042"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:28.046" level="INFO">${FILTERED} = [{'time': 1.169575667, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100008973, 'source_diff': 0.100008973}, {'time': 1.269584889, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100008681000000...</msg>
<status status="PASS" starttime="20201103 12:37:28.043" endtime="20201103 12:37:28.046"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:28.061" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:37:28.047" endtime="20201103 12:37:28.061"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.065" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:28.064" endtime="20201103 12:37:28.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.068" level="INFO">VALUE: [0.100008973, 0.10000868100000004, 0.10000870799999984, 0.10000870800000006, 0.10000876400000003, 0.10000869400000001, 0.10000872199999988, 0.10000873600000015, 0.1000087639999998, 0.10000868000000018, 0.1000087220000001, 0.10000872300000019, 0.1000087220000001, 0.10000873599999993, 0.10000872300000019, 0.10000869500000009, 0.10000876400000003, 0.10000872300000019, 0.10000870899999992, 0.10000868100000027, 0.10000873599999993, 0.10000873599999993, 0.10000873599999993, 0.10000868099999982, 0.10000870799999984, 0.10000869399999956, 0.10000874999999976, 0.10000869399999956, 0.1000087220000001, 0.10000876400000047, 0.10000876400000003, 0.1000087220000001, 0.10000875000000065, 0.10000876400000003, 0.10000870799999984, 0.10000869499999965, 0.1000087220000001, 0.10000869500000054, 0.1000087220000001, 0.1000087780000003, 0.10000870799999984, 0.10000870799999984, 0.10000874999999976, 0.10000872300000019, 0.10000877799999941, 0.10000873600000038, 0.10000872300000019, 0.10000877799999941, 0.10000872300000019, 0.10000869499999965]</msg>
<status status="PASS" starttime="20201103 12:37:28.066" endtime="20201103 12:37:28.068"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.062" endtime="20201103 12:37:28.069"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.071" endtime="20201103 12:37:28.072"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:28.074" endtime="20201103 12:37:28.094"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.073" endtime="20201103 12:37:28.094"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.069" endtime="20201103 12:37:28.095"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:20.610" endtime="20201103 12:37:28.095"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:20.534" endtime="20201103 12:37:28.095" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:28.102" endtime="20201103 12:37:28.121"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.101" endtime="20201103 12:37:28.122"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.136" endtime="20201103 12:37:28.153"></status>
</kw>
<msg timestamp="20201103 12:37:28.153" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:28.134" endtime="20201103 12:37:28.153"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.156" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:28.154" endtime="20201103 12:37:28.156"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.159" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:28.157" endtime="20201103 12:37:28.159"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:28.132" endtime="20201103 12:37:28.160"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:28.129" endtime="20201103 12:37:28.160"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.127" endtime="20201103 12:37:28.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:28.164" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:28.164" endtime="20201103 12:37:28.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.162" endtime="20201103 12:37:28.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.127" endtime="20201103 12:37:28.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.126" endtime="20201103 12:37:28.165"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.166" endtime="20201103 12:37:28.168"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.124" endtime="20201103 12:37:28.168"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.123" endtime="20201103 12:37:28.169"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.099" endtime="20201103 12:37:28.169"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.177" endtime="20201103 12:37:35.203"></status>
</kw>
<msg timestamp="20201103 12:37:35.204" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:28.176" endtime="20201103 12:37:35.205"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.209" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:35.206" endtime="20201103 12:37:35.210"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:35.212" endtime="20201103 12:37:35.215"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.173" endtime="20201103 12:37:35.216"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.171" endtime="20201103 12:37:35.217"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:35.222" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:37:35.219" endtime="20201103 12:37:35.223"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.231" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:35.229" endtime="20201103 12:37:35.231"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.235" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:35.233" endtime="20201103 12:37:35.235"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.224" endtime="20201103 12:37:35.237"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.245" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:35.242" endtime="20201103 12:37:35.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.249" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:35.247" endtime="20201103 12:37:35.250"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.238" endtime="20201103 12:37:35.251"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.259" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:35.256" endtime="20201103 12:37:35.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.265" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:37:35.263" endtime="20201103 12:37:35.266"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.252" endtime="20201103 12:37:35.267"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:35.277" endtime="20201103 12:37:35.573"></status>
</kw>
<msg timestamp="20201103 12:37:35.576" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064949931, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164959528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:35.275" endtime="20201103 12:37:35.576"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.584" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064949931, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164959528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:35.577" endtime="20201103 12:37:35.584"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:35.585" endtime="20201103 12:37:35.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.272" endtime="20201103 12:37:35.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.268" endtime="20201103 12:37:35.588"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:35.591" level="INFO">${FILTERED} = [{'time': 1.164959528, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000959700000012, 'source_diff': 0.10000959700000012}, {'time': 1.264968139, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:35.588" endtime="20201103 12:37:35.592"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:35.661" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:37:35.649" endtime="20201103 12:37:35.662"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.665" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:35.664" endtime="20201103 12:37:35.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:35.668" level="INFO">VALUE: [0.10000959700000012, 0.10000807000000012, 0.10000943099999993, 0.1000080699999999, 0.100009389, 0.1000080280000002, 0.100009389, 0.1000080699999999, 0.10000937499999996, 0.10000805499999976, 0.10000943100000015, 0.10000808299999964, 0.10000938900000023, 0.1000081530000001, 0.10000938899999978, 0.1000080699999999, 0.10000933400000012, 0.10000805600000007, 0.10000943100000015, 0.10000807000000034, 0.10000940300000005, 0.10000802799999997, 0.10000936100000013, 0.10000806899999981, 0.10000941699999988, 0.1000080699999999, 0.10000937499999996, 0.10000808399999972, 0.10000936099999969, 0.10000809699999991, 0.10000941699999988, 0.10000807000000034, 0.10000943000000007, 0.1000081659999994, 0.10000934800000039, 0.10000807000000034, 0.10000937499999996, 0.10000804099999971, 0.10000938900000023, 0.10000805499999998, 0.10000941700000077, 0.10000802700000033, 0.10000937499999996, 0.10000802699999944, 0.10000936099999969, 0.10000806900000025, 0.10000941699999988, 0.10000805499999998, 0.10000936100000057, 0.10000805499999998]</msg>
<status status="PASS" starttime="20201103 12:37:35.667" endtime="20201103 12:37:35.668"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.662" endtime="20201103 12:37:35.669"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:35.671" endtime="20201103 12:37:35.672"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:35.675" endtime="20201103 12:37:35.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.673" endtime="20201103 12:37:35.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:35.669" endtime="20201103 12:37:35.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.169" endtime="20201103 12:37:35.695"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:28.097" endtime="20201103 12:37:35.696" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:47.954" endtime="20201103 12:37:35.703"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">esp32-wroom-32</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:36:44.802" endtime="20201103 12:37:35.729"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_esp32-wroom-32</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
