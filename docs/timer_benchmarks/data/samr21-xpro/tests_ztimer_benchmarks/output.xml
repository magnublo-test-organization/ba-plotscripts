<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201103 12:25:47.995" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.314" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:49.330" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:51.358" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:49.310" endtime="20201103 12:25:51.359"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:51.365" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:51.362" endtime="20201103 12:25:51.366"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.307" endtime="20201103 12:25:51.367"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:51.372" endtime="20201103 12:25:51.723"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.369" endtime="20201103 12:25:51.725"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.758" endtime="20201103 12:25:51.774"></status>
</kw>
<msg timestamp="20201103 12:25:51.775" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:51.755" endtime="20201103 12:25:51.775"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:51.782" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:51.777" endtime="20201103 12:25:51.783"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:51.789" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:51.785" endtime="20201103 12:25:51.790"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:51.748" endtime="20201103 12:25:51.792"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:51.742" endtime="20201103 12:25:51.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.739" endtime="20201103 12:25:51.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:51.802" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:51.801" endtime="20201103 12:25:51.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.796" endtime="20201103 12:25:51.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.736" endtime="20201103 12:25:51.804"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.734" endtime="20201103 12:25:51.804"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.806" endtime="20201103 12:25:51.809"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.730" endtime="20201103 12:25:51.811"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.812" endtime="20201103 12:25:51.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.727" endtime="20201103 12:25:51.818"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.304" endtime="20201103 12:25:51.818"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:51.834" endtime="20201103 12:25:51.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.830" endtime="20201103 12:25:51.857"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.891" endtime="20201103 12:25:51.906"></status>
</kw>
<msg timestamp="20201103 12:25:51.907" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:51.888" endtime="20201103 12:25:51.908"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:51.914" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:51.909" endtime="20201103 12:25:51.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:51.920" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:51.916" endtime="20201103 12:25:51.921"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:51.880" endtime="20201103 12:25:51.923"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:51.874" endtime="20201103 12:25:51.924"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.871" endtime="20201103 12:25:51.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:51.932" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:51.931" endtime="20201103 12:25:51.933"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.927" endtime="20201103 12:25:51.934"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.869" endtime="20201103 12:25:51.934"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.867" endtime="20201103 12:25:51.935"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.936" endtime="20201103 12:25:51.939"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.863" endtime="20201103 12:25:51.941"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.859" endtime="20201103 12:25:51.942"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.828" endtime="20201103 12:25:51.943"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.961" endtime="20201103 12:25:51.971"></status>
</kw>
<msg timestamp="20201103 12:25:51.972" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:51.957" endtime="20201103 12:25:51.973"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:51.979" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:51.975" endtime="20201103 12:25:51.979"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:51.982" endtime="20201103 12:25:51.988"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.950" endtime="20201103 12:25:51.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.945" endtime="20201103 12:25:51.991"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:52.000" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:51.998" endtime="20201103 12:25:52.001"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:52.005" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:25:52.003" endtime="20201103 12:25:52.006"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:51.992" endtime="20201103 12:25:52.007"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:51.819" endtime="20201103 12:25:52.009" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:48.256" endtime="20201103 12:25:52.017"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:52.146" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:52.161" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:54.212" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:52.142" endtime="20201103 12:25:54.213"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.218" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:54.215" endtime="20201103 12:25:54.219"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:52.140" endtime="20201103 12:25:54.221"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:54.225" endtime="20201103 12:25:54.568"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.222" endtime="20201103 12:25:54.570"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.600" endtime="20201103 12:25:54.615"></status>
</kw>
<msg timestamp="20201103 12:25:54.617" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.596" endtime="20201103 12:25:54.617"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.623" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.619" endtime="20201103 12:25:54.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.630" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:54.625" endtime="20201103 12:25:54.630"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.590" endtime="20201103 12:25:54.632"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.584" endtime="20201103 12:25:54.634"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.582" endtime="20201103 12:25:54.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:54.642" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:54.641" endtime="20201103 12:25:54.643"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.636" endtime="20201103 12:25:54.646"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.580" endtime="20201103 12:25:54.646"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.578" endtime="20201103 12:25:54.646"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.648" endtime="20201103 12:25:54.651"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.575" endtime="20201103 12:25:54.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.655" endtime="20201103 12:25:54.658"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.571" endtime="20201103 12:25:54.660"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:52.137" endtime="20201103 12:25:54.661"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:54.674" endtime="20201103 12:25:54.696"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.671" endtime="20201103 12:25:54.698"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.731" endtime="20201103 12:25:54.748"></status>
</kw>
<msg timestamp="20201103 12:25:54.749" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.727" endtime="20201103 12:25:54.751"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.758" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.753" endtime="20201103 12:25:54.759"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.765" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:54.761" endtime="20201103 12:25:54.766"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.720" endtime="20201103 12:25:54.768"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.714" endtime="20201103 12:25:54.769"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.711" endtime="20201103 12:25:54.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:54.778" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:54.776" endtime="20201103 12:25:54.779"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.772" endtime="20201103 12:25:54.779"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.709" endtime="20201103 12:25:54.779"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.707" endtime="20201103 12:25:54.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.781" endtime="20201103 12:25:54.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.703" endtime="20201103 12:25:54.786"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.699" endtime="20201103 12:25:54.788"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.668" endtime="20201103 12:25:54.788"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.871" endtime="20201103 12:26:01.908"></status>
</kw>
<msg timestamp="20201103 12:26:01.909" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.806" endtime="20201103 12:26:01.909"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.915" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:01.911" endtime="20201103 12:26:01.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:01.917" endtime="20201103 12:26:01.921"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.799" endtime="20201103 12:26:01.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.794" endtime="20201103 12:26:01.924"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:01.930" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:26:01.926" endtime="20201103 12:26:01.930"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.940" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:01.938" endtime="20201103 12:26:01.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.945" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:01.943" endtime="20201103 12:26:01.946"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.932" endtime="20201103 12:26:01.947"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.957" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:01.955" endtime="20201103 12:26:01.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.961" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:01.959" endtime="20201103 12:26:01.962"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.948" endtime="20201103 12:26:01.964"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.973" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:01.971" endtime="20201103 12:26:01.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.978" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:26:01.975" endtime="20201103 12:26:01.979"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.965" endtime="20201103 12:26:01.981"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:01.997" endtime="20201103 12:26:02.360"></status>
</kw>
<msg timestamp="20201103 12:26:02.367" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.190249819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.290466403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:01.994" endtime="20201103 12:26:02.368"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.385" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.190249819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.290466403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:02.369" endtime="20201103 12:26:02.386"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.387" endtime="20201103 12:26:02.391"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.987" endtime="20201103 12:26:02.392"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.982" endtime="20201103 12:26:02.394"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:02.404" level="INFO">${FILTERED} = [{'time': 1.290466403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100216584, 'source_diff': 0.100216584}, {'time': 1.390692361, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100225180000000...</msg>
<status status="PASS" starttime="20201103 12:26:02.396" endtime="20201103 12:26:02.405"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:02.434" level="INFO">${RESULT} = {'diff': [0.100216584, 0.10022518000000002, 0.10022480599999994, 0.10022440300000013, 0.10021925000000009, 0.10021243099999988, 0.10021016699999996, 0.10022249999999988, 0.10022462499999985, 0.1002340...</msg>
<status status="PASS" starttime="20201103 12:26:02.406" endtime="20201103 12:26:02.434"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.444" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:02.442" endtime="20201103 12:26:02.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.449" level="INFO">VALUE: [0.100216584, 0.10022518000000002, 0.10022480599999994, 0.10022440300000013, 0.10021925000000009, 0.10021243099999988, 0.10021016699999996, 0.10022249999999988, 0.10022462499999985, 0.10023406900000031, 0.10023513900000003, 0.10021923699999968, 0.10021506900000032, 0.10023104199999988, 0.10021298600000028, 0.10022177799999987, 0.1002206529999996, 0.10021506999999996, 0.10021142999999988, 0.10021087500000014, 0.10021702799999987, 0.10022340299999977, 0.10022418100000019, 0.10022079099999992, 0.1002227630000001, 0.10021258399999988, 0.10021979099999978, 0.10022844499999994, 0.10021783299999987, 0.10023851399999995, 0.10022291699999997, 0.10021969399999975, 0.1002139720000006, 0.10020637499999996, 0.10019784699999956, 0.10019322200000058, 0.10021266700000009, 0.10021094399999964, 0.10020922299999935, 0.10019994499999996, 0.10020526399999952, 0.10020251400000024, 0.10020852800000046, 0.10020380499999959, 0.100209875, 0.10021024999999995, 0.10021737500000061, 0.10021162499999914, 0.10021075000000046, 0.10021372299999953]</msg>
<status status="PASS" starttime="20201103 12:26:02.446" endtime="20201103 12:26:02.450"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.436" endtime="20201103 12:26:02.451"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.458" endtime="20201103 12:26:02.460"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:02.466" endtime="20201103 12:26:02.487"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.462" endtime="20201103 12:26:02.489"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.453" endtime="20201103 12:26:02.491"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.790" endtime="20201103 12:26:02.491"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:54.662" endtime="20201103 12:26:02.493" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:02.509" endtime="20201103 12:26:02.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.506" endtime="20201103 12:26:02.532"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.567" endtime="20201103 12:26:02.585"></status>
</kw>
<msg timestamp="20201103 12:26:02.586" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.564" endtime="20201103 12:26:02.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.592" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.588" endtime="20201103 12:26:02.593"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.598" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:02.594" endtime="20201103 12:26:02.599"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:02.557" endtime="20201103 12:26:02.601"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:02.548" endtime="20201103 12:26:02.602"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.546" endtime="20201103 12:26:02.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:02.611" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:02.609" endtime="20201103 12:26:02.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.605" endtime="20201103 12:26:02.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.544" endtime="20201103 12:26:02.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.542" endtime="20201103 12:26:02.613"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.614" endtime="20201103 12:26:02.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.538" endtime="20201103 12:26:02.619"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.534" endtime="20201103 12:26:02.621"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.503" endtime="20201103 12:26:02.621"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.642" endtime="20201103 12:26:09.682"></status>
</kw>
<msg timestamp="20201103 12:26:09.683" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.639" endtime="20201103 12:26:09.683"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.689" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:09.685" endtime="20201103 12:26:09.690"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.691" endtime="20201103 12:26:09.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.632" endtime="20201103 12:26:09.697"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.627" endtime="20201103 12:26:09.698"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:09.703" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:26:09.700" endtime="20201103 12:26:09.704"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.713" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:09.711" endtime="20201103 12:26:09.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.718" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:09.716" endtime="20201103 12:26:09.718"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.705" endtime="20201103 12:26:09.720"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.729" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:09.727" endtime="20201103 12:26:09.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.735" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:09.732" endtime="20201103 12:26:09.735"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.721" endtime="20201103 12:26:09.737"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.746" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:09.744" endtime="20201103 12:26:09.747"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.751" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:26:09.749" endtime="20201103 12:26:09.751"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.738" endtime="20201103 12:26:09.753"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.771" endtime="20201103 12:26:10.131"></status>
</kw>
<msg timestamp="20201103 12:26:10.138" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126385986, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226611222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:09.768" endtime="20201103 12:26:10.139"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.156" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126385986, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226611222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:10.141" endtime="20201103 12:26:10.157"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.158" endtime="20201103 12:26:10.162"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.761" endtime="20201103 12:26:10.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.754" endtime="20201103 12:26:10.165"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:10.175" level="INFO">${FILTERED} = [{'time': 1.226611222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100225236, 'source_diff': 0.100225236}, {'time': 1.326824778, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100212833999999...</msg>
<status status="PASS" starttime="20201103 12:26:10.167" endtime="20201103 12:26:10.175"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:10.204" level="INFO">${RESULT} = {'diff': [0.100225236, 0.10021283399999992, 0.10021765299999985, 0.10021744399999988, 0.10022315299999995, 0.100216305, 0.10022508400000008, 0.10023980499999996, 0.10022769500000006, 0.100223818999999...</msg>
<status status="PASS" starttime="20201103 12:26:10.177" endtime="20201103 12:26:10.205"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.214" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:10.212" endtime="20201103 12:26:10.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.219" level="INFO">VALUE: [0.100225236, 0.10021283399999992, 0.10021765299999985, 0.10021744399999988, 0.10022315299999995, 0.100216305, 0.10022508400000008, 0.10023980499999996, 0.10022769500000006, 0.10022381899999999, 0.10022254200000003, 0.10022015299999998, 0.10023583300000016, 0.10023754099999982, 0.10023912499999987, 0.10023490300000004, 0.10022795800000006, 0.10022699999999984, 0.10022473700000001, 0.10023229199999983, 0.1002293609999998, 0.10022437500000025, 0.10022822300000023, 0.10023406899999987, 0.10023207000000012, 0.10022425000000013, 0.10023502799999973, 0.10023688900000005, 0.10021579200000019, 0.10021397199999971, 0.10021748600000002, 0.10023762500000011, 0.10022186099999963, 0.10022622199999986, 0.10022399999999987, 0.10021355599999993, 0.10020951400000033, 0.10023102699999953, 0.10022461200000077, 0.100210723, 0.10020681899999939, 0.10023818099999993, 0.10021847199999989, 0.10021637500000047, 0.100215736, 0.1002100979999998, 0.10019538900000047, 0.10020813900000025, 0.10020972299999986, 0.10021836100000048]</msg>
<status status="PASS" starttime="20201103 12:26:10.217" endtime="20201103 12:26:10.220"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.206" endtime="20201103 12:26:10.222"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.228" endtime="20201103 12:26:10.231"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:10.236" endtime="20201103 12:26:10.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.232" endtime="20201103 12:26:10.260"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.224" endtime="20201103 12:26:10.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.623" endtime="20201103 12:26:10.262"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:02.497" endtime="20201103 12:26:10.263" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:10.280" endtime="20201103 12:26:10.302"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.277" endtime="20201103 12:26:10.304"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.338" endtime="20201103 12:26:10.355"></status>
</kw>
<msg timestamp="20201103 12:26:10.356" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.335" endtime="20201103 12:26:10.357"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.363" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.358" endtime="20201103 12:26:10.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.369" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:10.365" endtime="20201103 12:26:10.370"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:10.327" endtime="20201103 12:26:10.371"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:10.320" endtime="20201103 12:26:10.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.317" endtime="20201103 12:26:10.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:10.381" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:10.380" endtime="20201103 12:26:10.382"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.376" endtime="20201103 12:26:10.383"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.315" endtime="20201103 12:26:10.383"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.314" endtime="20201103 12:26:10.383"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.385" endtime="20201103 12:26:10.388"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.310" endtime="20201103 12:26:10.390"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.305" endtime="20201103 12:26:10.391"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.273" endtime="20201103 12:26:10.392"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.413" endtime="20201103 12:26:17.449"></status>
</kw>
<msg timestamp="20201103 12:26:17.450" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.409" endtime="20201103 12:26:17.451"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.457" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:17.452" endtime="20201103 12:26:17.457"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.459" endtime="20201103 12:26:17.463"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.402" endtime="20201103 12:26:17.464"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.397" endtime="20201103 12:26:17.466"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:17.471" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:26:17.467" endtime="20201103 12:26:17.472"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.482" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:17.479" endtime="20201103 12:26:17.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.487" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:17.485" endtime="20201103 12:26:17.487"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.473" endtime="20201103 12:26:17.489"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.498" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:17.496" endtime="20201103 12:26:17.499"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.503" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:17.501" endtime="20201103 12:26:17.504"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.490" endtime="20201103 12:26:17.505"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.514" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:17.512" endtime="20201103 12:26:17.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.519" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:26:17.517" endtime="20201103 12:26:17.520"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.506" endtime="20201103 12:26:17.521"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.540" endtime="20201103 12:26:17.887"></status>
</kw>
<msg timestamp="20201103 12:26:17.895" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125763236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.225982486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:17.536" endtime="20201103 12:26:17.895"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.913" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125763236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.225982486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:17.897" endtime="20201103 12:26:17.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.916" endtime="20201103 12:26:17.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.527" endtime="20201103 12:26:17.921"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.522" endtime="20201103 12:26:17.923"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:17.933" level="INFO">${FILTERED} = [{'time': 1.225982486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10021924999999987, 'source_diff': 0.10021924999999987}, {'time': 1.326193639, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:17.924" endtime="20201103 12:26:17.933"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:17.963" level="INFO">${RESULT} = {'diff': [0.10021924999999987, 0.100210417, 0.10019862499999999, 0.10020455500000014, 0.10022965299999997, 0.1002151389999999, 0.1002170280000001, 0.10021841600000014, 0.10022711099999992, 0.100222666...</msg>
<status status="PASS" starttime="20201103 12:26:17.935" endtime="20201103 12:26:17.964"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.973" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:17.971" endtime="20201103 12:26:17.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.978" level="INFO">VALUE: [0.10021924999999987, 0.100210417, 0.10019862499999999, 0.10020455500000014, 0.10022965299999997, 0.1002151389999999, 0.1002170280000001, 0.10021841600000014, 0.10022711099999992, 0.10022266699999971, 0.10021569399999963, 0.10021122199999999, 0.10021202799999962, 0.10021669499999986, 0.10021875000000025, 0.10020619400000008, 0.10022458400000023, 0.1002326250000003, 0.10022873600000004, 0.10022125000000015, 0.100225236, 0.10022923600000011, 0.10021873599999997, 0.10021744399999966, 0.1002066669999997, 0.10020683299999966, 0.100209875, 0.10021576300000001, 0.10021480500000024, 0.10022126399999998, 0.10021819500000007, 0.10022463899999945, 0.10020984699999946, 0.10021594400000033, 0.10021337500000005, 0.1002124310000001, 0.10021500000000039, 0.10022304200000054, 0.10020936100000011, 0.10021688900000036, 0.10021615299999986, 0.1002220549999997, 0.10022265300000033, 0.10021844499999943, 0.10021856899999992, 0.10023231899999985, 0.10020887499999986, 0.10022655499999988, 0.10022320900000015, 0.10022119399999951]</msg>
<status status="PASS" starttime="20201103 12:26:17.975" endtime="20201103 12:26:17.979"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.965" endtime="20201103 12:26:17.981"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.987" endtime="20201103 12:26:17.997"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:18.003" endtime="20201103 12:26:18.026"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.998" endtime="20201103 12:26:18.027"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.982" endtime="20201103 12:26:18.029"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.393" endtime="20201103 12:26:18.030"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:10.268" endtime="20201103 12:26:18.031" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:18.048" endtime="20201103 12:26:18.070"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.044" endtime="20201103 12:26:18.072"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.109" endtime="20201103 12:26:18.129"></status>
</kw>
<msg timestamp="20201103 12:26:18.131" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:18.106" endtime="20201103 12:26:18.131"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.137" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:18.133" endtime="20201103 12:26:18.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.144" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:18.140" endtime="20201103 12:26:18.145"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:18.095" endtime="20201103 12:26:18.147"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:18.088" endtime="20201103 12:26:18.148"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.085" endtime="20201103 12:26:18.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:18.157" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:18.156" endtime="20201103 12:26:18.158"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.151" endtime="20201103 12:26:18.158"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.084" endtime="20201103 12:26:18.159"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.082" endtime="20201103 12:26:18.159"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.161" endtime="20201103 12:26:18.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.078" endtime="20201103 12:26:18.166"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.073" endtime="20201103 12:26:18.167"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.041" endtime="20201103 12:26:18.168"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.189" endtime="20201103 12:26:25.230"></status>
</kw>
<msg timestamp="20201103 12:26:25.232" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:18.186" endtime="20201103 12:26:25.232"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.238" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:25.234" endtime="20201103 12:26:25.239"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.240" endtime="20201103 12:26:25.245"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.179" endtime="20201103 12:26:25.247"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.173" endtime="20201103 12:26:25.248"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:25.254" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:26:25.250" endtime="20201103 12:26:25.254"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.264" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:25.262" endtime="20201103 12:26:25.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.269" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:25.266" endtime="20201103 12:26:25.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.256" endtime="20201103 12:26:25.271"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.281" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:25.279" endtime="20201103 12:26:25.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.285" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:25.283" endtime="20201103 12:26:25.286"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.272" endtime="20201103 12:26:25.288"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.297" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:25.295" endtime="20201103 12:26:25.298"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.302" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:26:25.300" endtime="20201103 12:26:25.303"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.289" endtime="20201103 12:26:25.304"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.321" endtime="20201103 12:26:25.686"></status>
</kw>
<msg timestamp="20201103 12:26:25.693" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13481875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.235046028, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:26:25.318" endtime="20201103 12:26:25.693"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.711" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13481875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.235046028, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:26:25.695" endtime="20201103 12:26:25.712"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.713" endtime="20201103 12:26:25.717"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.310" endtime="20201103 12:26:25.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.305" endtime="20201103 12:26:25.720"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:25.731" level="INFO">${FILTERED} = [{'time': 1.235046028, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10022727799999998, 'source_diff': 0.10022727799999998}, {'time': 1.335273736, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:25.722" endtime="20201103 12:26:25.731"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:25.761" level="INFO">${RESULT} = {'diff': [0.10022727799999998, 0.10022695799999992, 0.10022483400000004, 0.10022812500000011, 0.10022387499999996, 0.10022213899999999, 0.10022823599999997, 0.10022555499999997, 0.10022279099999998, 0...</msg>
<status status="PASS" starttime="20201103 12:26:25.733" endtime="20201103 12:26:25.761"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.771" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:25.769" endtime="20201103 12:26:25.772"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.777" level="INFO">VALUE: [0.10022727799999998, 0.10022695799999992, 0.10022483400000004, 0.10022812500000011, 0.10022387499999996, 0.10022213899999999, 0.10022823599999997, 0.10022555499999997, 0.10022279099999998, 0.1002312230000002, 0.100226347, 0.10022874999999987, 0.10021926400000014, 0.10021466600000029, 0.10021698599999995, 0.10022184700000025, 0.10022538900000022, 0.10022752800000001, 0.10022231899999978, 0.10023208399999994, 0.10022834700000027, 0.10022555500000019, 0.10022408300000007, 0.10022069399999989, 0.1002168750000001, 0.10021838900000013, 0.10020318099999992, 0.10019247199999981, 0.10019254200000027, 0.10020440300000022, 0.10020769499999993, 0.10019963799999942, 0.10020201399999973, 0.10020744499999967, 0.1002209719999998, 0.10021783299999942, 0.10022111099999975, 0.10022712499999997, 0.10023300000000024, 0.1002331949999995, 0.10022808300000019, 0.10023829200000023, 0.10021908299999982, 0.10021680599999971, 0.10021377799999964, 0.10021769399999947, 0.10022215299999981, 0.10021184699999974, 0.10019691699999989, 0.10020556899999988]</msg>
<status status="PASS" starttime="20201103 12:26:25.774" endtime="20201103 12:26:25.778"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.763" endtime="20201103 12:26:25.780"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.786" endtime="20201103 12:26:25.789"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:25.795" endtime="20201103 12:26:25.817"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.790" endtime="20201103 12:26:25.818"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.782" endtime="20201103 12:26:25.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.169" endtime="20201103 12:26:25.821"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:18.036" endtime="20201103 12:26:25.822" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:25.839" endtime="20201103 12:26:25.861"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.836" endtime="20201103 12:26:25.863"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.897" endtime="20201103 12:26:25.917"></status>
</kw>
<msg timestamp="20201103 12:26:25.918" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:25.893" endtime="20201103 12:26:25.918"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.924" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:25.920" endtime="20201103 12:26:25.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.931" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:25.927" endtime="20201103 12:26:25.931"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:25.886" endtime="20201103 12:26:25.933"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:25.880" endtime="20201103 12:26:25.935"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.877" endtime="20201103 12:26:25.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:25.944" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:25.942" endtime="20201103 12:26:25.945"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.938" endtime="20201103 12:26:25.945"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.875" endtime="20201103 12:26:25.945"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.873" endtime="20201103 12:26:25.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.947" endtime="20201103 12:26:25.951"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.869" endtime="20201103 12:26:25.952"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.864" endtime="20201103 12:26:25.954"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.833" endtime="20201103 12:26:25.954"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.975" endtime="20201103 12:26:33.012"></status>
</kw>
<msg timestamp="20201103 12:26:33.014" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:25.972" endtime="20201103 12:26:33.014"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.020" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:33.016" endtime="20201103 12:26:33.021"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.023" endtime="20201103 12:26:33.027"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.965" endtime="20201103 12:26:33.028"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.960" endtime="20201103 12:26:33.030"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:33.035" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:26:33.031" endtime="20201103 12:26:33.036"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.045" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:33.043" endtime="20201103 12:26:33.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.050" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:33.047" endtime="20201103 12:26:33.050"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.037" endtime="20201103 12:26:33.052"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.061" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:33.059" endtime="20201103 12:26:33.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.066" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:33.063" endtime="20201103 12:26:33.066"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.053" endtime="20201103 12:26:33.068"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.077" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:33.075" endtime="20201103 12:26:33.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.082" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:26:33.080" endtime="20201103 12:26:33.082"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.069" endtime="20201103 12:26:33.084"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.101" endtime="20201103 12:26:33.448"></status>
</kw>
<msg timestamp="20201103 12:26:33.455" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129528611, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229742042, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:33.097" endtime="20201103 12:26:33.455"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.472" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129528611, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229742042, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:33.457" endtime="20201103 12:26:33.473"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.475" endtime="20201103 12:26:33.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.090" endtime="20201103 12:26:33.480"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.085" endtime="20201103 12:26:33.481"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:33.491" level="INFO">${FILTERED} = [{'time': 1.229742042, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10021343100000002, 'source_diff': 0.10021343100000002}, {'time': 1.329956028, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:33.483" endtime="20201103 12:26:33.492"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:33.523" level="INFO">${RESULT} = {'diff': [0.10021343100000002, 0.10021324999999992, 0.1002217780000001, 0.10023019399999988, 0.10023288899999994, 0.10022005599999995, 0.10021984699999997, 0.10022184699999981, 0.10022456999999996, 0....</msg>
<status status="PASS" starttime="20201103 12:26:33.493" endtime="20201103 12:26:33.524"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.537" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:33.534" endtime="20201103 12:26:33.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.545" level="INFO">VALUE: [0.10021343100000002, 0.10021324999999992, 0.1002217780000001, 0.10023019399999988, 0.10023288899999994, 0.10022005599999995, 0.10021984699999997, 0.10022184699999981, 0.10022456999999996, 0.10020134700000005, 0.10021355599999993, 0.10022194500000037, 0.10022359699999983, 0.10022520800000034, 0.10022620899999968, 0.10022302699999974, 0.10022924999999994, 0.10022257000000012, 0.1002257219999998, 0.10022479200000012, 0.10021809699999995, 0.10022757000000038, 0.1002272500000001, 0.1002187499999998, 0.10022386099999991, 0.10022673700000029, 0.10024405600000019, 0.10022909700000016, 0.10024145800000017, 0.10022850000000005, 0.10021906900000044, 0.10021722200000038, 0.10021713899999973, 0.10022680499999925, 0.10022123599999944, 0.10022483400000048, 0.10022638900000036, 0.10022980500000056, 0.10022969400000026, 0.10022570799999997, 0.10022845899999933, 0.10023254099999956, 0.10022324999999999, 0.10023291699999959, 0.1002342220000001, 0.100215167, 0.10021252799999925, 0.10022013900000015, 0.10021407000000071, 0.10022075000000008]</msg>
<status status="PASS" starttime="20201103 12:26:33.541" endtime="20201103 12:26:33.546"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.526" endtime="20201103 12:26:33.549"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.557" endtime="20201103 12:26:33.562"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:33.569" endtime="20201103 12:26:33.591"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.564" endtime="20201103 12:26:33.593"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.551" endtime="20201103 12:26:33.595"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.956" endtime="20201103 12:26:33.595"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:25.827" endtime="20201103 12:26:33.597" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:33.613" endtime="20201103 12:26:33.635"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.610" endtime="20201103 12:26:33.637"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.672" endtime="20201103 12:26:33.687"></status>
</kw>
<msg timestamp="20201103 12:26:33.689" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:33.667" endtime="20201103 12:26:33.689"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.695" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:33.691" endtime="20201103 12:26:33.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:33.702" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:33.697" endtime="20201103 12:26:33.702"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:33.659" endtime="20201103 12:26:33.704"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:33.653" endtime="20201103 12:26:33.706"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.650" endtime="20201103 12:26:33.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:33.714" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:33.713" endtime="20201103 12:26:33.715"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.708" endtime="20201103 12:26:33.715"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.649" endtime="20201103 12:26:33.716"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.647" endtime="20201103 12:26:33.716"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.718" endtime="20201103 12:26:33.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.643" endtime="20201103 12:26:33.723"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.638" endtime="20201103 12:26:33.724"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.607" endtime="20201103 12:26:33.725"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:33.747" endtime="20201103 12:26:40.786"></status>
</kw>
<msg timestamp="20201103 12:26:40.788" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:33.743" endtime="20201103 12:26:40.789"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.796" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:40.791" endtime="20201103 12:26:40.797"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:40.799" endtime="20201103 12:26:40.804"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.735" endtime="20201103 12:26:40.807"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.730" endtime="20201103 12:26:40.809"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:40.816" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:26:40.811" endtime="20201103 12:26:40.817"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.829" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:40.826" endtime="20201103 12:26:40.830"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.835" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:40.832" endtime="20201103 12:26:40.836"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:40.818" endtime="20201103 12:26:40.838"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.850" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:40.847" endtime="20201103 12:26:40.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.856" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:40.853" endtime="20201103 12:26:40.857"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:40.839" endtime="20201103 12:26:40.859"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.871" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:40.868" endtime="20201103 12:26:40.873"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:40.878" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:26:40.875" endtime="20201103 12:26:40.879"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:40.861" endtime="20201103 12:26:40.882"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:40.904" endtime="20201103 12:26:41.258"></status>
</kw>
<msg timestamp="20201103 12:26:41.265" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126982417, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227200181, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:40.900" endtime="20201103 12:26:41.266"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:41.283" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126982417, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227200181, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:41.268" endtime="20201103 12:26:41.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:41.285" endtime="20201103 12:26:41.289"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:40.890" endtime="20201103 12:26:41.291"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:40.883" endtime="20201103 12:26:41.292"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:41.302" level="INFO">${FILTERED} = [{'time': 1.227200181, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10021776399999993, 'source_diff': 0.10021776399999993}, {'time': 1.327421569, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:41.294" endtime="20201103 12:26:41.303"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:41.332" level="INFO">${RESULT} = {'diff': [0.10021776399999993, 0.10022063799999992, 0.10021201299999993, 0.10021812500000005, 0.10021586100000013, 0.10021286100000015, 0.10020157000000007, 0.10020427700000001, 0.10019418000000013, 0...</msg>
<status status="PASS" starttime="20201103 12:26:41.305" endtime="20201103 12:26:41.333"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:41.342" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:41.340" endtime="20201103 12:26:41.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:41.348" level="INFO">VALUE: [0.10021776399999993, 0.10022063799999992, 0.10021201299999993, 0.10021812500000005, 0.10021586100000013, 0.10021286100000015, 0.10020157000000007, 0.10020427700000001, 0.10019418000000013, 0.10018325000000017, 0.10019247200000025, 0.10020886100000004, 0.10019880599999986, 0.10021563899999997, 0.10020790200000018, 0.10021981999999996, 0.10020715199999986, 0.1002005829999999, 0.10020511100000018, 0.10020530599999988, 0.10020861099999978, 0.10020448599999998, 0.10021223599999995, 0.10020426400000026, 0.10020434799999967, 0.10019411099999997, 0.10019462499999987, 0.10020627799999993, 0.10020633400000012, 0.10021195800000005, 0.1002198329999997, 0.10021711100000008, 0.10021144500000023, 0.10021236099999964, 0.10021995799999939, 0.1002223889999998, 0.10021891699999941, 0.1002173329999998, 0.10022031899999995, 0.10020950000000006, 0.1002144300000003, 0.10021404200000017, 0.10021065299999954, 0.10022275000000036, 0.10020629100000011, 0.10021713800000054, 0.10021115199999997, 0.10020744399999959, 0.10020929200000062, 0.10020323599999958]</msg>
<status status="PASS" starttime="20201103 12:26:41.345" endtime="20201103 12:26:41.349"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:41.334" endtime="20201103 12:26:41.350"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:41.356" endtime="20201103 12:26:41.359"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:41.365" endtime="20201103 12:26:41.387"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:41.360" endtime="20201103 12:26:41.388"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:41.352" endtime="20201103 12:26:41.390"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:33.726" endtime="20201103 12:26:41.390"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:33.601" endtime="20201103 12:26:41.392" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:52.034" endtime="20201103 12:26:41.410"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">samr21-xpro</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:48.005" endtime="20201103 12:26:41.473"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_samr21-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
