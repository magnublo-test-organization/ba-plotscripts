<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201103 12:24:36.778" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:38.104" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:38.120" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:40.204" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:38.100" endtime="20201103 12:24:40.206"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.211" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:24:40.208" endtime="20201103 12:24:40.212"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:38.097" endtime="20201103 12:24:40.214"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:40.218" endtime="20201103 12:24:40.548"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.215" endtime="20201103 12:24:40.550"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.580" endtime="20201103 12:24:40.598"></status>
</kw>
<msg timestamp="20201103 12:24:40.599" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.577" endtime="20201103 12:24:40.599"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.605" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.601" endtime="20201103 12:24:40.606"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.618" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:40.607" endtime="20201103 12:24:40.619"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.570" endtime="20201103 12:24:40.624"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.565" endtime="20201103 12:24:40.629"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.562" endtime="20201103 12:24:40.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:40.638" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:40.637" endtime="20201103 12:24:40.639"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.631" endtime="20201103 12:24:40.643"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.560" endtime="20201103 12:24:40.645"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.558" endtime="20201103 12:24:40.646"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.648" endtime="20201103 12:24:40.651"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.555" endtime="20201103 12:24:40.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.660" endtime="20201103 12:24:40.665"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.551" endtime="20201103 12:24:40.666"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:38.094" endtime="20201103 12:24:40.667"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:40.684" endtime="20201103 12:24:40.706"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.680" endtime="20201103 12:24:40.708"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.742" endtime="20201103 12:24:40.758"></status>
</kw>
<msg timestamp="20201103 12:24:40.759" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.739" endtime="20201103 12:24:40.760"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.766" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.761" endtime="20201103 12:24:40.766"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.772" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:40.768" endtime="20201103 12:24:40.773"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.732" endtime="20201103 12:24:40.775"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.725" endtime="20201103 12:24:40.776"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.721" endtime="20201103 12:24:40.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:40.785" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:40.784" endtime="20201103 12:24:40.786"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.779" endtime="20201103 12:24:40.786"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.719" endtime="20201103 12:24:40.787"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.718" endtime="20201103 12:24:40.787"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.789" endtime="20201103 12:24:40.792"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.714" endtime="20201103 12:24:40.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.709" endtime="20201103 12:24:40.795"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.677" endtime="20201103 12:24:40.796"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.813" endtime="20201103 12:24:40.823"></status>
</kw>
<msg timestamp="20201103 12:24:40.824" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.809" endtime="20201103 12:24:40.825"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.830" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.826" endtime="20201103 12:24:40.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.832" endtime="20201103 12:24:40.838"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.802" endtime="20201103 12:24:40.839"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.797" endtime="20201103 12:24:40.841"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.851" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:24:40.848" endtime="20201103 12:24:40.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.855" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:24:40.853" endtime="20201103 12:24:40.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.842" endtime="20201103 12:24:40.857"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:40.668" endtime="20201103 12:24:40.859" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:37.072" endtime="20201103 12:24:40.866"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.994" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:41.009" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:43.045" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:40.990" endtime="20201103 12:24:43.046"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:43.052" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:24:43.049" endtime="20201103 12:24:43.052"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.987" endtime="20201103 12:24:43.054"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:43.058" endtime="20201103 12:24:43.391"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.056" endtime="20201103 12:24:43.393"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:43.423" endtime="20201103 12:24:43.444"></status>
</kw>
<msg timestamp="20201103 12:24:43.446" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:43.420" endtime="20201103 12:24:43.446"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:43.455" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:43.449" endtime="20201103 12:24:43.456"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:43.464" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:43.458" endtime="20201103 12:24:43.465"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:43.413" endtime="20201103 12:24:43.467"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:43.408" endtime="20201103 12:24:43.470"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.405" endtime="20201103 12:24:43.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:43.481" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:43.479" endtime="20201103 12:24:43.482"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.473" endtime="20201103 12:24:43.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.403" endtime="20201103 12:24:43.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.401" endtime="20201103 12:24:43.485"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:43.486" endtime="20201103 12:24:43.490"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.398" endtime="20201103 12:24:43.491"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:43.493" endtime="20201103 12:24:43.497"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.395" endtime="20201103 12:24:43.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.984" endtime="20201103 12:24:43.499"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:43.513" endtime="20201103 12:24:43.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.509" endtime="20201103 12:24:43.536"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:43.569" endtime="20201103 12:24:43.584"></status>
</kw>
<msg timestamp="20201103 12:24:43.585" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:43.566" endtime="20201103 12:24:43.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:43.593" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:43.588" endtime="20201103 12:24:43.593"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:43.599" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:43.595" endtime="20201103 12:24:43.600"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:43.558" endtime="20201103 12:24:43.602"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:43.552" endtime="20201103 12:24:43.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.549" endtime="20201103 12:24:43.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:43.612" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:43.610" endtime="20201103 12:24:43.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.606" endtime="20201103 12:24:43.613"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.547" endtime="20201103 12:24:43.613"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.546" endtime="20201103 12:24:43.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:43.615" endtime="20201103 12:24:43.619"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.542" endtime="20201103 12:24:43.620"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.537" endtime="20201103 12:24:43.622"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.506" endtime="20201103 12:24:43.622"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:43.705" endtime="20201103 12:24:50.741"></status>
</kw>
<msg timestamp="20201103 12:24:50.743" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:43.641" endtime="20201103 12:24:50.743"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.749" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:50.745" endtime="20201103 12:24:50.750"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.751" endtime="20201103 12:24:50.755"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.633" endtime="20201103 12:24:50.757"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.628" endtime="20201103 12:24:50.758"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:50.764" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:24:50.760" endtime="20201103 12:24:50.764"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.774" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:50.771" endtime="20201103 12:24:50.775"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.778" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:50.776" endtime="20201103 12:24:50.779"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.765" endtime="20201103 12:24:50.781"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.790" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:50.788" endtime="20201103 12:24:50.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.795" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:50.793" endtime="20201103 12:24:50.796"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.782" endtime="20201103 12:24:50.797"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.807" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:50.804" endtime="20201103 12:24:50.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.812" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:24:50.809" endtime="20201103 12:24:50.813"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.798" endtime="20201103 12:24:50.814"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.831" endtime="20201103 12:24:51.187"></status>
</kw>
<msg timestamp="20201103 12:24:51.194" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.185686278, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.285895889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:50.827" endtime="20201103 12:24:51.194"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:51.212" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.185686278, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.285895889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:51.196" endtime="20201103 12:24:51.213"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:51.214" endtime="20201103 12:24:51.218"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.820" endtime="20201103 12:24:51.220"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.816" endtime="20201103 12:24:51.221"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:51.231" level="INFO">${FILTERED} = [{'time': 1.285895889, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10020961100000014, 'source_diff': 0.10020961100000014}, {'time': 1.386114306, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:24:51.223" endtime="20201103 12:24:51.232"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:51.263" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:24:51.234" endtime="20201103 12:24:51.264"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:51.275" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:51.272" endtime="20201103 12:24:51.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:51.281" level="INFO">VALUE: [0.10020961100000014, 0.10021762499999998, 0.10020873600000013, 0.10020102800000008, 0.10020161099999991, 0.10020317999999984, 0.1002133890000001, 0.10021894500000017, 0.1002134170000002, 0.1002225280000002, 0.10021658299999991, 0.10021697200000013, 0.10022013899999971, 0.10022479199999967, 0.10022341700000004, 0.10021370800000007, 0.10020568099999982, 0.1002037640000002, 0.10021009699999972, 0.10022083399999993, 0.10022379199999998, 0.10021336100000022, 0.1002173609999999, 0.10020904199999991, 0.10020949999999962, 0.10020701399999998, 0.10021213899999992, 0.10021163899999985, 0.1002138889999995, 0.10021112499999951, 0.10020433300000064, 0.10019995800000014, 0.10019752799999981, 0.10021173600000033, 0.10022300000000062, 0.10021844400000024, 0.10021416699999985, 0.10022097299999988, 0.10022548600000025, 0.10022794400000024, 0.10021979199999986, 0.10021756899999978, 0.1001995839999994, 0.10020275000000023, 0.10022013900000015, 0.10021376300000018, 0.10021729199999996, 0.10021330499999959, 0.10021638900000074, 0.10021826399999956]</msg>
<status status="PASS" starttime="20201103 12:24:51.278" endtime="20201103 12:24:51.282"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.265" endtime="20201103 12:24:51.284"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:51.292" endtime="20201103 12:24:51.295"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:51.301" endtime="20201103 12:24:51.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.297" endtime="20201103 12:24:51.325"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.287" endtime="20201103 12:24:51.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:43.624" endtime="20201103 12:24:51.327"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:43.500" endtime="20201103 12:24:51.328" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:51.345" endtime="20201103 12:24:51.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.341" endtime="20201103 12:24:51.369"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:51.404" endtime="20201103 12:24:51.420"></status>
</kw>
<msg timestamp="20201103 12:24:51.421" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:51.401" endtime="20201103 12:24:51.421"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:51.427" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:51.423" endtime="20201103 12:24:51.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:51.434" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:51.430" endtime="20201103 12:24:51.435"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:51.393" endtime="20201103 12:24:51.436"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:51.385" endtime="20201103 12:24:51.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.382" endtime="20201103 12:24:51.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:51.447" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:51.445" endtime="20201103 12:24:51.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.441" endtime="20201103 12:24:51.448"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.380" endtime="20201103 12:24:51.448"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.379" endtime="20201103 12:24:51.449"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:51.450" endtime="20201103 12:24:51.454"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.375" endtime="20201103 12:24:51.456"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.370" endtime="20201103 12:24:51.457"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.339" endtime="20201103 12:24:51.458"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:51.479" endtime="20201103 12:24:58.516"></status>
</kw>
<msg timestamp="20201103 12:24:58.517" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:51.476" endtime="20201103 12:24:58.517"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.525" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:58.519" endtime="20201103 12:24:58.526"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.529" endtime="20201103 12:24:58.533"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.468" endtime="20201103 12:24:58.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.463" endtime="20201103 12:24:58.537"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:58.543" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:24:58.538" endtime="20201103 12:24:58.544"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.561" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:58.555" endtime="20201103 12:24:58.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.568" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:58.565" endtime="20201103 12:24:58.569"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.545" endtime="20201103 12:24:58.571"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.584" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:58.580" endtime="20201103 12:24:58.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.590" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:58.587" endtime="20201103 12:24:58.592"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.572" endtime="20201103 12:24:58.594"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.604" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:58.602" endtime="20201103 12:24:58.605"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.609" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:24:58.606" endtime="20201103 12:24:58.609"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.595" endtime="20201103 12:24:58.611"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.629" endtime="20201103 12:24:59.019"></status>
</kw>
<msg timestamp="20201103 12:24:59.026" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127091361, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227320097, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:58.626" endtime="20201103 12:24:59.026"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.044" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127091361, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227320097, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:59.028" endtime="20201103 12:24:59.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.046" endtime="20201103 12:24:59.050"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.619" endtime="20201103 12:24:59.052"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.612" endtime="20201103 12:24:59.053"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:59.064" level="INFO">${FILTERED} = [{'time': 1.227320097, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10022873600000004, 'source_diff': 0.10022873600000004}, {'time': 1.327551847, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:24:59.055" endtime="20201103 12:24:59.064"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:59.094" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:24:59.066" endtime="20201103 12:24:59.094"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.104" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:59.101" endtime="20201103 12:24:59.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.109" level="INFO">VALUE: [0.10022873600000004, 0.10023098600000013, 0.100239666, 0.10023906999999999, 0.10023437499999988, 0.1002326389999999, 0.10023029099999992, 0.10023744400000001, 0.10024477799999976, 0.10022908299999989, 0.10023315299999958, 0.10024045899999967, 0.10022973600000018, 0.10021655499999982, 0.10021649999999971, 0.10021884800000036, 0.10022927699999995, 0.10022375000000006, 0.10021081899999995, 0.1002266810000001, 0.10022959699999978, 0.10023576400000023, 0.10024336099999998, 0.10023479199999974, 0.10022337499999967, 0.10022990299999979, 0.10022427799999978, 0.10022375000000006, 0.10021719399999984, 0.10021840299999951, 0.10022815199999968, 0.10023777800000033, 0.1002336529999992, 0.10022548599999936, 0.10022091600000049, 0.10022827799999945, 0.10023143100000009, 0.10022291599999988, 0.10022545900000068, 0.10021251399999986, 0.10021622200000024, 0.10021309700000014, 0.10019920800000026, 0.10021762499999998, 0.10022277699999993, 0.10022429200000005, 0.10020461100000055, 0.1002048750000002, 0.10021236099999964, 0.10019911200000031]</msg>
<status status="PASS" starttime="20201103 12:24:59.106" endtime="20201103 12:24:59.110"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.095" endtime="20201103 12:24:59.112"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.118" endtime="20201103 12:24:59.121"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:59.126" endtime="20201103 12:24:59.148"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.122" endtime="20201103 12:24:59.150"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.113" endtime="20201103 12:24:59.152"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:51.459" endtime="20201103 12:24:59.152"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:51.333" endtime="20201103 12:24:59.154" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:59.171" endtime="20201103 12:24:59.193"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.168" endtime="20201103 12:24:59.195"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.230" endtime="20201103 12:24:59.249"></status>
</kw>
<msg timestamp="20201103 12:24:59.250" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:59.227" endtime="20201103 12:24:59.251"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.258" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:59.253" endtime="20201103 12:24:59.258"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:59.264" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:59.260" endtime="20201103 12:24:59.265"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:59.219" endtime="20201103 12:24:59.267"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:59.211" endtime="20201103 12:24:59.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.209" endtime="20201103 12:24:59.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:59.278" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:59.277" endtime="20201103 12:24:59.279"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.272" endtime="20201103 12:24:59.280"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.207" endtime="20201103 12:24:59.280"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.205" endtime="20201103 12:24:59.280"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.282" endtime="20201103 12:24:59.286"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.201" endtime="20201103 12:24:59.287"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.197" endtime="20201103 12:24:59.289"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.164" endtime="20201103 12:24:59.289"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:59.311" endtime="20201103 12:25:06.354"></status>
</kw>
<msg timestamp="20201103 12:25:06.355" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:59.308" endtime="20201103 12:25:06.356"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.361" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.357" endtime="20201103 12:25:06.362"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.364" endtime="20201103 12:25:06.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.300" endtime="20201103 12:25:06.369"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.295" endtime="20201103 12:25:06.371"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:06.376" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:25:06.372" endtime="20201103 12:25:06.377"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.388" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:06.384" endtime="20201103 12:25:06.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.392" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:06.390" endtime="20201103 12:25:06.394"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.378" endtime="20201103 12:25:06.396"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.405" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:06.403" endtime="20201103 12:25:06.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.410" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:06.408" endtime="20201103 12:25:06.410"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.397" endtime="20201103 12:25:06.412"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.422" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:06.419" endtime="20201103 12:25:06.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.426" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:25:06.424" endtime="20201103 12:25:06.427"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.413" endtime="20201103 12:25:06.429"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.448" endtime="20201103 12:25:06.807"></status>
</kw>
<msg timestamp="20201103 12:25:06.814" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133245764, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233462875, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:06.444" endtime="20201103 12:25:06.814"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.832" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133245764, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233462875, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:06.816" endtime="20201103 12:25:06.833"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.835" endtime="20201103 12:25:06.838"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.435" endtime="20201103 12:25:06.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.430" endtime="20201103 12:25:06.841"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:06.852" level="INFO">${FILTERED} = [{'time': 1.233462875, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10021711100000008, 'source_diff': 0.10021711100000008}, {'time': 1.333680056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:06.843" endtime="20201103 12:25:06.852"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:06.882" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:06.854" endtime="20201103 12:25:06.882"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.892" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:06.890" endtime="20201103 12:25:06.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.897" level="INFO">VALUE: [0.10021711100000008, 0.10021636199999984, 0.10020773599999999, 0.10021945799999998, 0.10023023600000003, 0.1002237640000001, 0.10023293100000008, 0.10022122199999983, 0.10020723600000014, 0.10021936100000017, 0.10021029199999987, 0.10021691599999993, 0.10022513899999996, 0.10021716599999975, 0.100220486, 0.10021863899999994, 0.10022202799999969, 0.10020150000000028, 0.10020062500000027, 0.10022458300000014, 0.10021908300000026, 0.10021623600000007, 0.10021961099999999, 0.10021593000000006, 0.1002072639999998, 0.10020544499999984, 0.10020181900000003, 0.10021030499999961, 0.10021222199999968, 0.10021072199999992, 0.10022092999999987, 0.10021730600000023, 0.10022448600000011, 0.10020594499999991, 0.10020465299999959, 0.10021312499999979, 0.1002096529999994, 0.10020573600000038, 0.10021376399999937, 0.10021862500000012, 0.10022329099999983, 0.10022719500000044, 0.1002231809999996, 0.10022945899999947, 0.10023759700000046, 0.10023269499999987, 0.1002409309999992, 0.10023486199999976, 0.1002311529999993, 0.10022815299999976]</msg>
<status status="PASS" starttime="20201103 12:25:06.894" endtime="20201103 12:25:06.898"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.883" endtime="20201103 12:25:06.900"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.906" endtime="20201103 12:25:06.911"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:06.919" endtime="20201103 12:25:06.944"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.913" endtime="20201103 12:25:06.947"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.902" endtime="20201103 12:25:06.950"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:59.291" endtime="20201103 12:25:06.951"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:59.158" endtime="20201103 12:25:06.954" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:06.973" endtime="20201103 12:25:06.995"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.970" endtime="20201103 12:25:06.997"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:07.034" endtime="20201103 12:25:07.052"></status>
</kw>
<msg timestamp="20201103 12:25:07.054" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:07.031" endtime="20201103 12:25:07.054"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:07.060" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:07.056" endtime="20201103 12:25:07.061"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:07.067" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:07.062" endtime="20201103 12:25:07.067"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:07.020" endtime="20201103 12:25:07.069"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:07.013" endtime="20201103 12:25:07.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.011" endtime="20201103 12:25:07.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:07.079" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:07.078" endtime="20201103 12:25:07.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.074" endtime="20201103 12:25:07.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.009" endtime="20201103 12:25:07.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.007" endtime="20201103 12:25:07.081"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:07.083" endtime="20201103 12:25:07.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.003" endtime="20201103 12:25:07.088"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.999" endtime="20201103 12:25:07.089"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.967" endtime="20201103 12:25:07.090"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:07.111" endtime="20201103 12:25:14.148"></status>
</kw>
<msg timestamp="20201103 12:25:14.149" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:07.108" endtime="20201103 12:25:14.149"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.155" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.151" endtime="20201103 12:25:14.156"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.158" endtime="20201103 12:25:14.162"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.101" endtime="20201103 12:25:14.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.095" endtime="20201103 12:25:14.165"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:14.171" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:25:14.167" endtime="20201103 12:25:14.171"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.181" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:14.179" endtime="20201103 12:25:14.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.185" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:14.183" endtime="20201103 12:25:14.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.172" endtime="20201103 12:25:14.188"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.197" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:14.195" endtime="20201103 12:25:14.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.202" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:14.199" endtime="20201103 12:25:14.202"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.189" endtime="20201103 12:25:14.204"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.213" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:14.211" endtime="20201103 12:25:14.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.219" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:25:14.216" endtime="20201103 12:25:14.220"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.205" endtime="20201103 12:25:14.222"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.241" endtime="20201103 12:25:14.593"></status>
</kw>
<msg timestamp="20201103 12:25:14.600" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.131285528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.231500972, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:14.237" endtime="20201103 12:25:14.600"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.618" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.131285528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.231500972, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:14.602" endtime="20201103 12:25:14.619"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.620" endtime="20201103 12:25:14.624"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.229" endtime="20201103 12:25:14.626"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.223" endtime="20201103 12:25:14.627"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:14.637" level="INFO">${FILTERED} = [{'time': 1.231500972, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10021544400000004, 'source_diff': 0.10021544400000004}, {'time': 1.33173225, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:25:14.629" endtime="20201103 12:25:14.638"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:14.667" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:14.639" endtime="20201103 12:25:14.667"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.677" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:14.674" endtime="20201103 12:25:14.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.682" level="INFO">VALUE: [0.10021544400000004, 0.10023049999999989, 0.10021868, 0.10021622200000002, 0.1002218749999999, 0.10021977800000004, 0.10021297200000001, 0.10021052800000008, 0.10022188900000017, 0.10022270900000008, 0.1002220140000003, 0.1002229859999999, 0.10022416699999992, 0.10022733299999986, 0.10023172200000019, 0.10022572200000024, 0.10021662500000028, 0.10021900000000006, 0.10022063900000022, 0.10022509700000004, 0.10022461100000024, 0.10022387500000018, 0.10020047300000012, 0.10021579200000019, 0.10021862500000012, 0.10021120800000016, 0.10022368000000004, 0.10021893099999968, 0.10022138900000055, 0.10021373599999972, 0.10020506999999945, 0.10019904099999977, 0.10020022200000067, 0.1002089719999999, 0.10021665300000038, 0.10021034699999998, 0.10023047200000068, 0.10022530599999957, 0.1002173329999998, 0.10020963900000002, 0.10020722299999996, 0.10022116699999994, 0.10021595799999972, 0.10021534699999979, 0.10020220799999979, 0.1002169860000004, 0.10021637499999958, 0.10022731900000004, 0.10020476399999989, 0.10019893000000035]</msg>
<status status="PASS" starttime="20201103 12:25:14.679" endtime="20201103 12:25:14.683"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.668" endtime="20201103 12:25:14.685"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.691" endtime="20201103 12:25:14.694"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:14.699" endtime="20201103 12:25:14.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.695" endtime="20201103 12:25:14.723"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.687" endtime="20201103 12:25:14.724"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:07.091" endtime="20201103 12:25:14.725"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:06.960" endtime="20201103 12:25:14.727" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:14.744" endtime="20201103 12:25:14.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.740" endtime="20201103 12:25:14.767"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.801" endtime="20201103 12:25:14.818"></status>
</kw>
<msg timestamp="20201103 12:25:14.819" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.797" endtime="20201103 12:25:14.819"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.825" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.821" endtime="20201103 12:25:14.826"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:14.832" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:14.828" endtime="20201103 12:25:14.832"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:14.790" endtime="20201103 12:25:14.834"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:14.784" endtime="20201103 12:25:14.836"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.781" endtime="20201103 12:25:14.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:14.845" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:14.843" endtime="20201103 12:25:14.845"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.839" endtime="20201103 12:25:14.846"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.779" endtime="20201103 12:25:14.846"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.778" endtime="20201103 12:25:14.847"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.848" endtime="20201103 12:25:14.852"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.773" endtime="20201103 12:25:14.853"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.769" endtime="20201103 12:25:14.855"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.737" endtime="20201103 12:25:14.855"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:14.876" endtime="20201103 12:25:21.916"></status>
</kw>
<msg timestamp="20201103 12:25:21.918" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:14.873" endtime="20201103 12:25:21.918"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.924" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:21.920" endtime="20201103 12:25:21.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:21.927" endtime="20201103 12:25:21.931"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.866" endtime="20201103 12:25:21.932"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.860" endtime="20201103 12:25:21.934"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:21.939" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:25:21.935" endtime="20201103 12:25:21.940"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.949" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:21.947" endtime="20201103 12:25:21.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.954" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:21.952" endtime="20201103 12:25:21.955"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.941" endtime="20201103 12:25:21.956"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.966" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:21.963" endtime="20201103 12:25:21.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.971" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:21.968" endtime="20201103 12:25:21.971"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.957" endtime="20201103 12:25:21.973"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.983" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:21.981" endtime="20201103 12:25:21.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.988" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:25:21.986" endtime="20201103 12:25:21.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.974" endtime="20201103 12:25:21.990"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:22.008" endtime="20201103 12:25:22.357"></status>
</kw>
<msg timestamp="20201103 12:25:22.364" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126044889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226243792, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:22.004" endtime="20201103 12:25:22.365"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:22.382" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126044889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226243792, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:22.367" endtime="20201103 12:25:22.383"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:22.385" endtime="20201103 12:25:22.388"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.997" endtime="20201103 12:25:22.390"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.992" endtime="20201103 12:25:22.391"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:22.401" level="INFO">${FILTERED} = [{'time': 1.226243792, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1001989029999999, 'source_diff': 0.1001989029999999}, {'time': 1.326448556, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:25:22.393" endtime="20201103 12:25:22.402"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:22.431" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:22.404" endtime="20201103 12:25:22.431"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:22.441" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:22.439" endtime="20201103 12:25:22.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:22.448" level="INFO">VALUE: [0.1001989029999999, 0.10020397299999995, 0.10019274999999994, 0.10020694500000005, 0.10020055600000011, 0.100202334, 0.10020363900000007, 0.10020934700000006, 0.10021420800000014, 0.10020588899999971, 0.10020706900000009, 0.10021263899999999, 0.1002135420000001, 0.10021168100000022, 0.10021250000000004, 0.10020854099999976, 0.10021705600000042, 0.10021280600000004, 0.10021736199999998, 0.10021077799999967, 0.10020974999999988, 0.1002087920000001, 0.10020719499999986, 0.10020980499999999, 0.10020390300000015, 0.1002085690000003, 0.10020965299999984, 0.10021024999999995, 0.10020744500000012, 0.10019994399999987, 0.10019870799999975, 0.10020488900000046, 0.10019308299999974, 0.1001791110000001, 0.10019232000000056, 0.1002083469999997, 0.10019798700000049, 0.10020190300000031, 0.10021252799999925, 0.1002090830000002, 0.1002054999999995, 0.10020266600000038, 0.10020205599999965, 0.10020633300000004, 0.10021406899999974, 0.10020240299999994, 0.10021284699999988, 0.10020852800000046, 0.10020429099999983, 0.10020940300000003]</msg>
<status status="PASS" starttime="20201103 12:25:22.444" endtime="20201103 12:25:22.449"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.433" endtime="20201103 12:25:22.452"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:22.458" endtime="20201103 12:25:22.461"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:22.467" endtime="20201103 12:25:22.488"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.462" endtime="20201103 12:25:22.490"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.454" endtime="20201103 12:25:22.492"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:14.856" endtime="20201103 12:25:22.492"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:14.731" endtime="20201103 12:25:22.494" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:22.510" endtime="20201103 12:25:22.532"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.507" endtime="20201103 12:25:22.534"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:22.568" endtime="20201103 12:25:22.584"></status>
</kw>
<msg timestamp="20201103 12:25:22.585" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:22.563" endtime="20201103 12:25:22.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:22.591" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:22.587" endtime="20201103 12:25:22.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:22.598" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:22.594" endtime="20201103 12:25:22.599"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:22.556" endtime="20201103 12:25:22.600"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:22.550" endtime="20201103 12:25:22.602"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.547" endtime="20201103 12:25:22.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:22.611" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:22.609" endtime="20201103 12:25:22.611"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.605" endtime="20201103 12:25:22.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.545" endtime="20201103 12:25:22.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.544" endtime="20201103 12:25:22.613"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:22.614" endtime="20201103 12:25:22.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.540" endtime="20201103 12:25:22.619"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.535" endtime="20201103 12:25:22.621"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.504" endtime="20201103 12:25:22.621"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:22.643" endtime="20201103 12:25:29.680"></status>
</kw>
<msg timestamp="20201103 12:25:29.681" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:22.640" endtime="20201103 12:25:29.682"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.688" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:29.684" endtime="20201103 12:25:29.688"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.690" endtime="20201103 12:25:29.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.632" endtime="20201103 12:25:29.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.627" endtime="20201103 12:25:29.697"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:29.702" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:25:29.698" endtime="20201103 12:25:29.703"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.712" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:29.710" endtime="20201103 12:25:29.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.717" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:29.715" endtime="20201103 12:25:29.718"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.704" endtime="20201103 12:25:29.719"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.729" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:29.727" endtime="20201103 12:25:29.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.733" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:29.731" endtime="20201103 12:25:29.734"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.721" endtime="20201103 12:25:29.736"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.745" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:29.743" endtime="20201103 12:25:29.746"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:29.750" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:25:29.747" endtime="20201103 12:25:29.750"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.737" endtime="20201103 12:25:29.752"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:29.768" endtime="20201103 12:25:30.120"></status>
</kw>
<msg timestamp="20201103 12:25:30.127" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126504764, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226727583, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:29.765" endtime="20201103 12:25:30.127"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:30.145" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126504764, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226727583, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:30.129" endtime="20201103 12:25:30.146"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:30.147" endtime="20201103 12:25:30.151"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.758" endtime="20201103 12:25:30.153"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:29.753" endtime="20201103 12:25:30.154"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:30.164" level="INFO">${FILTERED} = [{'time': 1.226727583, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10022281899999985, 'source_diff': 0.10022281899999985}, {'time': 1.326942861, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:30.156" endtime="20201103 12:25:30.165"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:30.194" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:30.167" endtime="20201103 12:25:30.195"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:30.204" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:30.202" endtime="20201103 12:25:30.205"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:30.209" level="INFO">VALUE: [0.10022281899999985, 0.10021451399999992, 0.10021872199999993, 0.10022338899999994, 0.10021927800000019, 0.10021788899999984, 0.1002165559999999, 0.10021133300000007, 0.10021190300000016, 0.10022209700000007, 0.10022219399999965, 0.10021827699999974, 0.10022102799999999, 0.10022183299999998, 0.10022300000000017, 0.1002134589999999, 0.10022274999999992, 0.1002151389999999, 0.10021736100000034, 0.1002140279999999, 0.10022627699999997, 0.10023105599999971, 0.10022243000000008, 0.10022034700000004, 0.10022336099999984, 0.10021841600000014, 0.10021958299999989, 0.10022213899999999, 0.10021106899999976, 0.10022226400000012, 0.10022819499999969, 0.10022122200000005, 0.10021009699999972, 0.1002212500000006, 0.10021430499999973, 0.10021498600000012, 0.10022351400000051, 0.1002211389999994, 0.10022311100000003, 0.10022038900000041, 0.1002269870000001, 0.10021270900000001, 0.1002163610000002, 0.10022043100000033, 0.10021427800000016, 0.1002090279999992, 0.10020940300000003, 0.10020790300000026, 0.1002086800000006, 0.10021087500000014]</msg>
<status status="PASS" starttime="20201103 12:25:30.207" endtime="20201103 12:25:30.210"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:30.196" endtime="20201103 12:25:30.212"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:30.218" endtime="20201103 12:25:30.221"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:30.226" endtime="20201103 12:25:30.248"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:30.222" endtime="20201103 12:25:30.250"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:30.214" endtime="20201103 12:25:30.252"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:22.622" endtime="20201103 12:25:30.252"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:22.498" endtime="20201103 12:25:30.254" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:40.879" endtime="20201103 12:25:30.272"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">samr21-xpro</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:24:36.788" endtime="20201103 12:25:30.334"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_samr21-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
