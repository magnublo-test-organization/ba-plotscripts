<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201103 12:35:23.213" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.507" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:24.523" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:26.625" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:24.503" endtime="20201103 12:35:26.626"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.631" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:26.628" endtime="20201103 12:35:26.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.500" endtime="20201103 12:35:26.634"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:26.639" endtime="20201103 12:35:26.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.636" endtime="20201103 12:35:26.979"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.012" endtime="20201103 12:35:27.028"></status>
</kw>
<msg timestamp="20201103 12:35:27.029" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:27.009" endtime="20201103 12:35:27.029"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.035" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:27.031" endtime="20201103 12:35:27.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.042" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:27.038" endtime="20201103 12:35:27.043"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:27.002" endtime="20201103 12:35:27.045"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.997" endtime="20201103 12:35:27.046"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.993" endtime="20201103 12:35:27.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:27.055" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:27.054" endtime="20201103 12:35:27.056"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.049" endtime="20201103 12:35:27.056"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.991" endtime="20201103 12:35:27.057"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.989" endtime="20201103 12:35:27.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.059" endtime="20201103 12:35:27.062"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.984" endtime="20201103 12:35:27.064"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.065" endtime="20201103 12:35:27.069"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.981" endtime="20201103 12:35:27.070"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.497" endtime="20201103 12:35:27.071"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:27.087" endtime="20201103 12:35:27.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.083" endtime="20201103 12:35:27.110"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.143" endtime="20201103 12:35:27.159"></status>
</kw>
<msg timestamp="20201103 12:35:27.160" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:27.140" endtime="20201103 12:35:27.160"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.166" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:27.162" endtime="20201103 12:35:27.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.173" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:27.168" endtime="20201103 12:35:27.173"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:27.133" endtime="20201103 12:35:27.175"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:27.127" endtime="20201103 12:35:27.177"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.123" endtime="20201103 12:35:27.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:27.185" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:27.184" endtime="20201103 12:35:27.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.179" endtime="20201103 12:35:27.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.122" endtime="20201103 12:35:27.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.120" endtime="20201103 12:35:27.187"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.189" endtime="20201103 12:35:27.192"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.116" endtime="20201103 12:35:27.193"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.112" endtime="20201103 12:35:27.195"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.081" endtime="20201103 12:35:27.195"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.212" endtime="20201103 12:35:27.222"></status>
</kw>
<msg timestamp="20201103 12:35:27.223" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:27.209" endtime="20201103 12:35:27.224"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.229" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:27.226" endtime="20201103 12:35:27.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:27.231" endtime="20201103 12:35:27.237"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.202" endtime="20201103 12:35:27.238"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.197" endtime="20201103 12:35:27.240"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.249" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:35:27.247" endtime="20201103 12:35:27.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.254" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:35:27.252" endtime="20201103 12:35:27.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.241" endtime="20201103 12:35:27.256"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:27.072" endtime="20201103 12:35:27.258" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:23.470" endtime="20201103 12:35:27.264"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:27.389" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:27.404" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:29.461" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:27.385" endtime="20201103 12:35:29.462"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:29.468" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:29.465" endtime="20201103 12:35:29.469"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.382" endtime="20201103 12:35:29.470"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:29.474" endtime="20201103 12:35:29.833"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.472" endtime="20201103 12:35:29.835"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:29.864" endtime="20201103 12:35:29.879"></status>
</kw>
<msg timestamp="20201103 12:35:29.881" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:29.860" endtime="20201103 12:35:29.881"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:29.887" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:29.883" endtime="20201103 12:35:29.888"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:29.894" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:29.889" endtime="20201103 12:35:29.894"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:29.854" endtime="20201103 12:35:29.896"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:29.849" endtime="20201103 12:35:29.898"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.846" endtime="20201103 12:35:29.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:29.906" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:29.905" endtime="20201103 12:35:29.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.900" endtime="20201103 12:35:29.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.844" endtime="20201103 12:35:29.910"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.842" endtime="20201103 12:35:29.910"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:29.911" endtime="20201103 12:35:29.915"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.839" endtime="20201103 12:35:29.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:29.918" endtime="20201103 12:35:29.922"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.836" endtime="20201103 12:35:29.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:27.379" endtime="20201103 12:35:29.924"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:29.939" endtime="20201103 12:35:29.960"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.934" endtime="20201103 12:35:29.962"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:29.994" endtime="20201103 12:35:30.011"></status>
</kw>
<msg timestamp="20201103 12:35:30.012" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:29.991" endtime="20201103 12:35:30.013"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:30.019" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:30.015" endtime="20201103 12:35:30.020"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:30.026" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:30.022" endtime="20201103 12:35:30.026"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:29.984" endtime="20201103 12:35:30.028"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:29.978" endtime="20201103 12:35:30.030"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.975" endtime="20201103 12:35:30.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:30.038" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:30.037" endtime="20201103 12:35:30.039"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:30.032" endtime="20201103 12:35:30.039"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.973" endtime="20201103 12:35:30.040"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.972" endtime="20201103 12:35:30.040"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:30.042" endtime="20201103 12:35:30.045"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.968" endtime="20201103 12:35:30.047"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.963" endtime="20201103 12:35:30.048"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:29.931" endtime="20201103 12:35:30.049"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:30.130" endtime="20201103 12:35:37.165"></status>
</kw>
<msg timestamp="20201103 12:35:37.166" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:30.066" endtime="20201103 12:35:37.167"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.172" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:37.169" endtime="20201103 12:35:37.173"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.175" endtime="20201103 12:35:37.178"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:30.059" endtime="20201103 12:35:37.180"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:30.054" endtime="20201103 12:35:37.181"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:37.187" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:35:37.183" endtime="20201103 12:35:37.187"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.197" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:37.195" endtime="20201103 12:35:37.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.201" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:37.199" endtime="20201103 12:35:37.202"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.189" endtime="20201103 12:35:37.204"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.213" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:37.211" endtime="20201103 12:35:37.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.218" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:37.215" endtime="20201103 12:35:37.218"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.205" endtime="20201103 12:35:37.220"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.229" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:37.227" endtime="20201103 12:35:37.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.234" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:35:37.231" endtime="20201103 12:35:37.235"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.221" endtime="20201103 12:35:37.237"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.254" endtime="20201103 12:35:37.611"></status>
</kw>
<msg timestamp="20201103 12:35:37.618" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.184723944, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.284932889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:37.251" endtime="20201103 12:35:37.619"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.636" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.184723944, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.284932889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:37.620" endtime="20201103 12:35:37.637"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.638" endtime="20201103 12:35:37.642"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.242" endtime="20201103 12:35:37.644"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.238" endtime="20201103 12:35:37.645"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:37.655" level="INFO">${FILTERED} = [{'time': 1.284932889, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1002089450000001, 'source_diff': 0.1002089450000001}, {'time': 1.385141333, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:35:37.647" endtime="20201103 12:35:37.656"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:37.716" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:35:37.658" endtime="20201103 12:35:37.717"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.726" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:37.724" endtime="20201103 12:35:37.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.732" level="INFO">VALUE: [0.1002089450000001, 0.10020759700000004, 0.10020455499999992, 0.10019722200000003, 0.10019723599999986, 0.10019862499999999, 0.10020245900000013, 0.10019295800000005, 0.10019415300000012, 0.10018601400000016, 0.1001843469999999, 0.10019805600000042, 0.10020715299999994, 0.10020426399999982, 0.10020738899999992, 0.10021343000000016, 0.10020869399999999, 0.10021108300000003, 0.10020994500000002, 0.10020211099999976, 0.10020570799999984, 0.10020636199999977, 0.10021037500000007, 0.10021729199999996, 0.10021866700000004, 0.10021222199999968, 0.10020416700000023, 0.10018458399999997, 0.10020144499999972, 0.10019872299999921, 0.10019816700000028, 0.10020084699999998, 0.10019773600000015, 0.10020477700000008, 0.10020920800000077, 0.10020391699999998, 0.10020861100000023, 0.10021736100000034, 0.1002082230000001, 0.10021237499999991, 0.10020741700000002, 0.1002116390000003, 0.10021422199999996, 0.10021076400000073, 0.10020476399999989, 0.10020426399999938, 0.10020397200000009, 0.10019637500000034, 0.10019969399999962, 0.10020720800000049]</msg>
<status status="PASS" starttime="20201103 12:35:37.729" endtime="20201103 12:35:37.732"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.718" endtime="20201103 12:35:37.734"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.740" endtime="20201103 12:35:37.743"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:37.748" endtime="20201103 12:35:37.770"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.744" endtime="20201103 12:35:37.772"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.736" endtime="20201103 12:35:37.773"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:30.050" endtime="20201103 12:35:37.774"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:29.925" endtime="20201103 12:35:37.776" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:37.792" endtime="20201103 12:35:37.814"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.788" endtime="20201103 12:35:37.815"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.850" endtime="20201103 12:35:37.865"></status>
</kw>
<msg timestamp="20201103 12:35:37.867" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:37.847" endtime="20201103 12:35:37.867"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.873" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:37.869" endtime="20201103 12:35:37.874"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:37.880" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:37.876" endtime="20201103 12:35:37.880"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:37.839" endtime="20201103 12:35:37.882"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:37.831" endtime="20201103 12:35:37.884"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.828" endtime="20201103 12:35:37.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:37.892" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:37.891" endtime="20201103 12:35:37.893"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.886" endtime="20201103 12:35:37.893"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.827" endtime="20201103 12:35:37.894"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.825" endtime="20201103 12:35:37.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.896" endtime="20201103 12:35:37.899"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.821" endtime="20201103 12:35:37.901"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.817" endtime="20201103 12:35:37.902"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.786" endtime="20201103 12:35:37.903"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:37.924" endtime="20201103 12:35:44.962"></status>
</kw>
<msg timestamp="20201103 12:35:44.964" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:37.920" endtime="20201103 12:35:44.964"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:44.970" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:44.966" endtime="20201103 12:35:44.971"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:44.972" endtime="20201103 12:35:44.976"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.913" endtime="20201103 12:35:44.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.908" endtime="20201103 12:35:44.979"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:44.985" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:35:44.980" endtime="20201103 12:35:44.985"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:44.994" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:44.992" endtime="20201103 12:35:44.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:44.999" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:44.997" endtime="20201103 12:35:44.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:44.986" endtime="20201103 12:35:45.001"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.010" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:45.008" endtime="20201103 12:35:45.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.016" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:45.013" endtime="20201103 12:35:45.016"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.002" endtime="20201103 12:35:45.018"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.028" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:45.025" endtime="20201103 12:35:45.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.032" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:35:45.030" endtime="20201103 12:35:45.033"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.019" endtime="20201103 12:35:45.034"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.053" endtime="20201103 12:35:45.409"></status>
</kw>
<msg timestamp="20201103 12:35:45.416" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125005847, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.225210528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:45.049" endtime="20201103 12:35:45.417"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.434" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125005847, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.225210528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:45.418" endtime="20201103 12:35:45.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.436" endtime="20201103 12:35:45.440"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.042" endtime="20201103 12:35:45.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.035" endtime="20201103 12:35:45.443"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:45.453" level="INFO">${FILTERED} = [{'time': 1.225210528, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10020468100000013, 'source_diff': 0.10020468100000013}, {'time': 1.325420125, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:45.445" endtime="20201103 12:35:45.453"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:45.483" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:35:45.455" endtime="20201103 12:35:45.484"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.493" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:45.491" endtime="20201103 12:35:45.494"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.498" level="INFO">VALUE: [0.10020468100000013, 0.10020879199999988, 0.10021634800000001, 0.10022658299999998, 0.10021622299999988, 0.10021127800000018, 0.10022279200000006, 0.10023101400000001, 0.10021433300000004, 0.1002110420000002, 0.10021211100000027, 0.10021181899999965, 0.10020844400000017, 0.10020700000000016, 0.10020668100000041, 0.10020673600000007, 0.10021338900000032, 0.10020973600000005, 0.10020574999999976, 0.10019788900000037, 0.10019957000000002, 0.10020418100000006, 0.10019822199999995, 0.10019945800000007, 0.10019856899999979, 0.10020163900000023, 0.10019250000000035, 0.10018076400000009, 0.10019355499999971, 0.1001898050000003, 0.1001994719999999, 0.10020951400000033, 0.10019222199999955, 0.1002078329999998, 0.1002116949999996, 0.10021349999999973, 0.10021898600000068, 0.10021405500000036, 0.10021987499999963, 0.10021909700000009, 0.10022122200000005, 0.1002247220000001, 0.100225236, 0.10022518099999989, 0.10023279200000079, 0.10022815200000057, 0.10020593000000044, 0.10021315300000033, 0.10019000000000045, 0.10019413900000007]</msg>
<status status="PASS" starttime="20201103 12:35:45.495" endtime="20201103 12:35:45.499"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.485" endtime="20201103 12:35:45.500"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.507" endtime="20201103 12:35:45.509"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:45.515" endtime="20201103 12:35:45.537"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.511" endtime="20201103 12:35:45.538"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.502" endtime="20201103 12:35:45.540"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:37.904" endtime="20201103 12:35:45.540"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:37.780" endtime="20201103 12:35:45.542" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:45.559" endtime="20201103 12:35:45.580"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.555" endtime="20201103 12:35:45.582"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.616" endtime="20201103 12:35:45.631"></status>
</kw>
<msg timestamp="20201103 12:35:45.633" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.613" endtime="20201103 12:35:45.633"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.639" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.635" endtime="20201103 12:35:45.640"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:45.645" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:45.641" endtime="20201103 12:35:45.646"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:45.606" endtime="20201103 12:35:45.648"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:45.598" endtime="20201103 12:35:45.649"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.595" endtime="20201103 12:35:45.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:45.658" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:45.656" endtime="20201103 12:35:45.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.652" endtime="20201103 12:35:45.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.594" endtime="20201103 12:35:45.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.592" endtime="20201103 12:35:45.660"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.661" endtime="20201103 12:35:45.665"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.588" endtime="20201103 12:35:45.666"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.584" endtime="20201103 12:35:45.668"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.552" endtime="20201103 12:35:45.668"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:45.689" endtime="20201103 12:35:52.728"></status>
</kw>
<msg timestamp="20201103 12:35:52.729" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:45.686" endtime="20201103 12:35:52.730"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.736" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:52.731" endtime="20201103 12:35:52.736"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:52.738" endtime="20201103 12:35:52.741"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.679" endtime="20201103 12:35:52.743"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.674" endtime="20201103 12:35:52.745"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:52.750" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:35:52.746" endtime="20201103 12:35:52.750"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.761" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:52.758" endtime="20201103 12:35:52.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.765" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:52.763" endtime="20201103 12:35:52.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:52.752" endtime="20201103 12:35:52.767"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.777" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:52.775" endtime="20201103 12:35:52.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.781" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:52.779" endtime="20201103 12:35:52.782"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:52.769" endtime="20201103 12:35:52.783"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.793" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:52.791" endtime="20201103 12:35:52.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:52.798" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:35:52.795" endtime="20201103 12:35:52.798"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:52.785" endtime="20201103 12:35:52.800"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:52.818" endtime="20201103 12:35:53.178"></status>
</kw>
<msg timestamp="20201103 12:35:53.184" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.123705014, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.223908, 'source': 'DUT_IC', 'event': 'FALLIN...</msg>
<status status="PASS" starttime="20201103 12:35:52.815" endtime="20201103 12:35:53.185"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:53.202" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.123705014, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.223908, 'source': 'DUT_IC', 'event': 'FALLIN...</msg>
<status status="PASS" starttime="20201103 12:35:53.187" endtime="20201103 12:35:53.203"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:53.205" endtime="20201103 12:35:53.208"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:52.806" endtime="20201103 12:35:53.210"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:52.801" endtime="20201103 12:35:53.211"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:53.221" level="INFO">${FILTERED} = [{'time': 1.223908, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100202986, 'source_diff': 0.100202986}, {'time': 1.324112403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10020356999999991,...</msg>
<status status="PASS" starttime="20201103 12:35:53.213" endtime="20201103 12:35:53.222"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:53.251" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:35:53.223" endtime="20201103 12:35:53.252"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:53.261" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:53.259" endtime="20201103 12:35:53.262"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:53.266" level="INFO">VALUE: [0.100202986, 0.10020356999999991, 0.1002105419999999, 0.10021761099999993, 0.10020888899999991, 0.10020391600000012, 0.1001995550000001, 0.10020637499999996, 0.10020380499999981, 0.10021237500000035, 0.10020856999999994, 0.1002057500000002, 0.10019613900000035, 0.10018901399999969, 0.10020601399999984, 0.10020502799999997, 0.10020347200000002, 0.10019809700000026, 0.10019520900000023, 0.10020441700000005, 0.10020565300000017, 0.10020983300000008, 0.10020506900000026, 0.10018819500000031, 0.10020168100000015, 0.10021108300000003, 0.10019384700000034, 0.1001936950000002, 0.10019304200000034, 0.1001857639999999, 0.10018044500000034, 0.10018959800000005, 0.10020797199999976, 0.10019438900000033, 0.10018606900000027, 0.10019623600000038, 0.10019279200000053, 0.10019781899999991, 0.10020036100000063, 0.10021104199999975, 0.10020495900000004, 0.10020759699999982, 0.10020216599999987, 0.100190542, 0.10019891700000016, 0.10019359699999963, 0.10020073599999968, 0.10020751399999916, 0.10020158300000048, 0.10019823599999977]</msg>
<status status="PASS" starttime="20201103 12:35:53.263" endtime="20201103 12:35:53.267"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.253" endtime="20201103 12:35:53.269"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:53.275" endtime="20201103 12:35:53.283"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:53.289" endtime="20201103 12:35:53.311"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.285" endtime="20201103 12:35:53.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.270" endtime="20201103 12:35:53.314"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:45.670" endtime="20201103 12:35:53.315"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:45.546" endtime="20201103 12:35:53.316" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:53.332" endtime="20201103 12:35:53.354"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.329" endtime="20201103 12:35:53.356"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:53.392" endtime="20201103 12:35:53.407"></status>
</kw>
<msg timestamp="20201103 12:35:53.408" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:53.388" endtime="20201103 12:35:53.409"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:53.415" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:53.410" endtime="20201103 12:35:53.415"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:53.421" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:53.417" endtime="20201103 12:35:53.422"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:53.378" endtime="20201103 12:35:53.423"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:53.372" endtime="20201103 12:35:53.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.369" endtime="20201103 12:35:53.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:53.433" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:53.432" endtime="20201103 12:35:53.434"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.428" endtime="20201103 12:35:53.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.367" endtime="20201103 12:35:53.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.366" endtime="20201103 12:35:53.436"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:53.437" endtime="20201103 12:35:53.440"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.362" endtime="20201103 12:35:53.442"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.357" endtime="20201103 12:35:53.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.326" endtime="20201103 12:35:53.444"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:53.465" endtime="20201103 12:36:00.500"></status>
</kw>
<msg timestamp="20201103 12:36:00.501" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:53.461" endtime="20201103 12:36:00.501"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.507" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:00.503" endtime="20201103 12:36:00.508"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:00.509" endtime="20201103 12:36:00.514"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.454" endtime="20201103 12:36:00.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.449" endtime="20201103 12:36:00.517"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:00.522" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:36:00.519" endtime="20201103 12:36:00.523"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.532" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:00.530" endtime="20201103 12:36:00.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.537" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:00.535" endtime="20201103 12:36:00.538"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:00.524" endtime="20201103 12:36:00.539"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.548" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:00.546" endtime="20201103 12:36:00.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.553" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:00.551" endtime="20201103 12:36:00.554"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:00.540" endtime="20201103 12:36:00.555"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.565" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:00.562" endtime="20201103 12:36:00.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.569" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:00.567" endtime="20201103 12:36:00.570"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:00.557" endtime="20201103 12:36:00.571"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:00.588" endtime="20201103 12:36:00.939"></status>
</kw>
<msg timestamp="20201103 12:36:00.947" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125493514, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.225692361, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:00.584" endtime="20201103 12:36:00.948"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.967" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125493514, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.225692361, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:00.950" endtime="20201103 12:36:00.968"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:00.970" endtime="20201103 12:36:00.975"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:00.577" endtime="20201103 12:36:00.976"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:00.573" endtime="20201103 12:36:00.978"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:00.989" level="INFO">${FILTERED} = [{'time': 1.225692361, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10019884699999992, 'source_diff': 0.10019884699999992}, {'time': 1.325884292, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:00.980" endtime="20201103 12:36:00.989"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:01.019" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:36:00.991" endtime="20201103 12:36:01.020"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.031" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:01.028" endtime="20201103 12:36:01.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.038" level="INFO">VALUE: [0.10019884699999992, 0.10019108399999999, 0.10020493099999994, 0.100211139, 0.1002073750000001, 0.100200611, 0.10021156999999992, 0.10020333300000006, 0.10021062499999989, 0.10021283300000006, 0.100212403, 0.10021586100000013, 0.10022262499999979, 0.10021223599999995, 0.10020970900000004, 0.10021511100000025, 0.100211791, 0.10020050000000014, 0.10018961099999979, 0.10020890299999996, 0.10021236100000008, 0.1002039589999999, 0.10020805600000005, 0.10019563899999984, 0.10019101299999988, 0.10019436100000023, 0.10018906999999988, 0.10018483400000022, 0.1001854299999998, 0.10017795800000062, 0.10017913799999967, 0.10018715300000025, 0.10018679200000058, 0.10020777799999969, 0.10019545900000004, 0.10019708400000038, 0.1001985000000003, 0.10020615199999927, 0.10020384800000048, 0.10019331899999973, 0.10020129200000039, 0.10019988900000065, 0.10020030599999963, 0.10020062500000027, 0.10019490300000022, 0.10019409700000015, 0.10018145799999978, 0.10018165199999984, 0.10018709700000006, 0.1001944589999999]</msg>
<status status="PASS" starttime="20201103 12:36:01.034" endtime="20201103 12:36:01.039"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.022" endtime="20201103 12:36:01.041"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.049" endtime="20201103 12:36:01.052"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:01.058" endtime="20201103 12:36:01.082"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.053" endtime="20201103 12:36:01.084"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.043" endtime="20201103 12:36:01.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:53.445" endtime="20201103 12:36:01.087"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:53.320" endtime="20201103 12:36:01.090" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:01.111" endtime="20201103 12:36:01.134"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.106" endtime="20201103 12:36:01.136"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.173" endtime="20201103 12:36:01.190"></status>
</kw>
<msg timestamp="20201103 12:36:01.191" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.170" endtime="20201103 12:36:01.192"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.198" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.194" endtime="20201103 12:36:01.199"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.204" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:01.200" endtime="20201103 12:36:01.205"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.163" endtime="20201103 12:36:01.207"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.157" endtime="20201103 12:36:01.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.154" endtime="20201103 12:36:01.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:01.217" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:01.216" endtime="20201103 12:36:01.218"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.211" endtime="20201103 12:36:01.218"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.152" endtime="20201103 12:36:01.219"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.148" endtime="20201103 12:36:01.219"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.221" endtime="20201103 12:36:01.224"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.143" endtime="20201103 12:36:01.226"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.138" endtime="20201103 12:36:01.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.102" endtime="20201103 12:36:01.227"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.248" endtime="20201103 12:36:08.288"></status>
</kw>
<msg timestamp="20201103 12:36:08.289" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.245" endtime="20201103 12:36:08.290"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.296" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.291" endtime="20201103 12:36:08.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.299" endtime="20201103 12:36:08.302"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.238" endtime="20201103 12:36:08.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.233" endtime="20201103 12:36:08.306"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:08.311" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:36:08.307" endtime="20201103 12:36:08.311"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.321" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:08.319" endtime="20201103 12:36:08.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.325" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:08.323" endtime="20201103 12:36:08.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.313" endtime="20201103 12:36:08.328"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.337" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:08.335" endtime="20201103 12:36:08.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.341" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:08.339" endtime="20201103 12:36:08.342"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.329" endtime="20201103 12:36:08.344"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.354" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:08.351" endtime="20201103 12:36:08.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.359" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:36:08.356" endtime="20201103 12:36:08.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.345" endtime="20201103 12:36:08.361"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.378" endtime="20201103 12:36:08.740"></status>
</kw>
<msg timestamp="20201103 12:36:08.747" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.130469264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.230688472, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:08.374" endtime="20201103 12:36:08.748"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.766" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.130469264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.230688472, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:08.750" endtime="20201103 12:36:08.766"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.768" endtime="20201103 12:36:08.772"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.367" endtime="20201103 12:36:08.773"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.362" endtime="20201103 12:36:08.775"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:08.785" level="INFO">${FILTERED} = [{'time': 1.230688472, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10021920799999995, 'source_diff': 0.10021920799999995}, {'time': 1.330904958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:08.777" endtime="20201103 12:36:08.786"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:08.817" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:36:08.787" endtime="20201103 12:36:08.817"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.827" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:08.825" endtime="20201103 12:36:08.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.833" level="INFO">VALUE: [0.10021920799999995, 0.10021566599999998, 0.10020659700000012, 0.10021800000000014, 0.10021887500000015, 0.10022333399999983, 0.10022726399999993, 0.10021163899999985, 0.10020743100000007, 0.10021145900000006, 0.10020537500000026, 0.10020941599999977, 0.10021061100000006, 0.10021663899999966, 0.10021138900000004, 0.10020991599999984, 0.10020234699999975, 0.10021011099999999, 0.10021202699999998, 0.10021084700000005, 0.10019909800000004, 0.10020551399999977, 0.10019731999999992, 0.10019747199999962, 0.10019733300000011, 0.10020193099999997, 0.10021148600000007, 0.10020156900000021, 0.10018979200000011, 0.10019163900000017, 0.10019370900000002, 0.10018841600000084, 0.10018406899999999, 0.10019652699999959, 0.1001923610000004, 0.10019413900000007, 0.100187472, 0.10018537499999969, 0.10018420799999994, 0.10017834699999995, 0.10017977800000022, 0.10018091700000031, 0.10018725000000028, 0.10019745900000032, 0.10019544500000066, 0.10019233300000074, 0.10018954099999977, 0.10018870800000013, 0.10018159700000062, 0.10018083299999958]</msg>
<status status="PASS" starttime="20201103 12:36:08.829" endtime="20201103 12:36:08.834"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.818" endtime="20201103 12:36:08.835"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.842" endtime="20201103 12:36:08.845"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:08.851" endtime="20201103 12:36:08.872"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.846" endtime="20201103 12:36:08.874"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.837" endtime="20201103 12:36:08.876"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.229" endtime="20201103 12:36:08.876"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:01.096" endtime="20201103 12:36:08.878" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:08.895" endtime="20201103 12:36:08.917"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.891" endtime="20201103 12:36:08.918"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.954" endtime="20201103 12:36:08.973"></status>
</kw>
<msg timestamp="20201103 12:36:08.974" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.949" endtime="20201103 12:36:08.975"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.981" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.977" endtime="20201103 12:36:08.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.988" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:08.983" endtime="20201103 12:36:08.988"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:08.941" endtime="20201103 12:36:08.990"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:08.935" endtime="20201103 12:36:08.992"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.932" endtime="20201103 12:36:08.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:09.001" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:08.999" endtime="20201103 12:36:09.002"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.994" endtime="20201103 12:36:09.002"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.930" endtime="20201103 12:36:09.002"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.929" endtime="20201103 12:36:09.003"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:09.004" endtime="20201103 12:36:09.016"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.924" endtime="20201103 12:36:09.018"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.920" endtime="20201103 12:36:09.020"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.888" endtime="20201103 12:36:09.020"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:09.043" endtime="20201103 12:36:16.078"></status>
</kw>
<msg timestamp="20201103 12:36:16.079" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:09.040" endtime="20201103 12:36:16.079"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.085" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:16.081" endtime="20201103 12:36:16.086"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.087" endtime="20201103 12:36:16.091"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.031" endtime="20201103 12:36:16.093"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.026" endtime="20201103 12:36:16.094"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:16.100" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:36:16.096" endtime="20201103 12:36:16.100"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.109" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:16.107" endtime="20201103 12:36:16.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.114" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:16.112" endtime="20201103 12:36:16.115"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.101" endtime="20201103 12:36:16.116"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.126" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:16.123" endtime="20201103 12:36:16.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.130" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:16.128" endtime="20201103 12:36:16.131"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.118" endtime="20201103 12:36:16.132"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.142" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:16.140" endtime="20201103 12:36:16.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.146" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:36:16.144" endtime="20201103 12:36:16.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.134" endtime="20201103 12:36:16.149"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.165" endtime="20201103 12:36:16.514"></status>
</kw>
<msg timestamp="20201103 12:36:16.520" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.141623556, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.241813458, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:16.161" endtime="20201103 12:36:16.521"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.538" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.141623556, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.241813458, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:16.523" endtime="20201103 12:36:16.539"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.540" endtime="20201103 12:36:16.544"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.154" endtime="20201103 12:36:16.546"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.150" endtime="20201103 12:36:16.547"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:16.557" level="INFO">${FILTERED} = [{'time': 1.241813458, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10018990199999989, 'source_diff': 0.10018990199999989}, {'time': 1.342005722, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:16.549" endtime="20201103 12:36:16.557"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:16.587" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:36:16.559" endtime="20201103 12:36:16.588"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.597" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:16.595" endtime="20201103 12:36:16.598"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.602" level="INFO">VALUE: [0.10018990199999989, 0.10019142999999997, 0.10018491699999998, 0.10018265300000007, 0.10018276400000015, 0.10018752799999997, 0.10017944499999998, 0.10017919500000017, 0.10018804200000009, 0.10018806999999974, 0.10017688899999966, 0.10019645899999974, 0.10019605600000014, 0.1001931530000002, 0.10019952799999965, 0.10018741599999981, 0.10019386099999972, 0.10019872200000002, 0.10019256900000029, 0.10017380599999992, 0.1001819450000001, 0.10018656899999989, 0.1001926390000003, 0.10019733299999967, 0.10018937500000025, 0.10018430600000006, 0.10017613899999978, 0.10017794399999991, 0.10018516700000024, 0.10019561100000018, 0.10018486200000076, 0.1001794579999995, 0.10018659700000043, 0.10019481899999949, 0.10018355500000009, 0.10018476299999968, 0.10019191699999919, 0.1001872920000002, 0.100190542, 0.10018633399999999, 0.10018545900000042, 0.10018580599999982, 0.10019470799999919, 0.10019405600000031, 0.10020443099999987, 0.10018663900000035, 0.10019984699999984, 0.10018987500000076, 0.10019247199999981, 0.10018994399999936]</msg>
<status status="PASS" starttime="20201103 12:36:16.600" endtime="20201103 12:36:16.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.589" endtime="20201103 12:36:16.605"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.612" endtime="20201103 12:36:16.615"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:16.620" endtime="20201103 12:36:16.642"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.616" endtime="20201103 12:36:16.644"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.608" endtime="20201103 12:36:16.645"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.021" endtime="20201103 12:36:16.646"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:08.882" endtime="20201103 12:36:16.648" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:27.277" endtime="20201103 12:36:16.667"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">samr21-xpro</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:35:23.222" endtime="20201103 12:36:16.732"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_samr21-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
