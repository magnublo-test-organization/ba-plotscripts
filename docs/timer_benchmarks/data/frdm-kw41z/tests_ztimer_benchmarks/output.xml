<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:25:07.999" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:08.678" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:08.686" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:09.819" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:08.677" endtime="20201103 12:25:09.820"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:09.823" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:09.821" endtime="20201103 12:25:09.823"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:08.675" endtime="20201103 12:25:09.824"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:09.827" endtime="20201103 12:25:10.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:09.825" endtime="20201103 12:25:10.072"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.084" endtime="20201103 12:25:10.104"></status>
</kw>
<msg timestamp="20201103 12:25:10.104" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:10.083" endtime="20201103 12:25:10.104"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.107" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:10.105" endtime="20201103 12:25:10.107"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.110" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:10.108" endtime="20201103 12:25:10.110"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:10.080" endtime="20201103 12:25:10.111"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:10.078" endtime="20201103 12:25:10.112"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.077" endtime="20201103 12:25:10.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:10.117" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:10.116" endtime="20201103 12:25:10.117"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.113" endtime="20201103 12:25:10.117"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.076" endtime="20201103 12:25:10.117"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.076" endtime="20201103 12:25:10.118"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.118" endtime="20201103 12:25:10.120"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.074" endtime="20201103 12:25:10.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.121" endtime="20201103 12:25:10.123"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.073" endtime="20201103 12:25:10.123"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:08.674" endtime="20201103 12:25:10.124"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:10.130" endtime="20201103 12:25:10.150"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.129" endtime="20201103 12:25:10.151"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.164" endtime="20201103 12:25:10.184"></status>
</kw>
<msg timestamp="20201103 12:25:10.184" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:10.162" endtime="20201103 12:25:10.185"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.187" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:10.185" endtime="20201103 12:25:10.187"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.190" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:10.188" endtime="20201103 12:25:10.190"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:10.160" endtime="20201103 12:25:10.191"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:10.157" endtime="20201103 12:25:10.191"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.156" endtime="20201103 12:25:10.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:10.195" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:10.195" endtime="20201103 12:25:10.196"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.193" endtime="20201103 12:25:10.196"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.155" endtime="20201103 12:25:10.196"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.154" endtime="20201103 12:25:10.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.197" endtime="20201103 12:25:10.199"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.153" endtime="20201103 12:25:10.199"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.151" endtime="20201103 12:25:10.200"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.127" endtime="20201103 12:25:10.200"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.208" endtime="20201103 12:25:10.223"></status>
</kw>
<msg timestamp="20201103 12:25:10.224" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:10.206" endtime="20201103 12:25:10.224"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.226" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:10.225" endtime="20201103 12:25:10.227"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:10.227" endtime="20201103 12:25:10.229"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.202" endtime="20201103 12:25:10.230"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.201" endtime="20201103 12:25:10.230"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.234" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:10.233" endtime="20201103 12:25:10.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.236" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:25:10.235" endtime="20201103 12:25:10.236"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.231" endtime="20201103 12:25:10.237"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:10.124" endtime="20201103 12:25:10.237" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:08.135" endtime="20201103 12:25:10.240"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:10.296" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:10.305" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:11.423" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:10.295" endtime="20201103 12:25:11.423"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.426" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:11.424" endtime="20201103 12:25:11.426"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.294" endtime="20201103 12:25:11.427"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:11.429" endtime="20201103 12:25:11.708"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.427" endtime="20201103 12:25:11.708"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.721" endtime="20201103 12:25:11.736"></status>
</kw>
<msg timestamp="20201103 12:25:11.737" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['his is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:11.719" endtime="20201103 12:25:11.737"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.739" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['his is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:11.738" endtime="20201103 12:25:11.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.742" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:11.740" endtime="20201103 12:25:11.742"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:11.717" endtime="20201103 12:25:11.743"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:11.715" endtime="20201103 12:25:11.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.713" endtime="20201103 12:25:11.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:11.748" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:11.747" endtime="20201103 12:25:11.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.745" endtime="20201103 12:25:11.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.713" endtime="20201103 12:25:11.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.712" endtime="20201103 12:25:11.748"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.749" endtime="20201103 12:25:11.751"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.711" endtime="20201103 12:25:11.751"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.752" endtime="20201103 12:25:11.753"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.709" endtime="20201103 12:25:11.754"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:10.293" endtime="20201103 12:25:11.754"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:11.760" endtime="20201103 12:25:11.780"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.758" endtime="20201103 12:25:11.781"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.793" endtime="20201103 12:25:11.815"></status>
</kw>
<msg timestamp="20201103 12:25:11.816" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:11.792" endtime="20201103 12:25:11.816"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.818" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:11.817" endtime="20201103 12:25:11.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.821" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:11.819" endtime="20201103 12:25:11.822"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:11.789" endtime="20201103 12:25:11.822"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:11.787" endtime="20201103 12:25:11.823"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.786" endtime="20201103 12:25:11.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:11.827" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:11.826" endtime="20201103 12:25:11.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.824" endtime="20201103 12:25:11.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.785" endtime="20201103 12:25:11.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.784" endtime="20201103 12:25:11.828"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.828" endtime="20201103 12:25:11.830"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.783" endtime="20201103 12:25:11.830"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.781" endtime="20201103 12:25:11.831"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.757" endtime="20201103 12:25:11.831"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.839" endtime="20201103 12:25:18.845"></status>
</kw>
<msg timestamp="20201103 12:25:18.846" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:11.837" endtime="20201103 12:25:18.846"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.851" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:18.848" endtime="20201103 12:25:18.852"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:18.853" endtime="20201103 12:25:18.858"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.835" endtime="20201103 12:25:18.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.833" endtime="20201103 12:25:18.860"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:18.866" level="INFO">${RESULT} = {'bg-timer-count': 0, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:18.862" endtime="20201103 12:25:18.866"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.874" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:18.872" endtime="20201103 12:25:18.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.878" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:18.876" endtime="20201103 12:25:18.879"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:18.867" endtime="20201103 12:25:18.880"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.888" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:18.886" endtime="20201103 12:25:18.888"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.892" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:18.890" endtime="20201103 12:25:18.893"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:18.881" endtime="20201103 12:25:18.894"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.902" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:18.899" endtime="20201103 12:25:18.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:18.906" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:18.904" endtime="20201103 12:25:18.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:18.895" endtime="20201103 12:25:18.908"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:18.921" endtime="20201103 12:25:19.235"></status>
</kw>
<msg timestamp="20201103 12:25:19.237" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068705042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168398889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:18.918" endtime="20201103 12:25:19.238"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.245" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068705042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168398889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:19.238" endtime="20201103 12:25:19.245"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.246" endtime="20201103 12:25:19.248"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:18.913" endtime="20201103 12:25:19.248"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:18.909" endtime="20201103 12:25:19.249"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:19.253" level="INFO">${FILTERED} = [{'time': 1.168398889, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09969384700000017, 'source_diff': 0.09969384700000017}, {'time': 1.268090903, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:19.249" endtime="20201103 12:25:19.253"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:19.266" level="INFO">${RESULT} = {'time': [1.168398889, 1.268090903, 1.367819597, 1.467538278, 1.567202111, 1.666911819, 1.766615139, 1.866309347, 1.966000944, 2.065685389, 2.165376208, 2.265071194, 2.364754944, 2.464439111, 2.564111...</msg>
<status status="PASS" starttime="20201103 12:25:19.253" endtime="20201103 12:25:19.266"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.270" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:19.269" endtime="20201103 12:25:19.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.273" level="INFO">VALUE: [0.09969384700000017, 0.09969118100000007, 0.09972791599999997, 0.099717834, 0.09966300000000006, 0.09970887500000014, 0.09970248599999998, 0.09969337499999997, 0.0996907629999999, 0.09968362499999994, 0.09968998600000001, 0.09969415200000009, 0.0996829159999999, 0.09968333299999976, 0.09967140299999988, 0.0996901659999998, 0.09973212500000006, 0.09972515299999962, 0.09969784699999984, 0.09966401400000002, 0.09971697199999996, 0.09970727699999982, 0.09971084699999988, 0.09971784799999961, 0.09966336100000017, 0.0996774450000002, 0.09967773599999985, 0.09967667999999996, 0.09968693000000028, 0.09965507000000029, 0.09971677800000034, 0.09969906999999978, 0.09971665300000065, 0.09968681999999962, 0.09968280600000057, 0.09969433299999952, 0.09969911099999962, 0.09970331899999962, 0.09968132000000018, 0.09968158299999974, 0.09969580500000053, 0.09970627700000012, 0.09972662499999974, 0.09971551399999967, 0.09967936199999983, 0.09968804200000037, 0.09969265299999996, 0.09971995800000055, 0.09972338900000022, 0.0996890420000005]</msg>
<status status="PASS" starttime="20201103 12:25:19.271" endtime="20201103 12:25:19.273"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.267" endtime="20201103 12:25:19.274"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.276" endtime="20201103 12:25:19.277"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:19.279" endtime="20201103 12:25:19.299"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.278" endtime="20201103 12:25:19.299"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.274" endtime="20201103 12:25:19.300"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.832" endtime="20201103 12:25:19.300"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:11.755" endtime="20201103 12:25:19.301" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:19.307" endtime="20201103 12:25:19.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.305" endtime="20201103 12:25:19.327"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.340" endtime="20201103 12:25:19.362"></status>
</kw>
<msg timestamp="20201103 12:25:19.363" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.338" endtime="20201103 12:25:19.363"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.365" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.364" endtime="20201103 12:25:19.366"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.368" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:19.366" endtime="20201103 12:25:19.369"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:19.336" endtime="20201103 12:25:19.369"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:19.334" endtime="20201103 12:25:19.370"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.332" endtime="20201103 12:25:19.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:19.374" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:19.373" endtime="20201103 12:25:19.374"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.371" endtime="20201103 12:25:19.374"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.332" endtime="20201103 12:25:19.375"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.331" endtime="20201103 12:25:19.375"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.375" endtime="20201103 12:25:19.377"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.329" endtime="20201103 12:25:19.377"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.328" endtime="20201103 12:25:19.378"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.304" endtime="20201103 12:25:19.378"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.387" endtime="20201103 12:25:26.391"></status>
</kw>
<msg timestamp="20201103 12:25:26.392" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.386" endtime="20201103 12:25:26.392"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.397" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.394" endtime="20201103 12:25:26.398"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.399" endtime="20201103 12:25:26.403"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.382" endtime="20201103 12:25:26.404"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.380" endtime="20201103 12:25:26.405"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:26.410" level="INFO">${RESULT} = {'bg-timer-count': 5, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:26.406" endtime="20201103 12:25:26.410"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.418" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:26.416" endtime="20201103 12:25:26.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.422" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:26.420" endtime="20201103 12:25:26.423"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.411" endtime="20201103 12:25:26.424"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.433" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:26.431" endtime="20201103 12:25:26.434"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.437" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:26.435" endtime="20201103 12:25:26.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.425" endtime="20201103 12:25:26.439"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.447" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:26.445" endtime="20201103 12:25:26.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.451" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:25:26.449" endtime="20201103 12:25:26.452"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.440" endtime="20201103 12:25:26.453"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.466" endtime="20201103 12:25:26.770"></status>
</kw>
<msg timestamp="20201103 12:25:26.773" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068754778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168480014, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:26.463" endtime="20201103 12:25:26.773"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.780" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068754778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168480014, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:26.774" endtime="20201103 12:25:26.781"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.782" endtime="20201103 12:25:26.783"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.457" endtime="20201103 12:25:26.784"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.454" endtime="20201103 12:25:26.784"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:26.788" level="INFO">${FILTERED} = [{'time': 1.168480014, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09972523600000005, 'source_diff': 0.09972523600000005}, {'time': 1.268210944, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:26.785" endtime="20201103 12:25:26.788"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:26.802" level="INFO">${RESULT} = {'time': [1.168480014, 1.268210944, 1.367924056, 1.467624681, 1.567318806, 1.667033194, 1.766725111, 1.866421236, 1.966115097, 2.065798431, 2.165512194, 2.265244931, 2.364953611, 2.464651014, 2.564332...</msg>
<status status="PASS" starttime="20201103 12:25:26.789" endtime="20201103 12:25:26.802"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.806" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:26.805" endtime="20201103 12:25:26.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.809" level="INFO">VALUE: [0.09972523600000005, 0.09973002700000011, 0.09971220900000022, 0.09969979200000001, 0.09969327800000016, 0.09971355500000012, 0.09969112499999988, 0.099695278, 0.0996930410000001, 0.09968251400000017, 0.09971290200000027, 0.0997319029999999, 0.0997078469999999, 0.09969659700000033, 0.09968077800000019, 0.09969933299999978, 0.09968963899999972, 0.09968409699999992, 0.0997055419999997, 0.09968320900000016, 0.09972625000000024, 0.09969308399999965, 0.09970023599999989, 0.09969395900000011, 0.09965897299999993, 0.09969501399999992, 0.09971611099999977, 0.09968962500000034, 0.09969083299999992, 0.09967312499999981, 0.09969640300000027, 0.09970387500000033, 0.09969712499999961, 0.09969772200000016, 0.09965166699999983, 0.09968059700000076, 0.09967288900000071, 0.09968618100000004, 0.09972669499999931, 0.0996780829999997, 0.0996813750000003, 0.09968261099999953, 0.09968667999999958, 0.09971052800000013, 0.09965863899999938, 0.0996996939999999, 0.0997003189999992, 0.0997183469999996, 0.09968926400000022, 0.09964668100000029]</msg>
<status status="PASS" starttime="20201103 12:25:26.807" endtime="20201103 12:25:26.809"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.803" endtime="20201103 12:25:26.809"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.812" endtime="20201103 12:25:26.813"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:26.815" endtime="20201103 12:25:26.834"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.813" endtime="20201103 12:25:26.835"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.810" endtime="20201103 12:25:26.835"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.379" endtime="20201103 12:25:26.836"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:19.302" endtime="20201103 12:25:26.836" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:26.843" endtime="20201103 12:25:26.862"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.841" endtime="20201103 12:25:26.863"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.875" endtime="20201103 12:25:26.898"></status>
</kw>
<msg timestamp="20201103 12:25:26.898" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.874" endtime="20201103 12:25:26.898"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.901" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.899" endtime="20201103 12:25:26.901"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.904" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:26.902" endtime="20201103 12:25:26.904"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:26.871" endtime="20201103 12:25:26.904"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:26.869" endtime="20201103 12:25:26.905"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.868" endtime="20201103 12:25:26.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:26.909" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:26.908" endtime="20201103 12:25:26.910"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.906" endtime="20201103 12:25:26.911"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.867" endtime="20201103 12:25:26.911"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.866" endtime="20201103 12:25:26.911"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.912" endtime="20201103 12:25:26.913"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.865" endtime="20201103 12:25:26.914"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.864" endtime="20201103 12:25:26.914"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.840" endtime="20201103 12:25:26.914"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.922" endtime="20201103 12:25:33.928"></status>
</kw>
<msg timestamp="20201103 12:25:33.929" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.921" endtime="20201103 12:25:33.929"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.934" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:33.931" endtime="20201103 12:25:33.935"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:33.936" endtime="20201103 12:25:33.939"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.918" endtime="20201103 12:25:33.940"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.916" endtime="20201103 12:25:33.941"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:33.946" level="INFO">${RESULT} = {'bg-timer-count': 10, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:33.943" endtime="20201103 12:25:33.951"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.960" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:33.958" endtime="20201103 12:25:33.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.964" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:33.962" endtime="20201103 12:25:33.965"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.953" endtime="20201103 12:25:33.966"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.975" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:33.972" endtime="20201103 12:25:33.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.980" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:33.978" endtime="20201103 12:25:33.981"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.967" endtime="20201103 12:25:33.982"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.990" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:33.988" endtime="20201103 12:25:33.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.994" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:25:33.992" endtime="20201103 12:25:33.995"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.983" endtime="20201103 12:25:33.996"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.009" endtime="20201103 12:25:34.310"></status>
</kw>
<msg timestamp="20201103 12:25:34.312" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068912611, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168627917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:34.006" endtime="20201103 12:25:34.313"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.320" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068912611, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168627917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:34.314" endtime="20201103 12:25:34.320"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.321" endtime="20201103 12:25:34.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.001" endtime="20201103 12:25:34.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.997" endtime="20201103 12:25:34.324"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:34.328" level="INFO">${FILTERED} = [{'time': 1.168627917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099715306, 'source_diff': 0.099715306}, {'time': 1.268333847, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099705096999999...</msg>
<status status="PASS" starttime="20201103 12:25:34.325" endtime="20201103 12:25:34.328"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:34.340" level="INFO">${RESULT} = {'time': [1.168627917, 1.268333847, 1.368040194, 1.467721319, 1.567397514, 1.667101597, 1.7667865, 1.866482958, 1.966223917, 2.0659045, 2.165632611, 2.265354625, 2.365062819, 2.464801833, 2.564512472,...</msg>
<status status="PASS" starttime="20201103 12:25:34.329" endtime="20201103 12:25:34.341"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.345" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:34.344" endtime="20201103 12:25:34.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.347" level="INFO">VALUE: [0.099715306, 0.09970509699999996, 0.09970552700000002, 0.09968029100000009, 0.09967536100000007, 0.09970326399999996, 0.09968405600000008, 0.09969561100000002, 0.0997401389999999, 0.09967976399999978, 0.09972727800000003, 0.09972119400000024, 0.09970736099999966, 0.09973818000000012, 0.09970984700000018, 0.09972772199999991, 0.0996995420000002, 0.09970562500000035, 0.09972825000000007, 0.09968541699999989, 0.09969790300000003, 0.0996947640000001, 0.09973097300000022, 0.09972704200000004, 0.09966206899999985, 0.09970838800000026, 0.09968808299999976, 0.0996798339999998, 0.09970438899999978, 0.09969548599999989, 0.0997346659999998, 0.0997282359999998, 0.09969976400000036, 0.09969031999999967, 0.09965894499999983, 0.09969859699999972, 0.0996926380000005, 0.09968605500000027, 0.09970562499999946, 0.09970042999999951, 0.09973045800000069, 0.09972115199999987, 0.09968524999999939, 0.09968309699999978, 0.09967634699999994, 0.09972279099999959, 0.09971813900000015, 0.09969261100000004, 0.09971997199999993, 0.09966337499999955]</msg>
<status status="PASS" starttime="20201103 12:25:34.346" endtime="20201103 12:25:34.348"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.341" endtime="20201103 12:25:34.348"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.350" endtime="20201103 12:25:34.352"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:34.354" endtime="20201103 12:25:34.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.352" endtime="20201103 12:25:34.374"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.349" endtime="20201103 12:25:34.374"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.915" endtime="20201103 12:25:34.374"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:26.838" endtime="20201103 12:25:34.375" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:34.381" endtime="20201103 12:25:34.401"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.380" endtime="20201103 12:25:34.401"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.414" endtime="20201103 12:25:34.430"></status>
</kw>
<msg timestamp="20201103 12:25:34.431" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.412" endtime="20201103 12:25:34.431"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.433" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.432" endtime="20201103 12:25:34.433"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.436" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:34.434" endtime="20201103 12:25:34.436"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.410" endtime="20201103 12:25:34.437"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.408" endtime="20201103 12:25:34.437"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.406" endtime="20201103 12:25:34.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:34.441" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:34.441" endtime="20201103 12:25:34.442"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.439" endtime="20201103 12:25:34.442"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.406" endtime="20201103 12:25:34.442"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.405" endtime="20201103 12:25:34.442"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.443" endtime="20201103 12:25:34.445"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.404" endtime="20201103 12:25:34.445"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.402" endtime="20201103 12:25:34.445"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.379" endtime="20201103 12:25:34.446"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.454" endtime="20201103 12:25:41.460"></status>
</kw>
<msg timestamp="20201103 12:25:41.461" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.452" endtime="20201103 12:25:41.461"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.466" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.463" endtime="20201103 12:25:41.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.469" endtime="20201103 12:25:41.472"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.450" endtime="20201103 12:25:41.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.448" endtime="20201103 12:25:41.474"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:41.479" level="INFO">${RESULT} = {'bg-timer-count': 15, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:41.476" endtime="20201103 12:25:41.480"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.488" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:41.486" endtime="20201103 12:25:41.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.492" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:41.490" endtime="20201103 12:25:41.493"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.481" endtime="20201103 12:25:41.494"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.502" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:41.500" endtime="20201103 12:25:41.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.506" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:41.504" endtime="20201103 12:25:41.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.495" endtime="20201103 12:25:41.507"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.515" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:41.513" endtime="20201103 12:25:41.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.519" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:25:41.517" endtime="20201103 12:25:41.520"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.509" endtime="20201103 12:25:41.521"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.536" endtime="20201103 12:25:41.843"></status>
</kw>
<msg timestamp="20201103 12:25:41.845" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061546042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161230403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:41.531" endtime="20201103 12:25:41.846"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.853" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061546042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161230403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:41.846" endtime="20201103 12:25:41.853"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.854" endtime="20201103 12:25:41.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.526" endtime="20201103 12:25:41.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.522" endtime="20201103 12:25:41.857"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:41.861" level="INFO">${FILTERED} = [{'time': 1.161230403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099684361, 'source_diff': 0.099684361}, {'time': 1.260917958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099686736, 'sou...</msg>
<status status="PASS" starttime="20201103 12:25:41.857" endtime="20201103 12:25:41.861"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:41.873" level="INFO">${RESULT} = {'time': [1.161230403, 1.260917958, 1.360615292, 1.460312264, 1.559978472, 1.659680694, 1.759373375, 1.859068986, 1.95880075, 2.058504208, 2.158194333, 2.257882611, 2.357584167, 2.457295153, 2.5569528...</msg>
<status status="PASS" starttime="20201103 12:25:41.861" endtime="20201103 12:25:41.874"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.878" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:41.877" endtime="20201103 12:25:41.878"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.880" level="INFO">VALUE: [0.099684361, 0.099686736, 0.09969647300000006, 0.09969616699999984, 0.09966537500000006, 0.09970142999999987, 0.09969190300000008, 0.09969477799999993, 0.09973093100000008, 0.09970268000000004, 0.09968930500000006, 0.099687458, 0.09970073599999996, 0.09971019500000011, 0.09965680600000004, 0.09973166700000036, 0.09971543100000035, 0.09971293000000037, 0.09970070799999986, 0.09966484700000011, 0.09969248599999991, 0.0996910139999998, 0.09970550000000022, 0.09969056900000028, 0.09965273599999991, 0.09970827800000004, 0.09968807000000002, 0.09970402700000003, 0.09972969400000009, 0.09967140200000024, 0.09969397199999985, 0.09969066699999996, 0.0996827360000001, 0.09969623599999977, 0.09967856899999994, 0.09969859700000061, 0.09969720800000026, 0.09969198599999984, 0.09968752800000047, 0.09969623599999977, 0.09973129199999953, 0.09973324999999988, 0.09972115299999995, 0.09969680599999986, 0.09967755499999953, 0.09971347199999947, 0.0997259029999995, 0.09973554100000026, 0.09970833399999979, 0.09970022200000006]</msg>
<status status="PASS" starttime="20201103 12:25:41.879" endtime="20201103 12:25:41.881"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.874" endtime="20201103 12:25:41.881"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.883" endtime="20201103 12:25:41.885"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:41.887" endtime="20201103 12:25:41.906"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.885" endtime="20201103 12:25:41.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.882" endtime="20201103 12:25:41.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.446" endtime="20201103 12:25:41.907"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:34.376" endtime="20201103 12:25:41.908" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:41.914" endtime="20201103 12:25:41.934"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.913" endtime="20201103 12:25:41.934"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.948" endtime="20201103 12:25:41.966"></status>
</kw>
<msg timestamp="20201103 12:25:41.967" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.947" endtime="20201103 12:25:41.967"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.969" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.968" endtime="20201103 12:25:41.969"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.972" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:41.970" endtime="20201103 12:25:41.972"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:41.943" endtime="20201103 12:25:41.973"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:41.941" endtime="20201103 12:25:41.974"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.940" endtime="20201103 12:25:41.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:41.977" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:41.977" endtime="20201103 12:25:41.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.975" endtime="20201103 12:25:41.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.939" endtime="20201103 12:25:41.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.938" endtime="20201103 12:25:41.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.979" endtime="20201103 12:25:41.981"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.937" endtime="20201103 12:25:41.981"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.935" endtime="20201103 12:25:41.982"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.912" endtime="20201103 12:25:41.982"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.990" endtime="20201103 12:25:48.996"></status>
</kw>
<msg timestamp="20201103 12:25:48.997" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.988" endtime="20201103 12:25:48.997"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.002" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:48.999" endtime="20201103 12:25:49.003"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.005" endtime="20201103 12:25:49.008"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.986" endtime="20201103 12:25:49.010"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.984" endtime="20201103 12:25:49.011"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:49.015" level="INFO">${RESULT} = {'bg-timer-count': 20, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:49.012" endtime="20201103 12:25:49.016"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.025" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:49.023" endtime="20201103 12:25:49.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.031" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:49.028" endtime="20201103 12:25:49.031"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.017" endtime="20201103 12:25:49.032"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.040" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:49.038" endtime="20201103 12:25:49.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.043" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:49.042" endtime="20201103 12:25:49.043"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.034" endtime="20201103 12:25:49.044"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.047" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:49.046" endtime="20201103 12:25:49.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.050" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:25:49.048" endtime="20201103 12:25:49.051"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.044" endtime="20201103 12:25:49.051"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.058" endtime="20201103 12:25:49.356"></status>
</kw>
<msg timestamp="20201103 12:25:49.359" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064362639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164074778, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:49.056" endtime="20201103 12:25:49.360"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.367" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064362639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164074778, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:49.361" endtime="20201103 12:25:49.368"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.368" endtime="20201103 12:25:49.370"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.054" endtime="20201103 12:25:49.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.052" endtime="20201103 12:25:49.371"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:49.375" level="INFO">${FILTERED} = [{'time': 1.164074778, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09971213899999998, 'source_diff': 0.09971213899999998}, {'time': 1.263802764, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:49.372" endtime="20201103 12:25:49.375"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:49.391" level="INFO">${RESULT} = {'time': [1.164074778, 1.263802764, 1.363530486, 1.463221903, 1.56289025, 1.662616278, 1.762311153, 1.862003278, 1.961726681, 2.061408069, 2.161124167, 2.260853583, 2.360580333, 2.460289125, 2.5599777...</msg>
<status status="PASS" starttime="20201103 12:25:49.376" endtime="20201103 12:25:49.391"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.395" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:49.394" endtime="20201103 12:25:49.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.397" level="INFO">VALUE: [0.09971213899999998, 0.09972715300000012, 0.09972686099999994, 0.09969058399999997, 0.0996675279999999, 0.09972519499999999, 0.09969404199999987, 0.09969133400000008, 0.099722584, 0.09968055500000017, 0.09971533399999988, 0.09972858299999965, 0.09972591600000014, 0.09970795800000021, 0.09968787499999987, 0.09970391700000025, 0.09969919400000027, 0.0997012220000002, 0.09968252799999977, 0.09966188900000006, 0.09972818100000014, 0.09973215299999971, 0.09969959699999986, 0.09969454099999986, 0.09966130500000014, 0.09971223599999979, 0.09969605599999998, 0.0997179720000001, 0.09972705599999987, 0.09971263900000027, 0.09969772200000016, 0.09968791699999979, 0.09969340299999985, 0.09970033399999956, 0.09967295799999931, 0.09969748599999928, 0.09969187500000043, 0.09969140200000037, 0.09970222199999945, 0.09968065300000006, 0.09974286200000027, 0.09973368100000002, 0.09969555500000027, 0.09969705500000003, 0.09966059699999974, 0.09969472199999974, 0.09969230599999968, 0.09969655600000049, 0.09968920800000003, 0.09966367999999992]</msg>
<status status="PASS" starttime="20201103 12:25:49.396" endtime="20201103 12:25:49.398"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.392" endtime="20201103 12:25:49.399"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.401" endtime="20201103 12:25:49.403"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:49.405" endtime="20201103 12:25:49.424"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.403" endtime="20201103 12:25:49.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.400" endtime="20201103 12:25:49.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.982" endtime="20201103 12:25:49.426"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:41.910" endtime="20201103 12:25:49.426" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:49.433" endtime="20201103 12:25:49.453"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.432" endtime="20201103 12:25:49.453"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.468" endtime="20201103 12:25:49.487"></status>
</kw>
<msg timestamp="20201103 12:25:49.487" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.466" endtime="20201103 12:25:49.488"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.490" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.489" endtime="20201103 12:25:49.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.493" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:49.491" endtime="20201103 12:25:49.494"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:49.463" endtime="20201103 12:25:49.494"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:49.460" endtime="20201103 12:25:49.495"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.459" endtime="20201103 12:25:49.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:49.499" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:49.498" endtime="20201103 12:25:49.499"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.496" endtime="20201103 12:25:49.499"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.458" endtime="20201103 12:25:49.500"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.457" endtime="20201103 12:25:49.500"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.501" endtime="20201103 12:25:49.502"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.456" endtime="20201103 12:25:49.503"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.454" endtime="20201103 12:25:49.503"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.430" endtime="20201103 12:25:49.504"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.512" endtime="20201103 12:25:56.518"></status>
</kw>
<msg timestamp="20201103 12:25:56.520" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.510" endtime="20201103 12:25:56.520"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.525" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:56.522" endtime="20201103 12:25:56.527"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.528" endtime="20201103 12:25:56.532"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.508" endtime="20201103 12:25:56.533"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.506" endtime="20201103 12:25:56.534"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:56.540" level="INFO">${RESULT} = {'bg-timer-count': 25, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:56.536" endtime="20201103 12:25:56.540"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.548" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:56.546" endtime="20201103 12:25:56.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.553" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:56.551" endtime="20201103 12:25:56.554"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.541" endtime="20201103 12:25:56.555"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.563" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:56.561" endtime="20201103 12:25:56.564"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.568" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:56.566" endtime="20201103 12:25:56.569"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.556" endtime="20201103 12:25:56.570"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.574" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:56.573" endtime="20201103 12:25:56.575"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.577" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:25:56.576" endtime="20201103 12:25:56.577"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.570" endtime="20201103 12:25:56.578"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.585" endtime="20201103 12:25:56.883"></status>
</kw>
<msg timestamp="20201103 12:25:56.886" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066827014, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166521583, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:56.583" endtime="20201103 12:25:56.887"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.894" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066827014, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166521583, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:56.888" endtime="20201103 12:25:56.895"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.896" endtime="20201103 12:25:56.897"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.581" endtime="20201103 12:25:56.898"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.579" endtime="20201103 12:25:56.898"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:56.902" level="INFO">${FILTERED} = [{'time': 1.166521583, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09969456899999996, 'source_diff': 0.09969456899999996}, {'time': 1.266217556, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:56.899" endtime="20201103 12:25:56.902"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:56.916" level="INFO">${RESULT} = {'time': [1.166521583, 1.266217556, 1.365913958, 1.465608792, 1.565268278, 1.664980333, 1.764683903, 1.86439525, 1.964124708, 2.063823375, 2.163535444, 2.263227389, 2.362923986, 2.462632597, 2.5623396...</msg>
<status status="PASS" starttime="20201103 12:25:56.903" endtime="20201103 12:25:56.916"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.921" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:56.919" endtime="20201103 12:25:56.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.923" level="INFO">VALUE: [0.09969456899999996, 0.09969515299999987, 0.09969558299999992, 0.09969399999999995, 0.0996586530000001, 0.09971116599999985, 0.09970276400000011, 0.09971051400000008, 0.09972862500000002, 0.09969783300000024, 0.09971123599999965, 0.09969111099999983, 0.09969575000000042, 0.0997077639999997, 0.09970624999999966, 0.09973719399999981, 0.09970045800000005, 0.09971605500000003, 0.0997325560000002, 0.09968118100000023, 0.09971956900000034, 0.09970094500000037, 0.09970623599999984, 0.0996921249999998, 0.0996625550000001, 0.09969765199999969, 0.09969325000000007, 0.09969773599999998, 0.09970044499999986, 0.0997099170000002, 0.09972512499999997, 0.09970444499999953, 0.09973918100000034, 0.09974751400000059, 0.09971609800000003, 0.09974173600000036, 0.09971079199999977, 0.09973766700000031, 0.09972312500000058, 0.09965637499999946, 0.09971557000000075, 0.09973037500000004, 0.09973547199999988, 0.09969518000000033, 0.09967094400000054, 0.09972479099999987, 0.09973168000000054, 0.09969397199999985, 0.09968829200000062, 0.09967740300000028]</msg>
<status status="PASS" starttime="20201103 12:25:56.922" endtime="20201103 12:25:56.924"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.917" endtime="20201103 12:25:56.924"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.927" endtime="20201103 12:25:56.928"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:56.930" endtime="20201103 12:25:56.950"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.929" endtime="20201103 12:25:56.950"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.925" endtime="20201103 12:25:56.951"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.504" endtime="20201103 12:25:56.951"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:49.428" endtime="20201103 12:25:56.952" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:10.244" endtime="20201103 12:25:56.959"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">frdm-kw41z</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:08.002" endtime="20201103 12:25:56.985"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_frdm-kw41z</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
