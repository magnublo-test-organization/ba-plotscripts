<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:35:22.616" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:23.198" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:23.206" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:24.326" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:23.197" endtime="20201103 12:35:24.327"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.329" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:24.328" endtime="20201103 12:35:24.329"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:23.195" endtime="20201103 12:35:24.330"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:24.332" endtime="20201103 12:35:24.521"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.331" endtime="20201103 12:35:24.522"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.548" endtime="20201103 12:35:24.570"></status>
</kw>
<msg timestamp="20201103 12:35:24.571" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.545" endtime="20201103 12:35:24.572"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.577" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.574" endtime="20201103 12:35:24.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.583" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:24.579" endtime="20201103 12:35:24.584"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.540" endtime="20201103 12:35:24.585"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.535" endtime="20201103 12:35:24.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.533" endtime="20201103 12:35:24.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:24.596" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:24.595" endtime="20201103 12:35:24.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.589" endtime="20201103 12:35:24.598"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.531" endtime="20201103 12:35:24.598"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.530" endtime="20201103 12:35:24.599"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.600" endtime="20201103 12:35:24.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.527" endtime="20201103 12:35:24.604"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.606" endtime="20201103 12:35:24.609"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.524" endtime="20201103 12:35:24.610"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:23.194" endtime="20201103 12:35:24.611"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:24.622" endtime="20201103 12:35:24.642"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.620" endtime="20201103 12:35:24.642"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.656" endtime="20201103 12:35:24.673"></status>
</kw>
<msg timestamp="20201103 12:35:24.673" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.655" endtime="20201103 12:35:24.673"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.676" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.674" endtime="20201103 12:35:24.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.679" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:24.677" endtime="20201103 12:35:24.679"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.652" endtime="20201103 12:35:24.680"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.650" endtime="20201103 12:35:24.680"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.648" endtime="20201103 12:35:24.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:24.684" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:24.684" endtime="20201103 12:35:24.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.681" endtime="20201103 12:35:24.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.647" endtime="20201103 12:35:24.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.647" endtime="20201103 12:35:24.685"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.686" endtime="20201103 12:35:24.687"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.644" endtime="20201103 12:35:24.688"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.643" endtime="20201103 12:35:24.688"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.617" endtime="20201103 12:35:24.688"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.696" endtime="20201103 12:35:24.710"></status>
</kw>
<msg timestamp="20201103 12:35:24.711" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.694" endtime="20201103 12:35:24.711"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.713" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.712" endtime="20201103 12:35:24.713"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.714" endtime="20201103 12:35:24.716"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.691" endtime="20201103 12:35:24.716"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.689" endtime="20201103 12:35:24.717"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.721" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:35:24.719" endtime="20201103 12:35:24.721"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.722" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:35:24.722" endtime="20201103 12:35:24.723"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.717" endtime="20201103 12:35:24.723"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:24.611" endtime="20201103 12:35:24.724" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:22.741" endtime="20201103 12:35:24.726"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.775" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:24.784" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:25.897" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:24.774" endtime="20201103 12:35:25.897"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:25.900" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:25.898" endtime="20201103 12:35:25.900"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.773" endtime="20201103 12:35:25.901"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:25.903" endtime="20201103 12:35:26.179"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.901" endtime="20201103 12:35:26.179"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.191" endtime="20201103 12:35:26.209"></status>
</kw>
<msg timestamp="20201103 12:35:26.210" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': [' (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.190" endtime="20201103 12:35:26.210"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.212" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': [' (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.211" endtime="20201103 12:35:26.213"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.216" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:26.214" endtime="20201103 12:35:26.216"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.187" endtime="20201103 12:35:26.216"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.185" endtime="20201103 12:35:26.217"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.184" endtime="20201103 12:35:26.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:26.221" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:26.220" endtime="20201103 12:35:26.221"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.218" endtime="20201103 12:35:26.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.183" endtime="20201103 12:35:26.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.183" endtime="20201103 12:35:26.222"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.223" endtime="20201103 12:35:26.224"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.182" endtime="20201103 12:35:26.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.225" endtime="20201103 12:35:26.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.180" endtime="20201103 12:35:26.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.772" endtime="20201103 12:35:26.228"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:26.234" endtime="20201103 12:35:26.254"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.232" endtime="20201103 12:35:26.254"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.267" endtime="20201103 12:35:26.285"></status>
</kw>
<msg timestamp="20201103 12:35:26.286" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.266" endtime="20201103 12:35:26.286"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.288" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.287" endtime="20201103 12:35:26.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.291" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:26.289" endtime="20201103 12:35:26.291"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.263" endtime="20201103 12:35:26.292"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.261" endtime="20201103 12:35:26.293"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.259" endtime="20201103 12:35:26.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:26.296" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:26.296" endtime="20201103 12:35:26.297"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.294" endtime="20201103 12:35:26.297"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.258" endtime="20201103 12:35:26.297"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.258" endtime="20201103 12:35:26.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.298" endtime="20201103 12:35:26.300"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.257" endtime="20201103 12:35:26.300"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.255" endtime="20201103 12:35:26.301"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.231" endtime="20201103 12:35:26.301"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.309" endtime="20201103 12:35:33.333"></status>
</kw>
<msg timestamp="20201103 12:35:33.334" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.307" endtime="20201103 12:35:33.334"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.339" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.336" endtime="20201103 12:35:33.340"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.341" endtime="20201103 12:35:33.347"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.305" endtime="20201103 12:35:33.348"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.303" endtime="20201103 12:35:33.349"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:33.354" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 0, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:33.351" endtime="20201103 12:35:33.355"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.363" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:33.361" endtime="20201103 12:35:33.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.367" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:33.365" endtime="20201103 12:35:33.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.356" endtime="20201103 12:35:33.369"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.377" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:33.375" endtime="20201103 12:35:33.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.381" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:33.379" endtime="20201103 12:35:33.382"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.370" endtime="20201103 12:35:33.383"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.392" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:33.389" endtime="20201103 12:35:33.393"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.396" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:35:33.394" endtime="20201103 12:35:33.397"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.384" endtime="20201103 12:35:33.398"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.412" endtime="20201103 12:35:33.716"></status>
</kw>
<msg timestamp="20201103 12:35:33.719" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065981431, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165953292, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:33.408" endtime="20201103 12:35:33.719"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.726" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065981431, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165953292, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:33.720" endtime="20201103 12:35:33.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.728" endtime="20201103 12:35:33.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.403" endtime="20201103 12:35:33.730"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.399" endtime="20201103 12:35:33.730"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:33.734" level="INFO">${FILTERED} = [{'time': 1.165953292, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099971861, 'source_diff': 0.099971861}, {'time': 1.265925778, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099971652999999...</msg>
<status status="PASS" starttime="20201103 12:35:33.731" endtime="20201103 12:35:33.734"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:33.747" level="INFO">${RESULT} = {'source_diff': [0.099971861, 0.09997165299999988, 0.09997161099999996, 0.09997152700000012, 0.09997176399999996, 0.09997154099999994, 0.09997154200000002, 0.09997172199999982, 0.09997154200000002, 0....</msg>
<status status="PASS" starttime="20201103 12:35:33.735" endtime="20201103 12:35:33.748"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.752" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:33.751" endtime="20201103 12:35:33.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.754" level="INFO">VALUE: [0.099971861, 0.09997165299999988, 0.09997161099999996, 0.09997152700000012, 0.09997176399999996, 0.09997154099999994, 0.09997154200000002, 0.09997172199999982, 0.09997154200000002, 0.09997161099999974, 0.09997158299999986, 0.09997165299999988, 0.09997155599999985, 0.09997174999999991, 0.09997157000000012, 0.09997158399999995, 0.09997155500000021, 0.09997162499999979, 0.09997154200000002, 0.09997158399999995, 0.09997162499999979, 0.09997154200000002, 0.09997162499999979, 0.09997154100000039, 0.09997159700000013, 0.09997168099999998, 0.09997155599999985, 0.09997158299999986, 0.09997161099999996, 0.09997163899999961, 0.0999715280000002, 0.09997157000000012, 0.09997161099999996, 0.09997162500000023, 0.09997159699999969, 0.09997161200000004, 0.09997165299999988, 0.09997161099999996, 0.0999715280000002, 0.09997166700000015, 0.09997158299999942, 0.09997159699999969, 0.09997163899999961, 0.09997161099999996, 0.09997156900000004, 0.0999715409999995, 0.09997166600000007, 0.09997158300000031, 0.09997157000000012, 0.09997166700000015]</msg>
<status status="PASS" starttime="20201103 12:35:33.753" endtime="20201103 12:35:33.755"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.748" endtime="20201103 12:35:33.755"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.758" endtime="20201103 12:35:33.759"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:33.761" endtime="20201103 12:35:33.780"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.759" endtime="20201103 12:35:33.781"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.756" endtime="20201103 12:35:33.781"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.302" endtime="20201103 12:35:33.782"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:26.228" endtime="20201103 12:35:33.782" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:33.788" endtime="20201103 12:35:33.808"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.787" endtime="20201103 12:35:33.808"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.822" endtime="20201103 12:35:33.842"></status>
</kw>
<msg timestamp="20201103 12:35:33.842" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.820" endtime="20201103 12:35:33.842"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.845" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.843" endtime="20201103 12:35:33.845"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.847" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:33.846" endtime="20201103 12:35:33.848"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:33.818" endtime="20201103 12:35:33.848"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:33.815" endtime="20201103 12:35:33.849"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.814" endtime="20201103 12:35:33.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:33.853" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:33.852" endtime="20201103 12:35:33.853"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.850" endtime="20201103 12:35:33.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.813" endtime="20201103 12:35:33.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.812" endtime="20201103 12:35:33.854"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.855" endtime="20201103 12:35:33.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.811" endtime="20201103 12:35:33.857"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.809" endtime="20201103 12:35:33.857"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.786" endtime="20201103 12:35:33.857"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.866" endtime="20201103 12:35:40.888"></status>
</kw>
<msg timestamp="20201103 12:35:40.889" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.865" endtime="20201103 12:35:40.890"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.895" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:40.892" endtime="20201103 12:35:40.895"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:40.897" endtime="20201103 12:35:40.900"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.861" endtime="20201103 12:35:40.901"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.859" endtime="20201103 12:35:40.902"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:40.907" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 5, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:40.904" endtime="20201103 12:35:40.908"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.915" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:40.913" endtime="20201103 12:35:40.916"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.920" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:40.918" endtime="20201103 12:35:40.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.909" endtime="20201103 12:35:40.921"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.930" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:40.928" endtime="20201103 12:35:40.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.934" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:40.932" endtime="20201103 12:35:40.935"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.923" endtime="20201103 12:35:40.936"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.944" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:40.942" endtime="20201103 12:35:40.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.946" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:35:40.945" endtime="20201103 12:35:40.946"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.937" endtime="20201103 12:35:40.947"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:40.953" endtime="20201103 12:35:41.247"></status>
</kw>
<msg timestamp="20201103 12:35:41.250" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067889889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167861917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:40.952" endtime="20201103 12:35:41.250"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.258" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067889889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167861917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:41.251" endtime="20201103 12:35:41.258"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.259" endtime="20201103 12:35:41.260"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.949" endtime="20201103 12:35:41.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.947" endtime="20201103 12:35:41.261"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:41.265" level="INFO">${FILTERED} = [{'time': 1.167861917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09997202800000005, 'source_diff': 0.09997202800000005}, {'time': 1.267834319, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:41.262" endtime="20201103 12:35:41.265"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:41.280" level="INFO">${RESULT} = {'source_diff': [0.09997202800000005, 0.09997162500000001, 0.09997156900000004, 0.09997161099999996, 0.09997166699999993, 0.09997155599999985, 0.09997155499999999, 0.09997168000000012, 0.0999715829999...</msg>
<status status="PASS" starttime="20201103 12:35:41.266" endtime="20201103 12:35:41.280"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.284" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:41.283" endtime="20201103 12:35:41.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.286" level="INFO">VALUE: [0.09997202800000005, 0.09997162500000001, 0.09997156900000004, 0.09997161099999996, 0.09997166699999993, 0.09997155599999985, 0.09997155499999999, 0.09997168000000012, 0.09997158299999986, 0.09997158400000017, 0.09997159700000013, 0.09997163900000006, 0.09997155500000021, 0.09997162500000023, 0.09997161099999996, 0.09997159800000022, 0.09997162499999979, 0.09997158400000039, 0.09997159700000013, 0.09997156900000004, 0.09997161099999996, 0.09997162500000023, 0.09997161099999996, 0.09997158299999986, 0.09997158399999995, 0.09997163900000006, 0.0999715560000003, 0.09997166700000015, 0.09997161099999996, 0.09997155500000021, 0.09997154200000047, 0.09997168100000042, 0.09997154199999958, 0.09997162500000023, 0.09997159699999969, 0.09997161099999996, 0.09997157000000012, 0.09997163899999961, 0.0999716390000005, 0.09997155599999985, 0.0999716390000005, 0.09997158299999942, 0.09997156900000004, 0.09997162499999934, 0.09997161099999996, 0.0999716519999998, 0.09997156900000004, 0.0999716519999998, 0.09997150000000055, 0.09997162499999934]</msg>
<status status="PASS" starttime="20201103 12:35:41.285" endtime="20201103 12:35:41.286"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.280" endtime="20201103 12:35:41.287"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.289" endtime="20201103 12:35:41.290"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:41.293" endtime="20201103 12:35:41.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.291" endtime="20201103 12:35:41.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.287" endtime="20201103 12:35:41.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.858" endtime="20201103 12:35:41.313"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:33.784" endtime="20201103 12:35:41.314" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:41.321" endtime="20201103 12:35:41.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.319" endtime="20201103 12:35:41.341"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.354" endtime="20201103 12:35:41.372"></status>
</kw>
<msg timestamp="20201103 12:35:41.373" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:41.352" endtime="20201103 12:35:41.373"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.375" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:41.374" endtime="20201103 12:35:41.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.378" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:41.376" endtime="20201103 12:35:41.379"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:41.350" endtime="20201103 12:35:41.379"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:41.347" endtime="20201103 12:35:41.380"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.346" endtime="20201103 12:35:41.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:41.384" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:41.383" endtime="20201103 12:35:41.385"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.381" endtime="20201103 12:35:41.385"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.345" endtime="20201103 12:35:41.386"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.345" endtime="20201103 12:35:41.386"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.386" endtime="20201103 12:35:41.388"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.343" endtime="20201103 12:35:41.389"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.342" endtime="20201103 12:35:41.389"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.318" endtime="20201103 12:35:41.389"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.397" endtime="20201103 12:35:48.423"></status>
</kw>
<msg timestamp="20201103 12:35:48.424" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:41.396" endtime="20201103 12:35:48.425"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.430" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.426" endtime="20201103 12:35:48.430"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.432" endtime="20201103 12:35:48.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.393" endtime="20201103 12:35:48.436"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.391" endtime="20201103 12:35:48.437"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:48.442" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 10, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:48.439" endtime="20201103 12:35:48.443"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.451" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:48.449" endtime="20201103 12:35:48.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.455" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:48.454" endtime="20201103 12:35:48.456"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.444" endtime="20201103 12:35:48.457"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.465" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:48.463" endtime="20201103 12:35:48.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.469" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:48.467" endtime="20201103 12:35:48.470"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.458" endtime="20201103 12:35:48.471"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.479" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:48.477" endtime="20201103 12:35:48.480"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.483" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:35:48.481" endtime="20201103 12:35:48.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.472" endtime="20201103 12:35:48.485"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.498" endtime="20201103 12:35:48.805"></status>
</kw>
<msg timestamp="20201103 12:35:48.808" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066811306, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166752722, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:48.495" endtime="20201103 12:35:48.808"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.816" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066811306, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166752722, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:48.809" endtime="20201103 12:35:48.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.817" endtime="20201103 12:35:48.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.490" endtime="20201103 12:35:48.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.486" endtime="20201103 12:35:48.820"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:48.823" level="INFO">${FILTERED} = [{'time': 1.166752722, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09994141600000006, 'source_diff': 0.09994141600000006}, {'time': 1.266725139, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:48.820" endtime="20201103 12:35:48.824"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:48.836" level="INFO">${RESULT} = {'source_diff': [0.09994141600000006, 0.09997159700000013, 0.09997151399999993, 0.09997161099999996, 0.09997159700000013, 0.09997161100000018, 0.09997166699999993, 0.09997154200000002, 0.0999716530000...</msg>
<status status="PASS" starttime="20201103 12:35:48.824" endtime="20201103 12:35:48.836"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.840" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:48.839" endtime="20201103 12:35:48.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.843" level="INFO">VALUE: [0.09994141600000006, 0.09997159700000013, 0.09997151399999993, 0.09997161099999996, 0.09997159700000013, 0.09997161100000018, 0.09997166699999993, 0.09997154200000002, 0.0999716530000001, 0.09997148600000005, 0.09997165299999988, 0.09997152700000012, 0.09997162499999979, 0.09997159700000013, 0.09997161099999996, 0.09997158299999986, 0.09997162500000023, 0.09997163900000006, 0.0999715560000003, 0.09997158299999986, 0.09997162500000023, 0.09997154099999994, 0.09997158399999995, 0.09997151400000037, 0.09997162499999979, 0.09997169400000017, 0.09997163900000006, 0.09997159700000013, 0.09997163799999997, 0.0999715689999996, 0.09997156900000004, 0.09997158299999942, 0.09997159800000066, 0.09997155500000066, 0.09997158300000031, 0.09997163899999961, 0.09997169399999972, 0.0999715280000002, 0.0999716950000007, 0.09997161099999996, 0.09997159799999977, 0.09997157000000012, 0.09997159699999969, 0.09997157000000012, 0.09997162500000023, 0.09997161099999996, 0.09997161099999996, 0.09997155599999985, 0.09997158300000031, 0.09997161099999996]</msg>
<status status="PASS" starttime="20201103 12:35:48.841" endtime="20201103 12:35:48.843"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.837" endtime="20201103 12:35:48.844"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.846" endtime="20201103 12:35:48.847"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:48.850" endtime="20201103 12:35:48.869"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.848" endtime="20201103 12:35:48.870"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.845" endtime="20201103 12:35:48.870"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.390" endtime="20201103 12:35:48.870"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:41.316" endtime="20201103 12:35:48.871" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:48.877" endtime="20201103 12:35:48.897"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.876" endtime="20201103 12:35:48.897"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.910" endtime="20201103 12:35:48.928"></status>
</kw>
<msg timestamp="20201103 12:35:48.929" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.908" endtime="20201103 12:35:48.929"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.931" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.930" endtime="20201103 12:35:48.932"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.934" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:48.932" endtime="20201103 12:35:48.935"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:48.906" endtime="20201103 12:35:48.935"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:48.904" endtime="20201103 12:35:48.936"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.902" endtime="20201103 12:35:48.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:48.940" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:48.939" endtime="20201103 12:35:48.940"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.937" endtime="20201103 12:35:48.940"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.902" endtime="20201103 12:35:48.940"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.901" endtime="20201103 12:35:48.941"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.941" endtime="20201103 12:35:48.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.900" endtime="20201103 12:35:48.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.898" endtime="20201103 12:35:48.944"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.875" endtime="20201103 12:35:48.944"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.952" endtime="20201103 12:35:55.980"></status>
</kw>
<msg timestamp="20201103 12:35:55.981" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.950" endtime="20201103 12:35:55.981"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.986" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:55.983" endtime="20201103 12:35:55.987"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.989" endtime="20201103 12:35:55.992"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.948" endtime="20201103 12:35:55.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.946" endtime="20201103 12:35:55.994"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:55.999" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 15, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:55.996" endtime="20201103 12:35:56.000"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.011" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:56.006" endtime="20201103 12:35:56.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.021" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:56.017" endtime="20201103 12:35:56.023"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.001" endtime="20201103 12:35:56.025"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.038" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:56.036" endtime="20201103 12:35:56.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.045" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:56.042" endtime="20201103 12:35:56.047"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.028" endtime="20201103 12:35:56.049"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.058" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:56.055" endtime="20201103 12:35:56.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.062" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:35:56.060" endtime="20201103 12:35:56.063"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.051" endtime="20201103 12:35:56.064"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.079" endtime="20201103 12:35:56.373"></status>
</kw>
<msg timestamp="20201103 12:35:56.376" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066492097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166464, 'source': 'DUT_IC', 'event': 'FALLIN...</msg>
<status status="PASS" starttime="20201103 12:35:56.074" endtime="20201103 12:35:56.376"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.384" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066492097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166464, 'source': 'DUT_IC', 'event': 'FALLIN...</msg>
<status status="PASS" starttime="20201103 12:35:56.377" endtime="20201103 12:35:56.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.385" endtime="20201103 12:35:56.387"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.068" endtime="20201103 12:35:56.387"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.065" endtime="20201103 12:35:56.388"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:56.392" level="INFO">${FILTERED} = [{'time': 1.166464, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09997190299999992, 'source_diff': 0.09997190299999992}, {'time': 1.266436417, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09...</msg>
<status status="PASS" starttime="20201103 12:35:56.388" endtime="20201103 12:35:56.392"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:56.404" level="INFO">${RESULT} = {'source_diff': [0.09997190299999992, 0.09997158399999995, 0.09997161099999996, 0.09997162500000001, 0.09997154200000002, 0.099971598, 0.09997159699999991, 0.09997154100000016, 0.09997166600000007, 0....</msg>
<status status="PASS" starttime="20201103 12:35:56.393" endtime="20201103 12:35:56.405"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.409" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:56.408" endtime="20201103 12:35:56.409"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.411" level="INFO">VALUE: [0.09997190299999992, 0.09997158399999995, 0.09997161099999996, 0.09997162500000001, 0.09997154200000002, 0.099971598, 0.09997159699999991, 0.09997154100000016, 0.09997166600000007, 0.09997158300000009, 0.09997157000000012, 0.09997159700000013, 0.09997157000000012, 0.09997159699999969, 0.09997155599999985, 0.09997155500000021, 0.09997159700000013, 0.09997161099999996, 0.09997161099999996, 0.099971472, 0.09997166700000015, 0.09997158399999995, 0.09997163900000006, 0.09997155599999985, 0.09997166700000015, 0.09997161099999996, 0.09997161099999996, 0.09997163900000006, 0.09997151399999993, 0.0999715689999996, 0.09997165299999988, 0.09997161200000004, 0.09997162500000023, 0.09997155599999985, 0.09997158300000031, 0.09997159699999969, 0.0999716390000005, 0.09997155499999977, 0.09997157000000012, 0.09997159699999969, 0.09997163899999961, 0.09997163899999961, 0.09997154199999958, 0.0999716390000005, 0.09997158400000039, 0.09997165299999988, 0.0999716519999998, 0.09997156900000004, 0.09997162500000023, 0.09997165299999988]</msg>
<status status="PASS" starttime="20201103 12:35:56.410" endtime="20201103 12:35:56.412"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.405" endtime="20201103 12:35:56.412"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.414" endtime="20201103 12:35:56.416"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:56.418" endtime="20201103 12:35:56.437"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.416" endtime="20201103 12:35:56.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.413" endtime="20201103 12:35:56.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.945" endtime="20201103 12:35:56.439"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:48.872" endtime="20201103 12:35:56.439" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:56.446" endtime="20201103 12:35:56.465"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.444" endtime="20201103 12:35:56.466"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.479" endtime="20201103 12:35:56.494"></status>
</kw>
<msg timestamp="20201103 12:35:56.495" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:56.478" endtime="20201103 12:35:56.495"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.497" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:56.496" endtime="20201103 12:35:56.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.500" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:56.498" endtime="20201103 12:35:56.500"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:56.474" endtime="20201103 12:35:56.501"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:56.472" endtime="20201103 12:35:56.502"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.471" endtime="20201103 12:35:56.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:56.505" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:56.505" endtime="20201103 12:35:56.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.503" endtime="20201103 12:35:56.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.470" endtime="20201103 12:35:56.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.469" endtime="20201103 12:35:56.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.507" endtime="20201103 12:35:56.509"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.468" endtime="20201103 12:35:56.509"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.466" endtime="20201103 12:35:56.510"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.443" endtime="20201103 12:35:56.510"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.518" endtime="20201103 12:36:03.545"></status>
</kw>
<msg timestamp="20201103 12:36:03.547" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:56.516" endtime="20201103 12:36:03.548"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.553" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:03.550" endtime="20201103 12:36:03.554"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.556" endtime="20201103 12:36:03.559"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.514" endtime="20201103 12:36:03.560"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.512" endtime="20201103 12:36:03.561"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:03.567" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 20, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:03.562" endtime="20201103 12:36:03.568"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.577" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:03.575" endtime="20201103 12:36:03.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.582" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:03.580" endtime="20201103 12:36:03.583"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.569" endtime="20201103 12:36:03.584"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.592" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:03.590" endtime="20201103 12:36:03.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.596" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:03.594" endtime="20201103 12:36:03.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.585" endtime="20201103 12:36:03.598"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.605" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:03.603" endtime="20201103 12:36:03.606"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.612" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:36:03.608" endtime="20201103 12:36:03.612"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.599" endtime="20201103 12:36:03.613"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.627" endtime="20201103 12:36:03.929"></status>
</kw>
<msg timestamp="20201103 12:36:03.932" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064492847, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164464806, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:03.624" endtime="20201103 12:36:03.932"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.939" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064492847, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164464806, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:03.933" endtime="20201103 12:36:03.940"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.940" endtime="20201103 12:36:03.942"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.618" endtime="20201103 12:36:03.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.615" endtime="20201103 12:36:03.943"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:03.948" level="INFO">${FILTERED} = [{'time': 1.164464806, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09997195900000011, 'source_diff': 0.09997195900000011}, {'time': 1.264437278, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:03.944" endtime="20201103 12:36:03.948"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:03.963" level="INFO">${RESULT} = {'source_diff': [0.09997195900000011, 0.09997163899999983, 0.09997157000000012, 0.09997154200000002, 0.09997158300000009, 0.09997162500000001, 0.099971598, 0.09997158300000009, 0.09997163799999997, 0....</msg>
<status status="PASS" starttime="20201103 12:36:03.949" endtime="20201103 12:36:03.963"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.967" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:03.966" endtime="20201103 12:36:03.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.969" level="INFO">VALUE: [0.09997195900000011, 0.09997163899999983, 0.09997157000000012, 0.09997154200000002, 0.09997158300000009, 0.09997162500000001, 0.099971598, 0.09997158300000009, 0.09997163799999997, 0.09997155499999977, 0.0999716119999996, 0.09997163900000006, 0.09997157000000012, 0.09997163900000006, 0.0999716519999998, 0.0999715280000002, 0.09997158399999995, 0.09997159699999969, 0.09997155599999985, 0.09997156900000004, 0.09997156999999968, 0.09997165299999988, 0.09997162500000023, 0.09997155599999985, 0.09997156900000004, 0.0999716799999999, 0.09997163799999997, 0.09997154099999994, 0.09997163900000006, 0.09997158299999986, 0.09997162500000023, 0.09997165300000077, 0.09997159799999977, 0.09997156900000004, 0.09997159699999969, 0.09997165299999988, 0.09997150000000055, 0.09997166699999926, 0.09997159799999977, 0.09997155499999977, 0.09997161099999996, 0.09997159799999977, 0.09997158299999942, 0.09997166600000007, 0.09997162500000023, 0.09997155499999977, 0.09997161200000004, 0.09997162500000023, 0.09997148599999939, 0.09997169399999972]</msg>
<status status="PASS" starttime="20201103 12:36:03.968" endtime="20201103 12:36:03.970"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.964" endtime="20201103 12:36:03.971"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.973" endtime="20201103 12:36:03.974"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:03.976" endtime="20201103 12:36:03.995"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.975" endtime="20201103 12:36:03.996"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.971" endtime="20201103 12:36:03.996"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.511" endtime="20201103 12:36:03.997"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:56.441" endtime="20201103 12:36:03.997" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:04.004" endtime="20201103 12:36:04.023"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.003" endtime="20201103 12:36:04.024"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.037" endtime="20201103 12:36:04.056"></status>
</kw>
<msg timestamp="20201103 12:36:04.057" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.036" endtime="20201103 12:36:04.057"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.059" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.058" endtime="20201103 12:36:04.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.062" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:04.060" endtime="20201103 12:36:04.063"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:04.033" endtime="20201103 12:36:04.063"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:04.030" endtime="20201103 12:36:04.064"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.029" endtime="20201103 12:36:04.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:04.068" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:04.067" endtime="20201103 12:36:04.068"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.065" endtime="20201103 12:36:04.068"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.028" endtime="20201103 12:36:04.068"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.028" endtime="20201103 12:36:04.068"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.069" endtime="20201103 12:36:04.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.026" endtime="20201103 12:36:04.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.025" endtime="20201103 12:36:04.072"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.001" endtime="20201103 12:36:04.072"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.080" endtime="20201103 12:36:11.106"></status>
</kw>
<msg timestamp="20201103 12:36:11.107" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.078" endtime="20201103 12:36:11.107"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.112" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:11.109" endtime="20201103 12:36:11.113"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:11.115" endtime="20201103 12:36:11.118"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.076" endtime="20201103 12:36:11.119"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.074" endtime="20201103 12:36:11.120"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:11.125" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 25, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:11.122" endtime="20201103 12:36:11.125"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.133" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:11.131" endtime="20201103 12:36:11.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.137" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:11.136" endtime="20201103 12:36:11.138"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.127" endtime="20201103 12:36:11.139"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.147" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:11.145" endtime="20201103 12:36:11.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.151" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:11.149" endtime="20201103 12:36:11.152"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.141" endtime="20201103 12:36:11.153"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.161" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:11.159" endtime="20201103 12:36:11.162"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.164" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:36:11.163" endtime="20201103 12:36:11.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.154" endtime="20201103 12:36:11.165"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:11.171" endtime="20201103 12:36:11.470"></status>
</kw>
<msg timestamp="20201103 12:36:11.473" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067346931, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167319028, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:11.170" endtime="20201103 12:36:11.473"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.480" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067346931, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.167319028, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:11.474" endtime="20201103 12:36:11.481"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:11.481" endtime="20201103 12:36:11.483"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.167" endtime="20201103 12:36:11.483"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.165" endtime="20201103 12:36:11.484"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:11.488" level="INFO">${FILTERED} = [{'time': 1.167319028, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09997209699999998, 'source_diff': 0.09997209699999998}, {'time': 1.267291403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:11.485" endtime="20201103 12:36:11.488"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:11.501" level="INFO">${RESULT} = {'source_diff': [0.09997209699999998, 0.09997154200000002, 0.09997161099999996, 0.099971598, 0.09997162500000001, 0.09997155600000007, 0.0999716530000001, 0.09997157000000012, 0.09997154200000002, 0.0...</msg>
<status status="PASS" starttime="20201103 12:36:11.489" endtime="20201103 12:36:11.501"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.505" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:11.504" endtime="20201103 12:36:11.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.507" level="INFO">VALUE: [0.09997209699999998, 0.09997154200000002, 0.09997161099999996, 0.099971598, 0.09997162500000001, 0.09997155600000007, 0.0999716530000001, 0.09997157000000012, 0.09997154200000002, 0.0999715699999999, 0.09997168099999998, 0.0999715280000002, 0.09997165300000033, 0.09997161099999996, 0.0999715000000001, 0.0999716799999999, 0.09997166699999971, 0.09997152700000012, 0.09997159799999977, 0.0999715280000002, 0.09997170799999999, 0.09997155499999977, 0.09997163899999961, 0.09997161099999996, 0.09997151399999993, 0.09997154099999994, 0.09997170799999999, 0.09997155499999977, 0.09997161099999996, 0.09997158299999986, 0.09997158299999942, 0.09997165299999988, 0.09997159800000066, 0.09997166599999918, 0.09997156900000004, 0.0999715409999995, 0.09997165300000077, 0.0999715280000002, 0.09997170799999999, 0.09997155499999977, 0.09997166600000007, 0.09997158300000031, 0.0999716519999998, 0.09997165200000069, 0.09997148600000028, 0.09997172300000035, 0.09997158300000031, 0.09997156900000004, 0.09997163899999961, 0.0999715280000002]</msg>
<status status="PASS" starttime="20201103 12:36:11.506" endtime="20201103 12:36:11.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.501" endtime="20201103 12:36:11.512"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:11.515" endtime="20201103 12:36:11.516"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:11.518" endtime="20201103 12:36:11.539"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.517" endtime="20201103 12:36:11.540"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.513" endtime="20201103 12:36:11.540"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.072" endtime="20201103 12:36:11.541"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:03.999" endtime="20201103 12:36:11.542" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:24.732" endtime="20201103 12:36:11.551"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">frdm-kw41z</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:35:22.620" endtime="20201103 12:36:11.578"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_frdm-kw41z</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
