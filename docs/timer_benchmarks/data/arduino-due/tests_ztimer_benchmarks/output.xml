<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:37:33.549" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:37:37.214" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:37:37.222" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:37:38.381" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:37:37.212" endtime="20201103 12:37:38.381"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:37:41.385" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:37:38.383" endtime="20201103 12:37:41.386"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:37.211" endtime="20201103 12:37:41.387"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:41.392" endtime="20201103 12:37:41.631"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:41.389" endtime="20201103 12:37:41.631"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:41.644" endtime="20201103 12:37:44.668"></status>
</kw>
<msg timestamp="20201103 12:37:44.669" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:41.643" endtime="20201103 12:37:44.669"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:44.674" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:44.671" endtime="20201103 12:37:44.675"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:44.681" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:44.677" endtime="20201103 12:37:44.682"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:41.640" endtime="20201103 12:37:44.684"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:41.638" endtime="20201103 12:37:44.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:41.637" endtime="20201103 12:37:44.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:44.694" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:44.692" endtime="20201103 12:37:44.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.688" endtime="20201103 12:37:44.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:41.636" endtime="20201103 12:37:44.696"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:41.635" endtime="20201103 12:37:44.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:44.698" endtime="20201103 12:37:44.701"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:41.634" endtime="20201103 12:37:44.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:44.704" endtime="20201103 12:37:44.707"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:41.632" endtime="20201103 12:37:44.708"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:37.209" endtime="20201103 12:37:44.709"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:44.723" endtime="20201103 12:37:44.745"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.719" endtime="20201103 12:37:44.746"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:44.778" endtime="20201103 12:37:47.805"></status>
</kw>
<msg timestamp="20201103 12:37:47.807" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:44.774" endtime="20201103 12:37:47.808"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:47.816" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:47.811" endtime="20201103 12:37:47.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:47.827" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:47.820" endtime="20201103 12:37:47.829"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:44.767" endtime="20201103 12:37:47.831"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:44.761" endtime="20201103 12:37:47.834"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.758" endtime="20201103 12:37:47.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:47.848" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:47.846" endtime="20201103 12:37:47.850"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:47.838" endtime="20201103 12:37:47.851"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.756" endtime="20201103 12:37:47.851"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.754" endtime="20201103 12:37:47.852"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:47.854" endtime="20201103 12:37:47.857"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.751" endtime="20201103 12:37:47.858"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.748" endtime="20201103 12:37:47.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.717" endtime="20201103 12:37:47.860"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:47.872" endtime="20201103 12:37:47.883"></status>
</kw>
<msg timestamp="20201103 12:37:47.884" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:47.870" endtime="20201103 12:37:47.884"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:47.886" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:47.885" endtime="20201103 12:37:47.887"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:47.887" endtime="20201103 12:37:47.889"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:47.865" endtime="20201103 12:37:47.890"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:47.862" endtime="20201103 12:37:47.890"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:47.894" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:37:47.893" endtime="20201103 12:37:47.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:47.896" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:37:47.895" endtime="20201103 12:37:47.897"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:47.891" endtime="20201103 12:37:47.897"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:44.710" endtime="20201103 12:37:47.898" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:37:33.678" endtime="20201103 12:37:47.901"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:37:47.953" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:37:47.961" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:37:49.078" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:37:47.952" endtime="20201103 12:37:49.079"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:37:52.082" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:37:49.080" endtime="20201103 12:37:52.083"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:47.950" endtime="20201103 12:37:52.084"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:52.089" endtime="20201103 12:37:52.352"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:52.086" endtime="20201103 12:37:52.353"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:52.366" endtime="20201103 12:37:55.389"></status>
</kw>
<msg timestamp="20201103 12:37:55.390" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:52.365" endtime="20201103 12:37:55.391"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:55.396" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:55.393" endtime="20201103 12:37:55.397"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:55.403" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:55.398" endtime="20201103 12:37:55.403"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:52.362" endtime="20201103 12:37:55.405"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:52.359" endtime="20201103 12:37:55.406"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:52.358" endtime="20201103 12:37:55.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:55.415" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:55.413" endtime="20201103 12:37:55.416"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.409" endtime="20201103 12:37:55.416"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:52.357" endtime="20201103 12:37:55.417"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:52.356" endtime="20201103 12:37:55.417"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:55.419" endtime="20201103 12:37:55.422"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:52.355" endtime="20201103 12:37:55.423"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:55.425" endtime="20201103 12:37:55.428"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:52.354" endtime="20201103 12:37:55.429"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:47.949" endtime="20201103 12:37:55.430"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:55.444" endtime="20201103 12:37:55.467"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.441" endtime="20201103 12:37:55.468"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:55.483" endtime="20201103 12:37:58.506"></status>
</kw>
<msg timestamp="20201103 12:37:58.507" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:55.482" endtime="20201103 12:37:58.508"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:58.513" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:58.510" endtime="20201103 12:37:58.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:58.520" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:58.516" endtime="20201103 12:37:58.521"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:55.479" endtime="20201103 12:37:58.522"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:55.476" endtime="20201103 12:37:58.524"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.475" endtime="20201103 12:37:58.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:58.533" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:58.531" endtime="20201103 12:37:58.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:58.527" endtime="20201103 12:37:58.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.474" endtime="20201103 12:37:58.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.473" endtime="20201103 12:37:58.535"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:58.537" endtime="20201103 12:37:58.541"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.471" endtime="20201103 12:37:58.542"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.469" endtime="20201103 12:37:58.543"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:55.436" endtime="20201103 12:37:58.544"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:58.560" endtime="20201103 12:38:05.586"></status>
</kw>
<msg timestamp="20201103 12:38:05.587" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:58.558" endtime="20201103 12:38:05.588"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.593" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:05.589" endtime="20201103 12:38:05.594"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:05.595" endtime="20201103 12:38:05.599"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:58.553" endtime="20201103 12:38:05.600"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:58.549" endtime="20201103 12:38:05.601"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:05.607" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 0, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:38:05.603" endtime="20201103 12:38:05.607"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.616" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:05.614" endtime="20201103 12:38:05.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.620" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:38:05.618" endtime="20201103 12:38:05.621"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.609" endtime="20201103 12:38:05.622"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.631" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:05.629" endtime="20201103 12:38:05.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.634" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:38:05.633" endtime="20201103 12:38:05.635"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.624" endtime="20201103 12:38:05.635"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.639" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:38:05.638" endtime="20201103 12:38:05.640"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.642" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:38:05.640" endtime="20201103 12:38:05.642"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.636" endtime="20201103 12:38:05.643"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:05.650" endtime="20201103 12:38:05.953"></status>
</kw>
<msg timestamp="20201103 12:38:05.956" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.105431389, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.205441403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:05.648" endtime="20201103 12:38:05.956"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.964" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.105431389, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.205441403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:05.957" endtime="20201103 12:38:05.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:05.965" endtime="20201103 12:38:05.967"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.645" endtime="20201103 12:38:05.967"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.643" endtime="20201103 12:38:05.968"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:38:05.972" level="INFO">${FILTERED} = [{'time': 4.205441403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001001400000042, 'source_diff': 0.10001001400000042}, {'time': 4.305452792, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:38:05.969" endtime="20201103 12:38:05.972"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:05.986" level="INFO">${RESULT} = {'source_diff': [0.10001001400000042, 0.10001080599999934, 0.10001080600000023, 0.10001084700000007, 0.10001086099999945, 0.10001079199999996, 0.10001080500000015, 0.10001079099999988, 0.1000108050000...</msg>
<status status="PASS" starttime="20201103 12:38:05.973" endtime="20201103 12:38:05.986"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.990" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:38:05.989" endtime="20201103 12:38:05.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:05.993" level="INFO">VALUE: [0.10001001400000042, 0.10001080599999934, 0.10001080600000023, 0.10001084700000007, 0.10001086099999945, 0.10001079199999996, 0.10001080500000015, 0.10001079099999988, 0.10001080500000015, 0.10001084700000007, 0.10001081900000042, 0.1000108329999998, 0.10001079199999996, 0.10001080599999934, 0.10001084700000007, 0.10001083399999988, 0.10001081999999961, 0.10001084800000015, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001081900000042, 0.10001081900000042, 0.10001084700000007, 0.10001084700000007, 0.10001083399999988, 0.10001087500000061, 0.10001080600000023, 0.1000108329999998, 0.1000108329999998, 0.10001080500000015, 0.10001081899999953, 0.1000108200000005, 0.10001086200000042, 0.10001084700000007, 0.1000108329999998, 0.10001084700000007, 0.10001080499999926, 0.10001081999999961, 0.10001088899999999, 0.10001080600000023, 0.10001081899999953, 0.10001081899999953, 0.10001084700000007, 0.10001083300000069, 0.10001088899999999, 0.10001084700000007, 0.10001080500000015, 0.10001083300000069, 0.10001084700000007]</msg>
<status status="PASS" starttime="20201103 12:38:05.992" endtime="20201103 12:38:05.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.986" endtime="20201103 12:38:05.994"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:05.996" endtime="20201103 12:38:05.998"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:06.000" endtime="20201103 12:38:06.020"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.998" endtime="20201103 12:38:06.020"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:05.995" endtime="20201103 12:38:06.021"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:58.545" endtime="20201103 12:38:06.021"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:55.431" endtime="20201103 12:38:06.021" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:06.028" endtime="20201103 12:38:06.048"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.027" endtime="20201103 12:38:06.049"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:06.062" endtime="20201103 12:38:09.084"></status>
</kw>
<msg timestamp="20201103 12:38:09.085" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:06.061" endtime="20201103 12:38:09.086"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:09.095" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:09.088" endtime="20201103 12:38:09.096"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:38:09.103" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:38:09.098" endtime="20201103 12:38:09.104"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:06.058" endtime="20201103 12:38:09.106"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:06.055" endtime="20201103 12:38:09.107"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.054" endtime="20201103 12:38:09.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:38:09.118" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:38:09.117" endtime="20201103 12:38:09.119"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:09.110" endtime="20201103 12:38:09.120"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.053" endtime="20201103 12:38:09.120"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.052" endtime="20201103 12:38:09.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:09.122" endtime="20201103 12:38:09.126"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.051" endtime="20201103 12:38:09.129"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.049" endtime="20201103 12:38:09.130"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:06.026" endtime="20201103 12:38:09.130"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:09.150" endtime="20201103 12:38:16.175"></status>
</kw>
<msg timestamp="20201103 12:38:16.176" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:09.146" endtime="20201103 12:38:16.176"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.181" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:16.178" endtime="20201103 12:38:16.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:16.183" endtime="20201103 12:38:16.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:09.141" endtime="20201103 12:38:16.188"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:09.135" endtime="20201103 12:38:16.189"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:16.194" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 5, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:38:16.190" endtime="20201103 12:38:16.194"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.202" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:16.200" endtime="20201103 12:38:16.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.206" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:38:16.204" endtime="20201103 12:38:16.207"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.195" endtime="20201103 12:38:16.208"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.216" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:16.214" endtime="20201103 12:38:16.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.221" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:38:16.219" endtime="20201103 12:38:16.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.209" endtime="20201103 12:38:16.223"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.231" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:38:16.229" endtime="20201103 12:38:16.231"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.235" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:38:16.233" endtime="20201103 12:38:16.236"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.224" endtime="20201103 12:38:16.237"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:16.250" endtime="20201103 12:38:16.551"></status>
</kw>
<msg timestamp="20201103 12:38:16.554" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.112321542, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.212332542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:16.247" endtime="20201103 12:38:16.554"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.562" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.112321542, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.212332542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:16.555" endtime="20201103 12:38:16.562"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:16.563" endtime="20201103 12:38:16.565"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.242" endtime="20201103 12:38:16.565"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.238" endtime="20201103 12:38:16.566"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:38:16.570" level="INFO">${FILTERED} = [{'time': 4.212332542, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000110000000003, 'source_diff': 0.1000110000000003}, {'time': 4.312343958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:38:16.567" endtime="20201103 12:38:16.570"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:16.584" level="INFO">${RESULT} = {'source_diff': [0.1000110000000003, 0.1000108329999998, 0.1000108329999998, 0.10001086099999945, 0.10001081999999961, 0.1000108200000005, 0.10001081900000042, 0.10001081900000042, 0.10001081899999953...</msg>
<status status="PASS" starttime="20201103 12:38:16.571" endtime="20201103 12:38:16.584"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.588" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:38:16.587" endtime="20201103 12:38:16.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:16.590" level="INFO">VALUE: [0.1000110000000003, 0.1000108329999998, 0.1000108329999998, 0.10001086099999945, 0.10001081999999961, 0.1000108200000005, 0.10001081900000042, 0.10001081900000042, 0.10001081899999953, 0.10001081999999961, 0.1000108329999998, 0.10001084700000007, 0.10001088799999991, 0.10001081899999953, 0.10001083300000069, 0.10001080500000015, 0.10001080599999934, 0.10001083300000069, 0.10001083399999988, 0.10001083399999988, 0.10001083400000077, 0.10001088899999999, 0.10001088899999999, 0.10001080500000015, 0.10001081999999961, 0.1000108329999998, 0.10001080500000015, 0.10001086100000034, 0.10001081899999953, 0.10001079099999988, 0.10001080500000015, 0.10001080600000023, 0.1000108329999998, 0.10001083400000077, 0.10001084700000007, 0.10001079199999996, 0.10001086100000034, 0.10001080499999926, 0.10001079100000076, 0.1000108190000013, 0.10001084700000007, 0.10001083300000069, 0.10001083400000077, 0.10001080599999845, 0.10001087499999883, 0.10001081899999953, 0.10001083300000069, 0.10001081899999953, 0.10001084700000007, 0.10001084800000015]</msg>
<status status="PASS" starttime="20201103 12:38:16.589" endtime="20201103 12:38:16.591"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.585" endtime="20201103 12:38:16.591"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:16.593" endtime="20201103 12:38:16.595"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:16.597" endtime="20201103 12:38:16.616"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.595" endtime="20201103 12:38:16.617"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.592" endtime="20201103 12:38:16.617"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:09.131" endtime="20201103 12:38:16.618"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:38:06.023" endtime="20201103 12:38:16.618" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:16.625" endtime="20201103 12:38:16.645"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.624" endtime="20201103 12:38:16.645"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:16.658" endtime="20201103 12:38:19.679"></status>
</kw>
<msg timestamp="20201103 12:38:19.680" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:16.657" endtime="20201103 12:38:19.680"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:19.685" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:19.682" endtime="20201103 12:38:19.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:38:19.691" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:38:19.687" endtime="20201103 12:38:19.692"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:16.654" endtime="20201103 12:38:19.693"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:16.652" endtime="20201103 12:38:19.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.650" endtime="20201103 12:38:19.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:38:19.704" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:38:19.701" endtime="20201103 12:38:19.705"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:19.697" endtime="20201103 12:38:19.706"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.650" endtime="20201103 12:38:19.706"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.649" endtime="20201103 12:38:19.706"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:19.708" endtime="20201103 12:38:19.711"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.648" endtime="20201103 12:38:19.712"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.646" endtime="20201103 12:38:19.713"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:16.622" endtime="20201103 12:38:19.714"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:19.731" endtime="20201103 12:38:26.755"></status>
</kw>
<msg timestamp="20201103 12:38:26.756" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:19.727" endtime="20201103 12:38:26.757"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.761" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:26.758" endtime="20201103 12:38:26.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:26.764" endtime="20201103 12:38:26.768"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:19.722" endtime="20201103 12:38:26.769"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:19.718" endtime="20201103 12:38:26.770"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:26.775" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 10, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:38:26.772" endtime="20201103 12:38:26.776"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.784" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:26.781" endtime="20201103 12:38:26.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.789" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:38:26.787" endtime="20201103 12:38:26.789"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:26.777" endtime="20201103 12:38:26.790"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.798" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:26.796" endtime="20201103 12:38:26.799"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.803" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:38:26.801" endtime="20201103 12:38:26.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:26.792" endtime="20201103 12:38:26.804"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.812" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:38:26.810" endtime="20201103 12:38:26.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:26.817" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:38:26.815" endtime="20201103 12:38:26.818"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:26.806" endtime="20201103 12:38:26.819"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:26.833" endtime="20201103 12:38:27.136"></status>
</kw>
<msg timestamp="20201103 12:38:27.139" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.096627653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.196638681, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:26.830" endtime="20201103 12:38:27.139"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:27.147" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.096627653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.196638681, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:27.140" endtime="20201103 12:38:27.147"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:27.148" endtime="20201103 12:38:27.149"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:26.824" endtime="20201103 12:38:27.150"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:26.820" endtime="20201103 12:38:27.150"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:38:27.154" level="INFO">${FILTERED} = [{'time': 4.196638681, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001102799999995, 'source_diff': 0.10001102799999995}, {'time': 4.296650056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:38:27.151" endtime="20201103 12:38:27.155"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:27.168" level="INFO">${RESULT} = {'source_diff': [0.10001102799999995, 0.10001083399999988, 0.10001081999999961, 0.10001086100000034, 0.10001080500000015, 0.10001081900000042, 0.10001081900000042, 0.10001080500000015, 0.1000108470000...</msg>
<status status="PASS" starttime="20201103 12:38:27.155" endtime="20201103 12:38:27.168"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:27.172" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:38:27.171" endtime="20201103 12:38:27.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:27.174" level="INFO">VALUE: [0.10001102799999995, 0.10001083399999988, 0.10001081999999961, 0.10001086100000034, 0.10001080500000015, 0.10001081900000042, 0.10001081900000042, 0.10001080500000015, 0.10001084700000007, 0.10001081899999953, 0.10001083300000069, 0.10001080600000023, 0.10001079199999996, 0.1000108329999998, 0.10001086199999953, 0.10001080599999934, 0.10001080600000023, 0.10001081899999953, 0.1000108329999998, 0.10001084700000007, 0.10001080500000015, 0.1000108329999998, 0.10001083300000069, 0.1000108200000005, 0.10001083399999988, 0.10001084800000015, 0.10001081900000042, 0.1000108329999998, 0.10001081900000042, 0.1000108329999998, 0.10001081999999961, 0.10001080600000023, 0.10001083399999988, 0.1000108329999998, 0.10001084700000007, 0.1000108329999998, 0.10001083300000069, 0.10001083399999988, 0.10001084800000015, 0.10001083300000069, 0.10001093099999991, 0.10001084700000007, 0.10001083300000069, 0.10001087499999883, 0.10001084700000007, 0.10001083299999891, 0.10001083300000069, 0.10001086099999945, 0.10001080600000023, 0.10001084700000007]</msg>
<status status="PASS" starttime="20201103 12:38:27.173" endtime="20201103 12:38:27.175"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.169" endtime="20201103 12:38:27.175"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:27.178" endtime="20201103 12:38:27.179"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:27.181" endtime="20201103 12:38:27.201"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.180" endtime="20201103 12:38:27.201"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.176" endtime="20201103 12:38:27.202"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:19.715" endtime="20201103 12:38:27.202"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:38:16.620" endtime="20201103 12:38:27.203" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:27.209" endtime="20201103 12:38:27.229"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.208" endtime="20201103 12:38:27.229"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:27.245" endtime="20201103 12:38:30.268"></status>
</kw>
<msg timestamp="20201103 12:38:30.269" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:27.244" endtime="20201103 12:38:30.269"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:30.274" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:30.271" endtime="20201103 12:38:30.275"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:38:30.280" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:38:30.276" endtime="20201103 12:38:30.281"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:27.240" endtime="20201103 12:38:30.282"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:27.238" endtime="20201103 12:38:30.283"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.236" endtime="20201103 12:38:30.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:38:30.292" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:38:30.290" endtime="20201103 12:38:30.293"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:30.286" endtime="20201103 12:38:30.293"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.235" endtime="20201103 12:38:30.293"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.234" endtime="20201103 12:38:30.294"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:30.295" endtime="20201103 12:38:30.298"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.232" endtime="20201103 12:38:30.300"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.230" endtime="20201103 12:38:30.301"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:27.207" endtime="20201103 12:38:30.301"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:30.318" endtime="20201103 12:38:37.343"></status>
</kw>
<msg timestamp="20201103 12:38:37.344" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:30.315" endtime="20201103 12:38:37.345"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.349" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:37.346" endtime="20201103 12:38:37.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:37.352" endtime="20201103 12:38:37.356"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:30.309" endtime="20201103 12:38:37.357"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:30.305" endtime="20201103 12:38:37.358"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:37.363" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 15, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:38:37.359" endtime="20201103 12:38:37.363"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.372" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:37.369" endtime="20201103 12:38:37.372"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.376" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:38:37.374" endtime="20201103 12:38:37.377"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.364" endtime="20201103 12:38:37.378"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.386" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:37.384" endtime="20201103 12:38:37.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.390" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:38:37.388" endtime="20201103 12:38:37.391"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.379" endtime="20201103 12:38:37.392"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.400" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:38:37.398" endtime="20201103 12:38:37.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.404" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:38:37.402" endtime="20201103 12:38:37.405"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.393" endtime="20201103 12:38:37.406"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:37.421" endtime="20201103 12:38:37.721"></status>
</kw>
<msg timestamp="20201103 12:38:37.724" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.100240861, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.200251944, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:37.416" endtime="20201103 12:38:37.724"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.732" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.100240861, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.200251944, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:37.725" endtime="20201103 12:38:37.732"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:37.733" endtime="20201103 12:38:37.735"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.411" endtime="20201103 12:38:37.736"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.407" endtime="20201103 12:38:37.736"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:38:37.740" level="INFO">${FILTERED} = [{'time': 4.200251944, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001108300000006, 'source_diff': 0.10001108300000006}, {'time': 4.300263292, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:38:37.737" endtime="20201103 12:38:37.740"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:37.753" level="INFO">${RESULT} = {'source_diff': [0.10001108300000006, 0.10001080600000023, 0.10001081900000042, 0.10001081900000042, 0.10001086099999945, 0.10001081999999961, 0.10001080600000023, 0.10001088899999999, 0.1000108190000...</msg>
<status status="PASS" starttime="20201103 12:38:37.741" endtime="20201103 12:38:37.753"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.758" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:38:37.757" endtime="20201103 12:38:37.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:37.760" level="INFO">VALUE: [0.10001108300000006, 0.10001080600000023, 0.10001081900000042, 0.10001081900000042, 0.10001086099999945, 0.10001081999999961, 0.10001080600000023, 0.10001088899999999, 0.10001081900000042, 0.10001080499999926, 0.1000108200000005, 0.1000108200000005, 0.10001084700000007, 0.10001081900000042, 0.10001084700000007, 0.10001081999999961, 0.10001087499999972, 0.10001083300000069, 0.1000108329999998, 0.1000108200000005, 0.10001084800000015, 0.10001080600000023, 0.10001083399999988, 0.10001079199999996, 0.10001079199999996, 0.1000108329999998, 0.10001079099999988, 0.10001080500000015, 0.1000108329999998, 0.1000108329999998, 0.1000108329999998, 0.10001083300000069, 0.10001081899999953, 0.10001079199999996, 0.10001084700000007, 0.10001083399999988, 0.10001081999999961, 0.10001080600000023, 0.10001081899999953, 0.10001084700000007, 0.10001084700000007, 0.10001081899999953, 0.10001080500000015, 0.10001081899999953, 0.10001084700000007, 0.10001083299999891, 0.10001083400000077, 0.10001081999999961, 0.10001081899999953, 0.10001081899999953]</msg>
<status status="PASS" starttime="20201103 12:38:37.759" endtime="20201103 12:38:37.765"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.754" endtime="20201103 12:38:37.766"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:37.768" endtime="20201103 12:38:37.770"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:37.772" endtime="20201103 12:38:37.791"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.770" endtime="20201103 12:38:37.792"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.766" endtime="20201103 12:38:37.792"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:30.302" endtime="20201103 12:38:37.793"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:38:27.204" endtime="20201103 12:38:37.793" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:37.800" endtime="20201103 12:38:37.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.799" endtime="20201103 12:38:37.820"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:37.835" endtime="20201103 12:38:40.857"></status>
</kw>
<msg timestamp="20201103 12:38:40.858" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:37.833" endtime="20201103 12:38:40.858"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:40.863" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:40.860" endtime="20201103 12:38:40.864"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:38:40.870" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:38:40.866" endtime="20201103 12:38:40.870"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:37.830" endtime="20201103 12:38:40.872"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:37.827" endtime="20201103 12:38:40.873"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.826" endtime="20201103 12:38:40.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:38:40.882" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:38:40.881" endtime="20201103 12:38:40.883"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:40.876" endtime="20201103 12:38:40.883"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.825" endtime="20201103 12:38:40.884"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.824" endtime="20201103 12:38:40.884"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:40.886" endtime="20201103 12:38:40.889"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.823" endtime="20201103 12:38:40.890"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.821" endtime="20201103 12:38:40.891"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:37.797" endtime="20201103 12:38:40.892"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:40.903" endtime="20201103 12:38:47.929"></status>
</kw>
<msg timestamp="20201103 12:38:47.930" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:40.902" endtime="20201103 12:38:47.931"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.936" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:47.933" endtime="20201103 12:38:47.938"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:47.939" endtime="20201103 12:38:47.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:40.899" endtime="20201103 12:38:47.944"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:40.897" endtime="20201103 12:38:47.945"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:47.951" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 20, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:38:47.947" endtime="20201103 12:38:47.951"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.960" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:47.958" endtime="20201103 12:38:47.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.965" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:38:47.963" endtime="20201103 12:38:47.966"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:47.952" endtime="20201103 12:38:47.967"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.977" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:47.974" endtime="20201103 12:38:47.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.979" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:38:47.978" endtime="20201103 12:38:47.980"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:47.969" endtime="20201103 12:38:47.980"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.985" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:38:47.983" endtime="20201103 12:38:47.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:47.988" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:38:47.986" endtime="20201103 12:38:47.988"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:47.981" endtime="20201103 12:38:47.989"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:47.996" endtime="20201103 12:38:48.294"></status>
</kw>
<msg timestamp="20201103 12:38:48.297" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.093716625, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.193727653, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:47.994" endtime="20201103 12:38:48.297"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:48.305" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.093716625, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.193727653, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:48.298" endtime="20201103 12:38:48.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:48.306" endtime="20201103 12:38:48.308"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:47.991" endtime="20201103 12:38:48.309"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:47.989" endtime="20201103 12:38:48.309"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:38:48.313" level="INFO">${FILTERED} = [{'time': 4.193727653, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001102799999995, 'source_diff': 0.10001102799999995}, {'time': 4.293739056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:38:48.310" endtime="20201103 12:38:48.313"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:48.328" level="INFO">${RESULT} = {'source_diff': [0.10001102799999995, 0.10001084800000015, 0.10001084700000007, 0.10001083300000069, 0.10001080500000015, 0.10001084700000007, 0.10001080500000015, 0.10001081999999961, 0.1000108059999...</msg>
<status status="PASS" starttime="20201103 12:38:48.314" endtime="20201103 12:38:48.329"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:48.333" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:38:48.332" endtime="20201103 12:38:48.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:48.336" level="INFO">VALUE: [0.10001102799999995, 0.10001084800000015, 0.10001084700000007, 0.10001083300000069, 0.10001080500000015, 0.10001084700000007, 0.10001080500000015, 0.10001081999999961, 0.10001080599999934, 0.10001083399999988, 0.10001081899999953, 0.10001080500000015, 0.10001081900000042, 0.10001084700000007, 0.1000108329999998, 0.10001083399999988, 0.10001081999999961, 0.10001083300000069, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001086199999953, 0.10001083399999988, 0.10001086100000034, 0.10001080500000015, 0.10001081999999961, 0.10001083399999988, 0.10001086099999945, 0.1000108329999998, 0.10001081899999953, 0.10001081999999961, 0.10001084799999926, 0.10001086099999945, 0.10001084700000007, 0.10001081900000042, 0.10001081999999961, 0.10001081999999961, 0.10001084700000007, 0.10001084700000007, 0.10001087499999972, 0.10001083400000077, 0.10001090299999937, 0.10001084700000007, 0.10001081999999961, 0.10001090300000115, 0.10001084700000007, 0.1000107769999996, 0.10001080500000015, 0.10001083300000069, 0.10001079099999899]</msg>
<status status="PASS" starttime="20201103 12:38:48.334" endtime="20201103 12:38:48.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.329" endtime="20201103 12:38:48.337"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:48.339" endtime="20201103 12:38:48.340"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:48.343" endtime="20201103 12:38:48.362"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.341" endtime="20201103 12:38:48.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.337" endtime="20201103 12:38:48.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:40.893" endtime="20201103 12:38:48.364"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:38:37.795" endtime="20201103 12:38:48.364" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:48.371" endtime="20201103 12:38:48.390"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.369" endtime="20201103 12:38:48.391"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:48.405" endtime="20201103 12:38:51.428"></status>
</kw>
<msg timestamp="20201103 12:38:51.429" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:48.404" endtime="20201103 12:38:51.429"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:51.434" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:51.431" endtime="20201103 12:38:51.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:38:51.441" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:38:51.437" endtime="20201103 12:38:51.442"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:48.401" endtime="20201103 12:38:51.443"></status>
</kw>
<status status="FAIL" starttime="20201103 12:38:48.398" endtime="20201103 12:38:51.445"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.397" endtime="20201103 12:38:51.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:38:51.453" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:38:51.452" endtime="20201103 12:38:51.454"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:51.447" endtime="20201103 12:38:51.455"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.396" endtime="20201103 12:38:51.455"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.395" endtime="20201103 12:38:51.456"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:51.458" endtime="20201103 12:38:51.461"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.393" endtime="20201103 12:38:51.463"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.392" endtime="20201103 12:38:51.464"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:48.368" endtime="20201103 12:38:51.464"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:51.483" endtime="20201103 12:38:58.511"></status>
</kw>
<msg timestamp="20201103 12:38:58.512" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:51.480" endtime="20201103 12:38:58.512"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.517" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:38:58.514" endtime="20201103 12:38:58.518"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:58.520" endtime="20201103 12:38:58.523"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:51.473" endtime="20201103 12:38:58.524"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:51.469" endtime="20201103 12:38:58.526"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:58.531" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 25, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:38:58.527" endtime="20201103 12:38:58.531"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.540" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:58.538" endtime="20201103 12:38:58.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.544" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:38:58.542" endtime="20201103 12:38:58.545"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.533" endtime="20201103 12:38:58.547"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.555" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:38:58.553" endtime="20201103 12:38:58.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.560" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:38:58.558" endtime="20201103 12:38:58.560"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.548" endtime="20201103 12:38:58.562"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.570" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:38:58.568" endtime="20201103 12:38:58.573"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.577" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:38:58.575" endtime="20201103 12:38:58.578"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.563" endtime="20201103 12:38:58.579"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:58.594" endtime="20201103 12:38:58.895"></status>
</kw>
<msg timestamp="20201103 12:38:58.898" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.104093167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.204104194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:58.590" endtime="20201103 12:38:58.898"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.906" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.104093167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.204104194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:38:58.899" endtime="20201103 12:38:58.906"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:58.907" endtime="20201103 12:38:58.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.584" endtime="20201103 12:38:58.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.581" endtime="20201103 12:38:58.910"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:38:58.914" level="INFO">${FILTERED} = [{'time': 4.204104194, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001102699999986, 'source_diff': 0.10001102699999986}, {'time': 4.304115597, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:38:58.911" endtime="20201103 12:38:58.914"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:38:58.932" level="INFO">${RESULT} = {'source_diff': [0.10001102699999986, 0.10001084700000007, 0.10001084700000007, 0.10001080600000023, 0.10001081999999961, 0.10001084800000015, 0.10001084700000007, 0.1000108329999998, 0.10001083300000...</msg>
<status status="PASS" starttime="20201103 12:38:58.919" endtime="20201103 12:38:58.932"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.936" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:38:58.935" endtime="20201103 12:38:58.937"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:38:58.939" level="INFO">VALUE: [0.10001102699999986, 0.10001084700000007, 0.10001084700000007, 0.10001080600000023, 0.10001081999999961, 0.10001084800000015, 0.10001084700000007, 0.1000108329999998, 0.10001083300000069, 0.1000108329999998, 0.10001081999999961, 0.10001084700000007, 0.10001084700000007, 0.10001086100000034, 0.10001084700000007, 0.10001086100000034, 0.10001086100000034, 0.10001080499999926, 0.10001080500000015, 0.10001084700000007, 0.10001081900000042, 0.1000108329999998, 0.10001081899999953, 0.10001080600000023, 0.10001084800000015, 0.10001081999999961, 0.10001083399999988, 0.10001086099999945, 0.10001079099999988, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001087499999972, 0.10001080599999934, 0.10001083399999988, 0.10001080599999934, 0.10001081899999953, 0.1000108329999998, 0.10001087500000061, 0.100010833999999, 0.10001084800000015, 0.100010833999999, 0.10001084700000007, 0.10001084700000007, 0.10001086100000123, 0.10001081899999953, 0.10001081999999961, 0.10001081999999961, 0.10001084700000007]</msg>
<status status="PASS" starttime="20201103 12:38:58.937" endtime="20201103 12:38:58.939"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.933" endtime="20201103 12:38:58.940"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:38:58.942" endtime="20201103 12:38:58.943"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:38:58.945" endtime="20201103 12:38:58.965"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.944" endtime="20201103 12:38:58.966"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:58.940" endtime="20201103 12:38:58.966"></status>
</kw>
<status status="PASS" starttime="20201103 12:38:51.466" endtime="20201103 12:38:58.966"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:38:48.366" endtime="20201103 12:38:58.967" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:37:47.908" endtime="20201103 12:38:58.974"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">arduino-due</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:37:33.552" endtime="20201103 12:38:59.010"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_arduino-due</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
