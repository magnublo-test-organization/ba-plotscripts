<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:27:00.382" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:27:04.014" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:27:04.022" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:27:05.160" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:27:04.012" endtime="20201103 12:27:05.161"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:27:08.167" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:27:05.163" endtime="20201103 12:27:08.168"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:04.011" endtime="20201103 12:27:08.170"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:08.174" endtime="20201103 12:27:08.412"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:08.171" endtime="20201103 12:27:08.413"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:08.425" endtime="20201103 12:27:11.448"></status>
</kw>
<msg timestamp="20201103 12:27:11.449" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:08.424" endtime="20201103 12:27:11.449"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:11.454" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:11.451" endtime="20201103 12:27:11.455"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:11.460" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:11.456" endtime="20201103 12:27:11.461"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:08.421" endtime="20201103 12:27:11.462"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:08.419" endtime="20201103 12:27:11.464"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:08.418" endtime="20201103 12:27:11.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:11.472" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:11.470" endtime="20201103 12:27:11.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.466" endtime="20201103 12:27:11.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:08.417" endtime="20201103 12:27:11.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:08.416" endtime="20201103 12:27:11.474"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:11.476" endtime="20201103 12:27:11.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:08.415" endtime="20201103 12:27:11.480"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:11.481" endtime="20201103 12:27:11.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:08.413" endtime="20201103 12:27:11.486"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:04.010" endtime="20201103 12:27:11.486"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:11.499" endtime="20201103 12:27:11.520"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.496" endtime="20201103 12:27:11.522"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:11.551" endtime="20201103 12:27:14.572"></status>
</kw>
<msg timestamp="20201103 12:27:14.572" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:11.547" endtime="20201103 12:27:14.572"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:14.575" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:14.573" endtime="20201103 12:27:14.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:14.578" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:14.576" endtime="20201103 12:27:14.578"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:11.541" endtime="20201103 12:27:14.579"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:11.536" endtime="20201103 12:27:14.579"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.532" endtime="20201103 12:27:14.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:14.583" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:14.582" endtime="20201103 12:27:14.584"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:14.580" endtime="20201103 12:27:14.584"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.531" endtime="20201103 12:27:14.584"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.529" endtime="20201103 12:27:14.584"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:14.585" endtime="20201103 12:27:14.586"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.526" endtime="20201103 12:27:14.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.523" endtime="20201103 12:27:14.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:11.493" endtime="20201103 12:27:14.588"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:14.594" endtime="20201103 12:27:14.605"></status>
</kw>
<msg timestamp="20201103 12:27:14.606" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:14.592" endtime="20201103 12:27:14.606"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:14.608" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:14.607" endtime="20201103 12:27:14.609"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:14.609" endtime="20201103 12:27:14.611"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:14.590" endtime="20201103 12:27:14.611"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:14.588" endtime="20201103 12:27:14.612"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:14.616" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:27:14.615" endtime="20201103 12:27:14.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:14.618" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:27:14.617" endtime="20201103 12:27:14.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:14.612" endtime="20201103 12:27:14.619"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:27:11.487" endtime="20201103 12:27:14.619" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:27:00.503" endtime="20201103 12:27:14.622"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:27:14.673" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:27:14.681" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:27:15.841" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:27:14.672" endtime="20201103 12:27:15.842"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:27:18.844" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:27:15.843" endtime="20201103 12:27:18.846"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:14.671" endtime="20201103 12:27:18.847"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:18.851" endtime="20201103 12:27:19.154"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:18.848" endtime="20201103 12:27:19.155"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:19.167" endtime="20201103 12:27:22.189"></status>
</kw>
<msg timestamp="20201103 12:27:22.190" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:19.165" endtime="20201103 12:27:22.190"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:22.195" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:22.192" endtime="20201103 12:27:22.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:22.201" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:22.197" endtime="20201103 12:27:22.202"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:19.163" endtime="20201103 12:27:22.203"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:19.161" endtime="20201103 12:27:22.204"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:19.160" endtime="20201103 12:27:22.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:22.212" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:22.211" endtime="20201103 12:27:22.213"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.207" endtime="20201103 12:27:22.213"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:19.159" endtime="20201103 12:27:22.214"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:19.158" endtime="20201103 12:27:22.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:22.216" endtime="20201103 12:27:22.219"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:19.157" endtime="20201103 12:27:22.220"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:22.221" endtime="20201103 12:27:22.224"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:19.155" endtime="20201103 12:27:22.226"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:14.669" endtime="20201103 12:27:22.226"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:22.239" endtime="20201103 12:27:22.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.236" endtime="20201103 12:27:22.262"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:22.288" endtime="20201103 12:27:25.311"></status>
</kw>
<msg timestamp="20201103 12:27:25.312" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:22.285" endtime="20201103 12:27:25.313"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:25.319" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:25.315" endtime="20201103 12:27:25.319"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:25.325" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:25.321" endtime="20201103 12:27:25.326"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:22.280" endtime="20201103 12:27:25.327"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:22.275" endtime="20201103 12:27:25.328"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.272" endtime="20201103 12:27:25.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:25.336" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:25.335" endtime="20201103 12:27:25.337"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:25.331" endtime="20201103 12:27:25.337"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.271" endtime="20201103 12:27:25.338"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.270" endtime="20201103 12:27:25.338"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:25.340" endtime="20201103 12:27:25.343"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.267" endtime="20201103 12:27:25.344"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.263" endtime="20201103 12:27:25.345"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:22.232" endtime="20201103 12:27:25.345"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:25.362" endtime="20201103 12:27:32.389"></status>
</kw>
<msg timestamp="20201103 12:27:32.390" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:25.359" endtime="20201103 12:27:32.390"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.395" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:32.392" endtime="20201103 12:27:32.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:32.397" endtime="20201103 12:27:32.400"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:25.353" endtime="20201103 12:27:32.402"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:25.349" endtime="20201103 12:27:32.402"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:27:32.408" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:27:32.404" endtime="20201103 12:27:32.408"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.416" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:27:32.414" endtime="20201103 12:27:32.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.420" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:27:32.418" endtime="20201103 12:27:32.421"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.409" endtime="20201103 12:27:32.422"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.430" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:27:32.428" endtime="20201103 12:27:32.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.434" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:27:32.432" endtime="20201103 12:27:32.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.423" endtime="20201103 12:27:32.436"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.444" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:27:32.442" endtime="20201103 12:27:32.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.449" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:27:32.446" endtime="20201103 12:27:32.449"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.437" endtime="20201103 12:27:32.450"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:32.464" endtime="20201103 12:27:32.771"></status>
</kw>
<msg timestamp="20201103 12:27:32.774" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.115652028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.215662056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:27:32.461" endtime="20201103 12:27:32.774"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.782" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.115652028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.215662056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:27:32.775" endtime="20201103 12:27:32.782"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:32.783" endtime="20201103 12:27:32.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.455" endtime="20201103 12:27:32.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.452" endtime="20201103 12:27:32.786"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:27:32.790" level="INFO">${FILTERED} = [{'time': 4.215662056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000100279999998, 'source_diff': 0.1000100279999998}, {'time': 4.315673417, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:27:32.787" endtime="20201103 12:27:32.790"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:27:32.803" level="INFO">${RESULT} = {'diff': [0.1000100279999998, 0.1000108200000005, 0.10001079200000085, 0.10001080600000023, 0.1000108329999998, 0.10001081899999953, 0.10001083300000069, 0.1000108329999998, 0.10001079099999988, 0.100...</msg>
<status status="PASS" starttime="20201103 12:27:32.791" endtime="20201103 12:27:32.803"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.807" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:27:32.806" endtime="20201103 12:27:32.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:32.810" level="INFO">VALUE: [0.1000100279999998, 0.1000108200000005, 0.10001079200000085, 0.10001080600000023, 0.1000108329999998, 0.10001081899999953, 0.10001083300000069, 0.1000108329999998, 0.10001079099999988, 0.10001084700000007, 0.10001081899999953, 0.10001083300000069, 0.10001083400000077, 0.10001080600000023, 0.10001081900000042, 0.10001080600000023, 0.10001083399999988, 0.10001083399999988, 0.1000108200000005, 0.10001080600000023, 0.10001080500000015, 0.10001084700000007, 0.1000108329999998, 0.1000108329999998, 0.1000108329999998, 0.10001081999999961, 0.10001081999999961, 0.10001080600000023, 0.10001086100000034, 0.10001081900000042, 0.10001087500000061, 0.10001080500000015, 0.10001087500000061, 0.10001084800000015, 0.10001081999999961, 0.1000108329999998, 0.10001088899999999, 0.10001080500000015, 0.10001088899999999, 0.10001079199999907, 0.10001084700000007, 0.10001081999999961, 0.10001081899999953, 0.10001083299999891, 0.10001080600000023, 0.10001081999999961, 0.10001091700000053, 0.10001088899999999, 0.10001080500000015, 0.10001083299999891]</msg>
<status status="PASS" starttime="20201103 12:27:32.809" endtime="20201103 12:27:32.810"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.804" endtime="20201103 12:27:32.811"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:32.813" endtime="20201103 12:27:32.814"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:32.816" endtime="20201103 12:27:32.836"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.815" endtime="20201103 12:27:32.836"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.811" endtime="20201103 12:27:32.837"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:25.347" endtime="20201103 12:27:32.837"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:27:22.227" endtime="20201103 12:27:32.838" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:32.844" endtime="20201103 12:27:32.863"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.843" endtime="20201103 12:27:32.864"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:32.877" endtime="20201103 12:27:35.898"></status>
</kw>
<msg timestamp="20201103 12:27:35.899" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:32.876" endtime="20201103 12:27:35.899"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:35.904" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:35.901" endtime="20201103 12:27:35.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:35.910" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:35.906" endtime="20201103 12:27:35.911"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:32.873" endtime="20201103 12:27:35.912"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:32.870" endtime="20201103 12:27:35.913"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.869" endtime="20201103 12:27:35.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:35.921" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:35.920" endtime="20201103 12:27:35.922"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:35.916" endtime="20201103 12:27:35.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.868" endtime="20201103 12:27:35.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.868" endtime="20201103 12:27:35.923"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:35.925" endtime="20201103 12:27:35.928"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.866" endtime="20201103 12:27:35.929"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.865" endtime="20201103 12:27:35.930"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:32.841" endtime="20201103 12:27:35.931"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:35.950" endtime="20201103 12:27:42.974"></status>
</kw>
<msg timestamp="20201103 12:27:42.975" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:35.946" endtime="20201103 12:27:42.976"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:42.980" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:42.977" endtime="20201103 12:27:42.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:42.983" endtime="20201103 12:27:42.986"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:35.941" endtime="20201103 12:27:42.987"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:35.935" endtime="20201103 12:27:42.988"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:27:42.993" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:27:42.989" endtime="20201103 12:27:42.993"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.001" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:27:42.999" endtime="20201103 12:27:43.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.006" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:27:43.004" endtime="20201103 12:27:43.006"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:42.995" endtime="20201103 12:27:43.008"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.015" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:27:43.013" endtime="20201103 12:27:43.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.020" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:27:43.018" endtime="20201103 12:27:43.026"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.009" endtime="20201103 12:27:43.027"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.036" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:27:43.033" endtime="20201103 12:27:43.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.040" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:27:43.038" endtime="20201103 12:27:43.041"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.029" endtime="20201103 12:27:43.042"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:43.050" endtime="20201103 12:27:43.348"></status>
</kw>
<msg timestamp="20201103 12:27:43.351" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.096796056, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.196807069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:27:43.049" endtime="20201103 12:27:43.351"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.358" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.096796056, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.196807069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:27:43.352" endtime="20201103 12:27:43.359"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:43.360" endtime="20201103 12:27:43.361"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.046" endtime="20201103 12:27:43.362"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.044" endtime="20201103 12:27:43.362"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:27:43.366" level="INFO">${FILTERED} = [{'time': 4.196807069, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001101300000048, 'source_diff': 0.10001101300000048}, {'time': 4.296818444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:27:43.363" endtime="20201103 12:27:43.366"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:27:43.380" level="INFO">${RESULT} = {'diff': [0.10001101300000048, 0.10001079100000076, 0.10001079099999988, 0.10001091699999964, 0.1000108329999998, 0.1000108329999998, 0.10001079099999988, 0.10001081900000042, 0.10001081900000042, 0.1...</msg>
<status status="PASS" starttime="20201103 12:27:43.367" endtime="20201103 12:27:43.381"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.385" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:27:43.384" endtime="20201103 12:27:43.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:43.387" level="INFO">VALUE: [0.10001101300000048, 0.10001079100000076, 0.10001079099999988, 0.10001091699999964, 0.1000108329999998, 0.1000108329999998, 0.10001079099999988, 0.10001081900000042, 0.10001081900000042, 0.1000108329999998, 0.10001083300000069, 0.1000108200000005, 0.1000108200000005, 0.10001083399999988, 0.10001081900000042, 0.10001081999999961, 0.10001080500000015, 0.10001081899999953, 0.1000108329999998, 0.1000108329999998, 0.10001084700000007, 0.1000108329999998, 0.10001083400000077, 0.10001080600000023, 0.10001081899999953, 0.10001084700000007, 0.10001081900000042, 0.10001083300000069, 0.10001086200000042, 0.10001079199999996, 0.10001080600000023, 0.1000108200000005, 0.10001090300000026, 0.10001088899999999, 0.10001080500000015, 0.1000108329999998, 0.1000108200000005, 0.10001084800000015, 0.1000108200000005, 0.10001083399999988, 0.10001082000000139, 0.10001084700000007, 0.10001082000000139, 0.10001084700000007, 0.10001083299999891, 0.10001083300000069, 0.10001083299999891, 0.10001083300000069, 0.10001080600000023, 0.10001083299999891]</msg>
<status status="PASS" starttime="20201103 12:27:43.386" endtime="20201103 12:27:43.387"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.381" endtime="20201103 12:27:43.388"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:43.390" endtime="20201103 12:27:43.392"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:43.394" endtime="20201103 12:27:43.413"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.392" endtime="20201103 12:27:43.414"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.389" endtime="20201103 12:27:43.414"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:35.932" endtime="20201103 12:27:43.414"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:27:32.839" endtime="20201103 12:27:43.415" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:43.428" endtime="20201103 12:27:43.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.426" endtime="20201103 12:27:43.448"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:43.461" endtime="20201103 12:27:46.483"></status>
</kw>
<msg timestamp="20201103 12:27:46.484" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:43.459" endtime="20201103 12:27:46.484"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:46.489" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:46.486" endtime="20201103 12:27:46.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:46.495" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:46.491" endtime="20201103 12:27:46.496"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:43.457" endtime="20201103 12:27:46.497"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:43.454" endtime="20201103 12:27:46.499"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.453" endtime="20201103 12:27:46.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:46.509" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:46.506" endtime="20201103 12:27:46.510"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:46.501" endtime="20201103 12:27:46.510"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.452" endtime="20201103 12:27:46.511"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.452" endtime="20201103 12:27:46.511"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:46.513" endtime="20201103 12:27:46.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.450" endtime="20201103 12:27:46.517"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.449" endtime="20201103 12:27:46.518"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:43.425" endtime="20201103 12:27:46.519"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:46.536" endtime="20201103 12:27:53.561"></status>
</kw>
<msg timestamp="20201103 12:27:53.562" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:46.533" endtime="20201103 12:27:53.563"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.568" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:53.564" endtime="20201103 12:27:53.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:53.570" endtime="20201103 12:27:53.573"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:46.527" endtime="20201103 12:27:53.574"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:46.523" endtime="20201103 12:27:53.575"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:27:53.580" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:27:53.577" endtime="20201103 12:27:53.581"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.590" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:27:53.587" endtime="20201103 12:27:53.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.594" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:27:53.592" endtime="20201103 12:27:53.595"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.582" endtime="20201103 12:27:53.596"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.604" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:27:53.602" endtime="20201103 12:27:53.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.608" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:27:53.606" endtime="20201103 12:27:53.609"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.597" endtime="20201103 12:27:53.610"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.617" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:27:53.616" endtime="20201103 12:27:53.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.619" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:27:53.618" endtime="20201103 12:27:53.619"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.611" endtime="20201103 12:27:53.620"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:53.626" endtime="20201103 12:27:53.926"></status>
</kw>
<msg timestamp="20201103 12:27:53.929" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.099313583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.199324597, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:27:53.624" endtime="20201103 12:27:53.929"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.936" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.099313583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.199324597, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:27:53.930" endtime="20201103 12:27:53.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:53.938" endtime="20201103 12:27:53.939"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.622" endtime="20201103 12:27:53.940"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.620" endtime="20201103 12:27:53.940"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:27:53.944" level="INFO">${FILTERED} = [{'time': 4.199324597, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001101400000056, 'source_diff': 0.10001101400000056}, {'time': 4.299336, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10...</msg>
<status status="PASS" starttime="20201103 12:27:53.941" endtime="20201103 12:27:53.944"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:27:53.957" level="INFO">${RESULT} = {'diff': [0.10001101400000056, 0.10001081900000042, 0.10001081899999953, 0.10001080600000023, 0.10001081999999961, 0.10001083399999988, 0.10001081900000042, 0.10001084700000007, 0.10001087499999972, 0...</msg>
<status status="PASS" starttime="20201103 12:27:53.945" endtime="20201103 12:27:53.957"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.961" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:27:53.960" endtime="20201103 12:27:53.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:27:53.963" level="INFO">VALUE: [0.10001101400000056, 0.10001081900000042, 0.10001081899999953, 0.10001080600000023, 0.10001081999999961, 0.10001083399999988, 0.10001081900000042, 0.10001084700000007, 0.10001087499999972, 0.10001080500000015, 0.10001081999999961, 0.10001083399999988, 0.10001083399999988, 0.10001081899999953, 0.10001084700000007, 0.10001086100000034, 0.10001084700000007, 0.10001087499999972, 0.10001081999999961, 0.10001086100000034, 0.10001086100000034, 0.10001084699999918, 0.10001084700000007, 0.10001083399999988, 0.10001084799999926, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001081999999961, 0.10001081999999961, 0.1000108329999998, 0.10001084700000007, 0.1000108329999998, 0.10001083399999988, 0.1000108329999998, 0.10001081899999953, 0.10001081900000042, 0.10001081900000042, 0.10001081900000042, 0.10001081900000042, 0.10001080500000015, 0.10001081899999953, 0.10001080500000015, 0.10001083299999891, 0.10001079200000085, 0.10001079199999907, 0.10001084799999838, 0.10001083400000077, 0.10001090299999937, 0.10001083299999891]</msg>
<status status="PASS" starttime="20201103 12:27:53.962" endtime="20201103 12:27:53.964"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.958" endtime="20201103 12:27:53.964"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:53.967" endtime="20201103 12:27:53.968"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:53.971" endtime="20201103 12:27:53.990"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.969" endtime="20201103 12:27:53.991"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.965" endtime="20201103 12:27:53.991"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:46.520" endtime="20201103 12:27:53.991"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:27:43.422" endtime="20201103 12:27:53.992" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:27:53.998" endtime="20201103 12:27:54.018"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.997" endtime="20201103 12:27:54.019"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:54.031" endtime="20201103 12:27:57.055"></status>
</kw>
<msg timestamp="20201103 12:27:57.056" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:54.030" endtime="20201103 12:27:57.056"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:27:57.061" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:57.058" endtime="20201103 12:27:57.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:27:57.067" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:27:57.063" endtime="20201103 12:27:57.068"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:54.027" endtime="20201103 12:27:57.069"></status>
</kw>
<status status="FAIL" starttime="20201103 12:27:54.025" endtime="20201103 12:27:57.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:54.024" endtime="20201103 12:27:57.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:27:57.079" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:27:57.078" endtime="20201103 12:27:57.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:57.073" endtime="20201103 12:27:57.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:54.023" endtime="20201103 12:27:57.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:54.022" endtime="20201103 12:27:57.081"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:57.083" endtime="20201103 12:27:57.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:54.021" endtime="20201103 12:27:57.087"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:54.019" endtime="20201103 12:27:57.088"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:53.996" endtime="20201103 12:27:57.088"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:27:57.105" endtime="20201103 12:28:04.131"></status>
</kw>
<msg timestamp="20201103 12:28:04.132" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:27:57.102" endtime="20201103 12:28:04.132"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.137" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:04.134" endtime="20201103 12:28:04.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:04.139" endtime="20201103 12:28:04.143"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:57.096" endtime="20201103 12:28:04.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:57.092" endtime="20201103 12:28:04.145"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:28:04.150" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:28:04.147" endtime="20201103 12:28:04.151"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.159" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:28:04.157" endtime="20201103 12:28:04.160"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.163" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:28:04.161" endtime="20201103 12:28:04.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.152" endtime="20201103 12:28:04.165"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.173" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:28:04.171" endtime="20201103 12:28:04.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.178" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:28:04.176" endtime="20201103 12:28:04.178"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.167" endtime="20201103 12:28:04.179"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.187" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:28:04.186" endtime="20201103 12:28:04.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.189" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:28:04.188" endtime="20201103 12:28:04.190"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.181" endtime="20201103 12:28:04.190"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:04.198" endtime="20201103 12:28:04.496"></status>
</kw>
<msg timestamp="20201103 12:28:04.499" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.098098181, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.198109236, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:28:04.195" endtime="20201103 12:28:04.499"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.506" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.098098181, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.198109236, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:28:04.500" endtime="20201103 12:28:04.507"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:04.508" endtime="20201103 12:28:04.509"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.193" endtime="20201103 12:28:04.510"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.191" endtime="20201103 12:28:04.510"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:28:04.514" level="INFO">${FILTERED} = [{'time': 4.198109236, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001105499999952, 'source_diff': 0.10001105499999952}, {'time': 4.298120597, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:28:04.511" endtime="20201103 12:28:04.514"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:28:04.527" level="INFO">${RESULT} = {'diff': [0.10001105499999952, 0.10001081899999953, 0.1000108329999998, 0.10001083300000069, 0.10001080600000023, 0.10001081999999961, 0.10001084800000015, 0.10001090300000026, 0.10001081999999961, 0....</msg>
<status status="PASS" starttime="20201103 12:28:04.515" endtime="20201103 12:28:04.527"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.531" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:28:04.530" endtime="20201103 12:28:04.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:04.533" level="INFO">VALUE: [0.10001105499999952, 0.10001081899999953, 0.1000108329999998, 0.10001083300000069, 0.10001080600000023, 0.10001081999999961, 0.10001084800000015, 0.10001090300000026, 0.10001081999999961, 0.10001083400000077, 0.10001080500000015, 0.10001081899999953, 0.1000108329999998, 0.10001080500000015, 0.10001080600000023, 0.1000108200000005, 0.10001086100000034, 0.1000108200000005, 0.10001084700000007, 0.10001083300000069, 0.10001083300000069, 0.1000108329999998, 0.10001080600000023, 0.1000108200000005, 0.10001083399999988, 0.1000108329999998, 0.1000108329999998, 0.10001087500000061, 0.10001079199999996, 0.10001083399999988, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001084800000015, 0.10001083400000077, 0.10001081900000042, 0.10001080500000015, 0.10001081899999953, 0.1000108200000005, 0.10001081999999961, 0.10001084700000007, 0.10001084699999829, 0.10001084700000007, 0.10001082000000139, 0.10001087499999883, 0.10001086099999945, 0.10001083300000069, 0.10001081999999961, 0.10001087499999883, 0.10001084700000007]</msg>
<status status="PASS" starttime="20201103 12:28:04.532" endtime="20201103 12:28:04.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.528" endtime="20201103 12:28:04.535"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:04.537" endtime="20201103 12:28:04.538"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:28:04.540" endtime="20201103 12:28:04.560"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.539" endtime="20201103 12:28:04.560"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.535" endtime="20201103 12:28:04.561"></status>
</kw>
<status status="PASS" starttime="20201103 12:27:57.089" endtime="20201103 12:28:04.561"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:27:53.993" endtime="20201103 12:28:04.562" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:28:04.568" endtime="20201103 12:28:04.588"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.567" endtime="20201103 12:28:04.588"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:04.602" endtime="20201103 12:28:07.624"></status>
</kw>
<msg timestamp="20201103 12:28:07.625" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:04.600" endtime="20201103 12:28:07.625"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:07.630" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:07.627" endtime="20201103 12:28:07.631"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:28:07.636" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:28:07.632" endtime="20201103 12:28:07.637"></status>
</kw>
<status status="FAIL" starttime="20201103 12:28:04.597" endtime="20201103 12:28:07.638"></status>
</kw>
<status status="FAIL" starttime="20201103 12:28:04.595" endtime="20201103 12:28:07.640"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.593" endtime="20201103 12:28:07.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:28:07.648" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:28:07.646" endtime="20201103 12:28:07.649"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:07.642" endtime="20201103 12:28:07.649"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.593" endtime="20201103 12:28:07.649"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.592" endtime="20201103 12:28:07.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:07.651" endtime="20201103 12:28:07.654"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.591" endtime="20201103 12:28:07.656"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.589" endtime="20201103 12:28:07.657"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:04.566" endtime="20201103 12:28:07.657"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:07.674" endtime="20201103 12:28:14.700"></status>
</kw>
<msg timestamp="20201103 12:28:14.701" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:07.671" endtime="20201103 12:28:14.701"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.706" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:14.703" endtime="20201103 12:28:14.708"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:14.709" endtime="20201103 12:28:14.713"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:07.666" endtime="20201103 12:28:14.714"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:07.661" endtime="20201103 12:28:14.715"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:28:14.720" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:28:14.717" endtime="20201103 12:28:14.720"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.729" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:28:14.727" endtime="20201103 12:28:14.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.733" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:28:14.731" endtime="20201103 12:28:14.734"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:14.722" endtime="20201103 12:28:14.735"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.743" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:28:14.741" endtime="20201103 12:28:14.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.747" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:28:14.745" endtime="20201103 12:28:14.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:14.736" endtime="20201103 12:28:14.749"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.757" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:28:14.755" endtime="20201103 12:28:14.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:14.761" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:28:14.759" endtime="20201103 12:28:14.761"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:14.750" endtime="20201103 12:28:14.762"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:14.768" endtime="20201103 12:28:15.067"></status>
</kw>
<msg timestamp="20201103 12:28:15.070" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.097272514, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.197283542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:28:14.767" endtime="20201103 12:28:15.070"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:15.078" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.097272514, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.197283542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:28:15.071" endtime="20201103 12:28:15.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:15.079" endtime="20201103 12:28:15.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:14.764" endtime="20201103 12:28:15.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:14.762" endtime="20201103 12:28:15.082"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:28:15.086" level="INFO">${FILTERED} = [{'time': 4.197283542, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001102799999995, 'source_diff': 0.10001102799999995}, {'time': 4.297294958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:28:15.083" endtime="20201103 12:28:15.086"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:28:15.101" level="INFO">${RESULT} = {'diff': [0.10001102799999995, 0.10001086100000034, 0.10001087500000061, 0.10001080500000015, 0.10001081899999953, 0.10001086100000034, 0.10001084799999926, 0.10001084700000007, 0.1000108329999998, 0....</msg>
<status status="PASS" starttime="20201103 12:28:15.087" endtime="20201103 12:28:15.101"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:15.106" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:28:15.104" endtime="20201103 12:28:15.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:15.109" level="INFO">VALUE: [0.10001102799999995, 0.10001086100000034, 0.10001087500000061, 0.10001080500000015, 0.10001081899999953, 0.10001086100000034, 0.10001084799999926, 0.10001084700000007, 0.1000108329999998, 0.1000108329999998, 0.10001084700000007, 0.10001084800000015, 0.10001084700000007, 0.10001084700000007, 0.10001084699999918, 0.10001084700000007, 0.10001086100000034, 0.10001081900000042, 0.10001079099999988, 0.10001079099999988, 0.10001081900000042, 0.10001081900000042, 0.10001080500000015, 0.10001090299999937, 0.10001081899999953, 0.10001080500000015, 0.10001080599999934, 0.10001081899999953, 0.10001086099999945, 0.10001080600000023, 0.1000108200000005, 0.10001084700000007, 0.10001081899999953, 0.10001084700000007, 0.1000108329999998, 0.10001081900000042, 0.10001081900000042, 0.10001081900000042, 0.10001080600000023, 0.10001081999999961, 0.10001080600000023, 0.10001080599999845, 0.10001086100000123, 0.10001083300000069, 0.10001081899999953, 0.10001080500000015, 0.10001080599999845, 0.10001083300000069, 0.10001081999999961, 0.10001084700000007]</msg>
<status status="PASS" starttime="20201103 12:28:15.107" endtime="20201103 12:28:15.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.102" endtime="20201103 12:28:15.110"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:15.112" endtime="20201103 12:28:15.113"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:28:15.115" endtime="20201103 12:28:15.135"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.114" endtime="20201103 12:28:15.135"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.110" endtime="20201103 12:28:15.136"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:07.658" endtime="20201103 12:28:15.136"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:28:04.563" endtime="20201103 12:28:15.137" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:28:15.144" endtime="20201103 12:28:15.163"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.142" endtime="20201103 12:28:15.164"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:15.178" endtime="20201103 12:28:18.200"></status>
</kw>
<msg timestamp="20201103 12:28:18.201" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:15.177" endtime="20201103 12:28:18.201"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:18.207" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:18.203" endtime="20201103 12:28:18.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:28:18.213" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:28:18.209" endtime="20201103 12:28:18.214"></status>
</kw>
<status status="FAIL" starttime="20201103 12:28:15.174" endtime="20201103 12:28:18.215"></status>
</kw>
<status status="FAIL" starttime="20201103 12:28:15.171" endtime="20201103 12:28:18.217"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.169" endtime="20201103 12:28:18.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:28:18.225" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:28:18.224" endtime="20201103 12:28:18.226"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:18.219" endtime="20201103 12:28:18.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.168" endtime="20201103 12:28:18.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.168" endtime="20201103 12:28:18.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:18.229" endtime="20201103 12:28:18.232"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.166" endtime="20201103 12:28:18.234"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.164" endtime="20201103 12:28:18.235"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:15.141" endtime="20201103 12:28:18.235"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:18.254" endtime="20201103 12:28:25.280"></status>
</kw>
<msg timestamp="20201103 12:28:25.281" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:18.251" endtime="20201103 12:28:25.282"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.288" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:28:25.284" endtime="20201103 12:28:25.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:25.290" endtime="20201103 12:28:25.294"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:18.244" endtime="20201103 12:28:25.295"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:18.240" endtime="20201103 12:28:25.297"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:28:25.302" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:28:25.298" endtime="20201103 12:28:25.303"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.311" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:28:25.309" endtime="20201103 12:28:25.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.316" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:28:25.314" endtime="20201103 12:28:25.317"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.304" endtime="20201103 12:28:25.318"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.327" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:28:25.324" endtime="20201103 12:28:25.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.331" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:28:25.329" endtime="20201103 12:28:25.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.319" endtime="20201103 12:28:25.333"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.342" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:28:25.340" endtime="20201103 12:28:25.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.349" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:28:25.347" endtime="20201103 12:28:25.350"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.334" endtime="20201103 12:28:25.351"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:25.365" endtime="20201103 12:28:25.668"></status>
</kw>
<msg timestamp="20201103 12:28:25.671" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.102049639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.202060667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:28:25.362" endtime="20201103 12:28:25.671"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.679" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.102049639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.202060667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:28:25.672" endtime="20201103 12:28:25.680"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:25.680" endtime="20201103 12:28:25.682"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.356" endtime="20201103 12:28:25.683"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.352" endtime="20201103 12:28:25.683"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:28:25.688" level="INFO">${FILTERED} = [{'time': 4.202060667, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001102799999995, 'source_diff': 0.10001102799999995}, {'time': 4.302072069, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:28:25.684" endtime="20201103 12:28:25.688"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:28:25.702" level="INFO">${RESULT} = {'diff': [0.10001102799999995, 0.10001081900000042, 0.10001083300000069, 0.10001087499999972, 0.10001083399999988, 0.10001084799999926, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0...</msg>
<status status="PASS" starttime="20201103 12:28:25.689" endtime="20201103 12:28:25.702"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.706" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:28:25.705" endtime="20201103 12:28:25.706"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:28:25.709" level="INFO">VALUE: [0.10001102799999995, 0.10001081900000042, 0.10001083300000069, 0.10001087499999972, 0.10001083399999988, 0.10001084799999926, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001083300000069, 0.1000108200000005, 0.10001081999999961, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.10001093099999991, 0.10001084700000007, 0.10001081900000042, 0.10001079199999996, 0.1000108329999998, 0.1000108329999998, 0.10001079099999988, 0.10001086100000034, 0.1000107770000005, 0.10001080500000015, 0.10001087500000061, 0.10001080600000023, 0.1000108329999998, 0.1000108329999998, 0.1000108200000005, 0.10001080600000023, 0.10001080600000023, 0.10001081900000042, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001090299999937, 0.10001091600000045, 0.10001084700000007, 0.100010833999999, 0.10001080600000023, 0.10001080600000023, 0.10001080500000015, 0.10001084700000007, 0.10001086099999945, 0.10001083300000069, 0.10001086099999945, 0.10001083400000077, 0.10001083400000077, 0.10001083400000077]</msg>
<status status="PASS" starttime="20201103 12:28:25.707" endtime="20201103 12:28:25.709"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.703" endtime="20201103 12:28:25.709"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:28:25.712" endtime="20201103 12:28:25.713"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:28:25.715" endtime="20201103 12:28:25.735"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.714" endtime="20201103 12:28:25.736"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:25.710" endtime="20201103 12:28:25.736"></status>
</kw>
<status status="PASS" starttime="20201103 12:28:18.237" endtime="20201103 12:28:25.736"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:28:15.138" endtime="20201103 12:28:25.737" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:27:14.628" endtime="20201103 12:28:25.744"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">arduino-due</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:27:00.386" endtime="20201103 12:28:25.777"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_arduino-due</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
