<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:35:50.673" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:54.348" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:54.356" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:55.498" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:54.347" endtime="20201103 12:35:55.499"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:58.502" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:35:55.500" endtime="20201103 12:35:58.503"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.345" endtime="20201103 12:35:58.504"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:58.506" endtime="20201103 12:35:58.691"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:58.504" endtime="20201103 12:35:58.691"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:58.705" endtime="20201103 12:36:01.726"></status>
</kw>
<msg timestamp="20201103 12:36:01.727" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:58.703" endtime="20201103 12:36:01.727"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.732" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.729" endtime="20201103 12:36:01.733"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.738" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:01.734" endtime="20201103 12:36:01.739"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:58.700" endtime="20201103 12:36:01.740"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:58.698" endtime="20201103 12:36:01.742"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:58.697" endtime="20201103 12:36:01.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:01.750" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:01.749" endtime="20201103 12:36:01.751"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.744" endtime="20201103 12:36:01.751"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:58.696" endtime="20201103 12:36:01.752"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:58.695" endtime="20201103 12:36:01.752"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.754" endtime="20201103 12:36:01.757"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:58.694" endtime="20201103 12:36:01.758"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.759" endtime="20201103 12:36:01.762"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:58.692" endtime="20201103 12:36:01.763"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:54.344" endtime="20201103 12:36:01.764"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:01.777" endtime="20201103 12:36:01.797"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.774" endtime="20201103 12:36:01.797"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.812" endtime="20201103 12:36:04.831"></status>
</kw>
<msg timestamp="20201103 12:36:04.832" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.810" endtime="20201103 12:36:04.833"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.838" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.834" endtime="20201103 12:36:04.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.844" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:04.840" endtime="20201103 12:36:04.844"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.807" endtime="20201103 12:36:04.846"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.804" endtime="20201103 12:36:04.847"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.802" endtime="20201103 12:36:04.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:04.855" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:04.854" endtime="20201103 12:36:04.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.849" endtime="20201103 12:36:04.856"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.802" endtime="20201103 12:36:04.857"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.801" endtime="20201103 12:36:04.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.859" endtime="20201103 12:36:04.862"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.800" endtime="20201103 12:36:04.863"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.798" endtime="20201103 12:36:04.864"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.771" endtime="20201103 12:36:04.864"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.878" endtime="20201103 12:36:04.892"></status>
</kw>
<msg timestamp="20201103 12:36:04.893" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.875" endtime="20201103 12:36:04.893"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.898" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:04.895" endtime="20201103 12:36:04.899"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:04.900" endtime="20201103 12:36:04.904"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.869" endtime="20201103 12:36:04.905"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.866" endtime="20201103 12:36:04.906"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.914" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:36:04.911" endtime="20201103 12:36:04.914"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.918" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:36:04.916" endtime="20201103 12:36:04.919"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.907" endtime="20201103 12:36:04.920"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:01.765" endtime="20201103 12:36:04.921" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:50.802" endtime="20201103 12:36:04.927"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:04.984" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:04.992" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:06.104" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:04.982" endtime="20201103 12:36:06.105"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:09.108" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:36:06.106" endtime="20201103 12:36:09.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.981" endtime="20201103 12:36:09.111"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:09.115" endtime="20201103 12:36:09.409"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.112" endtime="20201103 12:36:09.410"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:09.422" endtime="20201103 12:36:12.443"></status>
</kw>
<msg timestamp="20201103 12:36:12.444" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:09.420" endtime="20201103 12:36:12.444"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:12.449" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:12.446" endtime="20201103 12:36:12.450"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:12.456" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:12.451" endtime="20201103 12:36:12.456"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:09.418" endtime="20201103 12:36:12.458"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:09.416" endtime="20201103 12:36:12.459"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.415" endtime="20201103 12:36:12.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:12.469" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:12.467" endtime="20201103 12:36:12.470"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.461" endtime="20201103 12:36:12.470"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.414" endtime="20201103 12:36:12.470"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.413" endtime="20201103 12:36:12.471"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:12.472" endtime="20201103 12:36:12.475"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.412" endtime="20201103 12:36:12.476"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:12.478" endtime="20201103 12:36:12.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:09.410" endtime="20201103 12:36:12.482"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:04.980" endtime="20201103 12:36:12.483"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:12.494" endtime="20201103 12:36:12.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.491" endtime="20201103 12:36:12.517"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:12.543" endtime="20201103 12:36:15.567"></status>
</kw>
<msg timestamp="20201103 12:36:15.568" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:12.540" endtime="20201103 12:36:15.569"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.574" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:15.571" endtime="20201103 12:36:15.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.582" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:15.577" endtime="20201103 12:36:15.583"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:12.535" endtime="20201103 12:36:15.584"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:12.530" endtime="20201103 12:36:15.586"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.528" endtime="20201103 12:36:15.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:15.595" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:15.593" endtime="20201103 12:36:15.596"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.588" endtime="20201103 12:36:15.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.526" endtime="20201103 12:36:15.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.524" endtime="20201103 12:36:15.597"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:15.599" endtime="20201103 12:36:15.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.522" endtime="20201103 12:36:15.604"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.518" endtime="20201103 12:36:15.606"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:12.488" endtime="20201103 12:36:15.607"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:15.627" endtime="20201103 12:36:22.652"></status>
</kw>
<msg timestamp="20201103 12:36:22.653" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:15.624" endtime="20201103 12:36:22.653"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.659" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.656" endtime="20201103 12:36:22.660"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.662" endtime="20201103 12:36:22.665"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.616" endtime="20201103 12:36:22.666"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.611" endtime="20201103 12:36:22.667"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:22.672" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:36:22.669" endtime="20201103 12:36:22.672"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.681" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:22.678" endtime="20201103 12:36:22.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.685" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:22.683" endtime="20201103 12:36:22.686"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.674" endtime="20201103 12:36:22.687"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.694" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:22.692" endtime="20201103 12:36:22.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.699" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:22.697" endtime="20201103 12:36:22.699"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.688" endtime="20201103 12:36:22.700"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.708" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:22.706" endtime="20201103 12:36:22.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.713" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:36:22.710" endtime="20201103 12:36:22.714"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.702" endtime="20201103 12:36:22.715"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.728" endtime="20201103 12:36:23.039"></status>
</kw>
<msg timestamp="20201103 12:36:23.042" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.122495889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.222506931, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:22.725" endtime="20201103 12:36:23.042"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.050" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.122495889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.222506931, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:23.043" endtime="20201103 12:36:23.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.051" endtime="20201103 12:36:23.053"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.720" endtime="20201103 12:36:23.054"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.716" endtime="20201103 12:36:23.054"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:23.058" level="INFO">${FILTERED} = [{'time': 4.222506931, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001104200000022, 'source_diff': 0.10001104200000022}, {'time': 4.322517292, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:23.055" endtime="20201103 12:36:23.058"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:23.072" level="INFO">${RESULT} = {'diff': [0.10001104200000022, 0.10000981999999947, 0.10001083399999988, 0.10001084800000015, 0.10001084700000007, 0.10001084699999918, 0.1000108329999998, 0.1000108329999998, 0.10001086100000034, 0.1...</msg>
<status status="PASS" starttime="20201103 12:36:23.059" endtime="20201103 12:36:23.072"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.076" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:23.075" endtime="20201103 12:36:23.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.079" level="INFO">VALUE: [0.10001104200000022, 0.10000981999999947, 0.10001083399999988, 0.10001084800000015, 0.10001084700000007, 0.10001084699999918, 0.1000108329999998, 0.1000108329999998, 0.10001086100000034, 0.1000108329999998, 0.10001088899999999, 0.10001090300000026, 0.10001084700000007, 0.10001084700000007, 0.10001086200000042, 0.10001087499999972, 0.10001086099999945, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.10001084700000007, 0.10001086200000042, 0.10001090299999937, 0.10001086100000034, 0.10001083300000069, 0.10001086100000034, 0.10001084700000007, 0.10001084700000007, 0.10001087499999972, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001087499999972, 0.10001084800000015, 0.10001084800000015, 0.10001087499999883, 0.10001083300000069, 0.10001087499999883, 0.10001084700000007, 0.10001084800000015, 0.10001086100000123, 0.10001087500000061, 0.10001084700000007, 0.10001086099999945, 0.10001084800000015, 0.10001091700000053, 0.10001086099999945]</msg>
<status status="PASS" starttime="20201103 12:36:23.077" endtime="20201103 12:36:23.079"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.073" endtime="20201103 12:36:23.080"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.082" endtime="20201103 12:36:23.083"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:23.086" endtime="20201103 12:36:23.105"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.084" endtime="20201103 12:36:23.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.080" endtime="20201103 12:36:23.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.608" endtime="20201103 12:36:23.107"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:12.484" endtime="20201103 12:36:23.107" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:23.114" endtime="20201103 12:36:23.133"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.112" endtime="20201103 12:36:23.134"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.148" endtime="20201103 12:36:26.172"></status>
</kw>
<msg timestamp="20201103 12:36:26.174" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:23.146" endtime="20201103 12:36:26.174"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:26.181" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:26.177" endtime="20201103 12:36:26.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:26.192" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:26.185" endtime="20201103 12:36:26.193"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:23.144" endtime="20201103 12:36:26.195"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:23.141" endtime="20201103 12:36:26.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.139" endtime="20201103 12:36:26.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:26.205" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:26.204" endtime="20201103 12:36:26.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:26.199" endtime="20201103 12:36:26.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.139" endtime="20201103 12:36:26.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.138" endtime="20201103 12:36:26.210"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:26.211" endtime="20201103 12:36:26.214"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.137" endtime="20201103 12:36:26.216"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.135" endtime="20201103 12:36:26.217"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.111" endtime="20201103 12:36:26.217"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:26.236" endtime="20201103 12:36:33.262"></status>
</kw>
<msg timestamp="20201103 12:36:33.263" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:26.232" endtime="20201103 12:36:33.264"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.269" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:33.266" endtime="20201103 12:36:33.270"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.271" endtime="20201103 12:36:33.275"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:26.226" endtime="20201103 12:36:33.276"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:26.222" endtime="20201103 12:36:33.277"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:33.282" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:36:33.279" endtime="20201103 12:36:33.283"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.292" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:33.289" endtime="20201103 12:36:33.293"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.297" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:33.294" endtime="20201103 12:36:33.298"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.284" endtime="20201103 12:36:33.299"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.308" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:33.306" endtime="20201103 12:36:33.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.314" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:33.311" endtime="20201103 12:36:33.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.300" endtime="20201103 12:36:33.316"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.325" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:33.323" endtime="20201103 12:36:33.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.330" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:36:33.328" endtime="20201103 12:36:33.330"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.317" endtime="20201103 12:36:33.332"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.346" endtime="20201103 12:36:33.649"></status>
</kw>
<msg timestamp="20201103 12:36:33.652" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.113246306, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.213256319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:33.342" endtime="20201103 12:36:33.652"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.660" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.113246306, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.213256319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:33.653" endtime="20201103 12:36:33.661"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.661" endtime="20201103 12:36:33.663"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.337" endtime="20201103 12:36:33.664"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.333" endtime="20201103 12:36:33.664"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:33.668" level="INFO">${FILTERED} = [{'time': 4.213256319, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001001300000034, 'source_diff': 0.10001001300000034}, {'time': 4.313267694, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:33.665" endtime="20201103 12:36:33.668"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:33.682" level="INFO">${RESULT} = {'diff': [0.10001001300000034, 0.10001083300000069, 0.10001084700000007, 0.1000108329999998, 0.10001083300000069, 0.1000108329999998, 0.10001087499999972, 0.10001080499999926, 0.10001084700000007, 0.1...</msg>
<status status="PASS" starttime="20201103 12:36:33.669" endtime="20201103 12:36:33.682"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.686" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:33.685" endtime="20201103 12:36:33.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.689" level="INFO">VALUE: [0.10001001300000034, 0.10001083300000069, 0.10001084700000007, 0.1000108329999998, 0.10001083300000069, 0.1000108329999998, 0.10001087499999972, 0.10001080499999926, 0.10001084700000007, 0.10001083300000069, 0.10001084700000007, 0.10001084699999918, 0.10001081900000042, 0.10001084700000007, 0.10001083300000069, 0.10001086100000034, 0.10001083400000077, 0.10001084800000015, 0.10001083399999988, 0.10001083399999988, 0.10001084700000007, 0.10001088899999999, 0.10001081900000042, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001086200000042, 0.10001083399999988, 0.10001086100000034, 0.10001084700000007, 0.10001084699999918, 0.1000108329999998, 0.10001086099999945, 0.10001084700000007, 0.10001083400000077, 0.10001086200000042, 0.10001086100000034, 0.1000108329999998, 0.10001086099999945, 0.10001084700000007, 0.10001084700000007, 0.10001088799999991, 0.10001087500000061, 0.10001087500000061, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001086099999945, 0.10001086099999945]</msg>
<status status="PASS" starttime="20201103 12:36:33.688" endtime="20201103 12:36:33.689"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.683" endtime="20201103 12:36:33.690"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.692" endtime="20201103 12:36:33.694"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:33.696" endtime="20201103 12:36:33.715"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.694" endtime="20201103 12:36:33.716"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.690" endtime="20201103 12:36:33.716"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:26.219" endtime="20201103 12:36:33.717"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:23.109" endtime="20201103 12:36:33.717" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:33.724" endtime="20201103 12:36:33.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.723" endtime="20201103 12:36:33.745"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.758" endtime="20201103 12:36:36.781"></status>
</kw>
<msg timestamp="20201103 12:36:36.782" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:33.757" endtime="20201103 12:36:36.783"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.788" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:36.785" endtime="20201103 12:36:36.788"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:36.794" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:36.790" endtime="20201103 12:36:36.795"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:33.754" endtime="20201103 12:36:36.796"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:33.751" endtime="20201103 12:36:36.798"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.750" endtime="20201103 12:36:36.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:36.806" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:36.805" endtime="20201103 12:36:36.807"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.800" endtime="20201103 12:36:36.808"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.749" endtime="20201103 12:36:36.808"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.749" endtime="20201103 12:36:36.809"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.810" endtime="20201103 12:36:36.813"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.747" endtime="20201103 12:36:36.815"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.745" endtime="20201103 12:36:36.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.721" endtime="20201103 12:36:36.816"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:36.834" endtime="20201103 12:36:43.861"></status>
</kw>
<msg timestamp="20201103 12:36:43.862" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:36.831" endtime="20201103 12:36:43.862"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.868" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:43.864" endtime="20201103 12:36:43.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.870" endtime="20201103 12:36:43.873"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.825" endtime="20201103 12:36:43.875"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.821" endtime="20201103 12:36:43.876"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:43.881" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:36:43.877" endtime="20201103 12:36:43.882"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.891" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:43.888" endtime="20201103 12:36:43.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.896" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:43.894" endtime="20201103 12:36:43.897"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.883" endtime="20201103 12:36:43.898"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.906" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:43.904" endtime="20201103 12:36:43.907"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.911" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:43.909" endtime="20201103 12:36:43.912"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.899" endtime="20201103 12:36:43.913"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.921" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:43.919" endtime="20201103 12:36:43.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:43.926" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:36:43.924" endtime="20201103 12:36:43.927"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.914" endtime="20201103 12:36:43.928"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:43.942" endtime="20201103 12:36:44.246"></status>
</kw>
<msg timestamp="20201103 12:36:44.249" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.101369319, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.201379333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:43.939" endtime="20201103 12:36:44.249"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:44.257" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.101369319, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.201379333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:44.250" endtime="20201103 12:36:44.257"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:44.258" endtime="20201103 12:36:44.260"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.933" endtime="20201103 12:36:44.260"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:43.929" endtime="20201103 12:36:44.261"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:44.265" level="INFO">${FILTERED} = [{'time': 4.201379333, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001001400000042, 'source_diff': 0.10001001400000042}, {'time': 4.301390708, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:44.262" endtime="20201103 12:36:44.265"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:44.278" level="INFO">${RESULT} = {'diff': [0.10001001400000042, 0.1000108329999998, 0.10001084700000007, 0.10001087500000061, 0.10001080500000015, 0.10001086099999945, 0.10001084700000007, 0.1000108200000005, 0.10001084700000007, 0.1...</msg>
<status status="PASS" starttime="20201103 12:36:44.266" endtime="20201103 12:36:44.278"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:44.282" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:44.281" endtime="20201103 12:36:44.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:44.284" level="INFO">VALUE: [0.10001001400000042, 0.1000108329999998, 0.10001084700000007, 0.10001087500000061, 0.10001080500000015, 0.10001086099999945, 0.10001084700000007, 0.1000108200000005, 0.10001084700000007, 0.10001084800000015, 0.10001086100000034, 0.1000108329999998, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001086099999945, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001084800000015, 0.10001084800000015, 0.10001086100000034, 0.10001086100000034, 0.10001087499999972, 0.10001086200000042, 0.10001087499999972, 0.10001083399999988, 0.10001086100000034, 0.10001087500000061, 0.10001081900000042, 0.10001086100000034, 0.10001084700000007, 0.10001087499999972, 0.10001084700000007, 0.10001090300000026, 0.10001086100000034, 0.10001086100000034, 0.10001086100000034, 0.10001084800000104, 0.10001086100000123, 0.10001086099999945, 0.10001087499999883, 0.10001084700000007, 0.10001086199999953, 0.10001091700000053, 0.10001086099999945, 0.10001087499999883, 0.10001087500000061, 0.10001083400000077, 0.10001087499999883]</msg>
<status status="PASS" starttime="20201103 12:36:44.283" endtime="20201103 12:36:44.285"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.279" endtime="20201103 12:36:44.286"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:44.288" endtime="20201103 12:36:44.290"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:44.292" endtime="20201103 12:36:44.311"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.290" endtime="20201103 12:36:44.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.286" endtime="20201103 12:36:44.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:36.818" endtime="20201103 12:36:44.313"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:33.719" endtime="20201103 12:36:44.313" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:44.320" endtime="20201103 12:36:44.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.319" endtime="20201103 12:36:44.340"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:44.355" endtime="20201103 12:36:47.378"></status>
</kw>
<msg timestamp="20201103 12:36:47.379" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:44.353" endtime="20201103 12:36:47.379"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.384" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.381" endtime="20201103 12:36:47.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:47.391" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:47.387" endtime="20201103 12:36:47.392"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:44.350" endtime="20201103 12:36:47.393"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:44.347" endtime="20201103 12:36:47.394"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.346" endtime="20201103 12:36:47.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:47.403" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:47.402" endtime="20201103 12:36:47.404"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.397" endtime="20201103 12:36:47.404"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.345" endtime="20201103 12:36:47.405"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.344" endtime="20201103 12:36:47.405"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.407" endtime="20201103 12:36:47.410"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.343" endtime="20201103 12:36:47.411"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.341" endtime="20201103 12:36:47.412"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:44.317" endtime="20201103 12:36:47.413"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.431" endtime="20201103 12:36:54.458"></status>
</kw>
<msg timestamp="20201103 12:36:54.459" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.428" endtime="20201103 12:36:54.459"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.464" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:54.461" endtime="20201103 12:36:54.465"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.467" endtime="20201103 12:36:54.471"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.422" endtime="20201103 12:36:54.472"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.417" endtime="20201103 12:36:54.473"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:54.479" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:36:54.475" endtime="20201103 12:36:54.479"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.488" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:54.486" endtime="20201103 12:36:54.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.492" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:54.490" endtime="20201103 12:36:54.493"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.481" endtime="20201103 12:36:54.494"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.503" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:54.501" endtime="20201103 12:36:54.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.507" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:54.505" endtime="20201103 12:36:54.508"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.496" endtime="20201103 12:36:54.509"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.518" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:54.516" endtime="20201103 12:36:54.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.522" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:54.520" endtime="20201103 12:36:54.523"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.511" endtime="20201103 12:36:54.524"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.541" endtime="20201103 12:36:54.849"></status>
</kw>
<msg timestamp="20201103 12:36:54.852" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.102824458, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.202834542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:54.537" endtime="20201103 12:36:54.852"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.860" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.102824458, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.202834542, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:54.853" endtime="20201103 12:36:54.861"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.861" endtime="20201103 12:36:54.863"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.531" endtime="20201103 12:36:54.864"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.525" endtime="20201103 12:36:54.864"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:54.868" level="INFO">${FILTERED} = [{'time': 4.202834542, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100010084, 'source_diff': 0.100010084}, {'time': 4.302845847, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100010833000000...</msg>
<status status="PASS" starttime="20201103 12:36:54.865" endtime="20201103 12:36:54.868"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:54.881" level="INFO">${RESULT} = {'diff': [0.100010084, 0.10001083300000069, 0.10001084700000007, 0.1000108329999998, 0.10001088899999999, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.1000108329999998, 0.1000108470...</msg>
<status status="PASS" starttime="20201103 12:36:54.869" endtime="20201103 12:36:54.881"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.886" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:54.885" endtime="20201103 12:36:54.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.888" level="INFO">VALUE: [0.100010084, 0.10001083300000069, 0.10001084700000007, 0.1000108329999998, 0.10001088899999999, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.1000108329999998, 0.10001084700000007, 0.10001084800000015, 0.10001083399999988, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001088799999991, 0.10001087500000061, 0.10001090300000026, 0.10001084700000007, 0.10001084699999918, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001086100000034, 0.10001084800000015, 0.10001084800000015, 0.10001084700000007, 0.10001087499999972, 0.10001088899999999, 0.10001084700000007, 0.10001090200000018, 0.10001087500000061, 0.10001084700000007, 0.10001084700000007, 0.10001086100000123, 0.10001084700000007, 0.10001086100000123, 0.10001086200000131, 0.10001084700000007, 0.10001088899999999, 0.10001084700000007, 0.10001084700000007, 0.10001086200000131, 0.10001086100000123, 0.10001090299999937]</msg>
<status status="PASS" starttime="20201103 12:36:54.887" endtime="20201103 12:36:54.889"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.882" endtime="20201103 12:36:54.889"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.892" endtime="20201103 12:36:54.893"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:54.895" endtime="20201103 12:36:54.915"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.894" endtime="20201103 12:36:54.916"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.890" endtime="20201103 12:36:54.916"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.414" endtime="20201103 12:36:54.917"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:44.315" endtime="20201103 12:36:54.917" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:54.924" endtime="20201103 12:36:54.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.922" endtime="20201103 12:36:54.944"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.958" endtime="20201103 12:36:57.981"></status>
</kw>
<msg timestamp="20201103 12:36:57.982" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:54.957" endtime="20201103 12:36:57.982"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.988" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.984" endtime="20201103 12:36:57.989"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.995" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:57.990" endtime="20201103 12:36:57.995"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:54.954" endtime="20201103 12:36:57.997"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:54.951" endtime="20201103 12:36:57.998"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.949" endtime="20201103 12:36:57.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:58.008" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:58.006" endtime="20201103 12:36:58.009"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.001" endtime="20201103 12:36:58.009"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.949" endtime="20201103 12:36:58.009"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.948" endtime="20201103 12:36:58.010"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.011" endtime="20201103 12:36:58.015"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.946" endtime="20201103 12:36:58.016"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.945" endtime="20201103 12:36:58.017"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.921" endtime="20201103 12:36:58.018"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.036" endtime="20201103 12:37:05.062"></status>
</kw>
<msg timestamp="20201103 12:37:05.063" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:58.032" endtime="20201103 12:37:05.063"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.069" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:05.065" endtime="20201103 12:37:05.070"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.072" endtime="20201103 12:37:05.076"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.026" endtime="20201103 12:37:05.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.022" endtime="20201103 12:37:05.078"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:05.083" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:37:05.079" endtime="20201103 12:37:05.084"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.092" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:05.090" endtime="20201103 12:37:05.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.097" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:05.095" endtime="20201103 12:37:05.098"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.085" endtime="20201103 12:37:05.099"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.107" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:05.105" endtime="20201103 12:37:05.108"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.112" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:05.110" endtime="20201103 12:37:05.112"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.100" endtime="20201103 12:37:05.113"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.118" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:05.117" endtime="20201103 12:37:05.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.120" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:37:05.119" endtime="20201103 12:37:05.121"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.114" endtime="20201103 12:37:05.121"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.128" endtime="20201103 12:37:05.427"></status>
</kw>
<msg timestamp="20201103 12:37:05.430" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.103503528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.203513556, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:05.126" endtime="20201103 12:37:05.430"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.438" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.103503528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.203513556, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:05.431" endtime="20201103 12:37:05.438"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.439" endtime="20201103 12:37:05.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.124" endtime="20201103 12:37:05.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.122" endtime="20201103 12:37:05.442"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:05.446" level="INFO">${FILTERED} = [{'time': 4.203513556, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000100279999998, 'source_diff': 0.1000100279999998}, {'time': 4.303524917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:37:05.442" endtime="20201103 12:37:05.446"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:05.461" level="INFO">${RESULT} = {'diff': [0.1000100279999998, 0.10001081999999961, 0.10001084800000015, 0.10001083399999988, 0.10001083399999988, 0.10001086099999945, 0.10001081899999953, 0.10001086099999945, 0.1000108329999998, 0.1...</msg>
<status status="PASS" starttime="20201103 12:37:05.447" endtime="20201103 12:37:05.461"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.465" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:05.464" endtime="20201103 12:37:05.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:05.468" level="INFO">VALUE: [0.1000100279999998, 0.10001081999999961, 0.10001084800000015, 0.10001083399999988, 0.10001083399999988, 0.10001086099999945, 0.10001081899999953, 0.10001086099999945, 0.1000108329999998, 0.10001081899999953, 0.10001086099999945, 0.1000108329999998, 0.1000108329999998, 0.10001086100000034, 0.10001083300000069, 0.1000108329999998, 0.10001091599999956, 0.10001084800000015, 0.10001084800000015, 0.10001083399999988, 0.10001084700000007, 0.10001084700000007, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001086200000042, 0.10001084700000007, 0.10001086099999945, 0.1000108329999998, 0.10001086099999945, 0.1000108329999998, 0.10001087500000061, 0.10001084800000015, 0.10001083399999988, 0.10001086099999945, 0.10001086099999945, 0.10001084700000007, 0.10001084700000007, 0.10001086100000123, 0.10001084800000015, 0.10001087500000061, 0.10001090299999937, 0.10001086099999945, 0.10001087500000061, 0.10001087500000061, 0.10001081899999953, 0.10001086099999945, 0.10001086099999945]</msg>
<status status="PASS" starttime="20201103 12:37:05.466" endtime="20201103 12:37:05.469"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.462" endtime="20201103 12:37:05.469"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.472" endtime="20201103 12:37:05.473"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:05.475" endtime="20201103 12:37:05.495"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.474" endtime="20201103 12:37:05.495"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.470" endtime="20201103 12:37:05.496"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.019" endtime="20201103 12:37:05.496"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:54.919" endtime="20201103 12:37:05.497" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:05.503" endtime="20201103 12:37:05.523"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.502" endtime="20201103 12:37:05.524"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:05.538" endtime="20201103 12:37:08.559"></status>
</kw>
<msg timestamp="20201103 12:37:08.561" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:05.536" endtime="20201103 12:37:08.561"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:08.566" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:08.563" endtime="20201103 12:37:08.567"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:08.573" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:08.569" endtime="20201103 12:37:08.573"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:05.534" endtime="20201103 12:37:08.575"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:05.531" endtime="20201103 12:37:08.576"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.529" endtime="20201103 12:37:08.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:08.585" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:08.583" endtime="20201103 12:37:08.586"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:08.579" endtime="20201103 12:37:08.586"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.528" endtime="20201103 12:37:08.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.528" endtime="20201103 12:37:08.587"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:08.589" endtime="20201103 12:37:08.592"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.526" endtime="20201103 12:37:08.593"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.524" endtime="20201103 12:37:08.594"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:05.501" endtime="20201103 12:37:08.595"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:08.613" endtime="20201103 12:37:15.640"></status>
</kw>
<msg timestamp="20201103 12:37:15.641" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:08.610" endtime="20201103 12:37:15.642"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.647" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:15.644" endtime="20201103 12:37:15.648"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:15.650" endtime="20201103 12:37:15.653"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:08.603" endtime="20201103 12:37:15.654"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:08.599" endtime="20201103 12:37:15.655"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:15.661" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:37:15.657" endtime="20201103 12:37:15.661"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.670" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:15.667" endtime="20201103 12:37:15.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.674" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:15.672" endtime="20201103 12:37:15.675"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:15.662" endtime="20201103 12:37:15.676"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.685" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:15.682" endtime="20201103 12:37:15.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.689" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:15.687" endtime="20201103 12:37:15.690"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:15.677" endtime="20201103 12:37:15.691"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.700" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:15.697" endtime="20201103 12:37:15.700"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:15.702" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:37:15.701" endtime="20201103 12:37:15.702"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:15.692" endtime="20201103 12:37:15.703"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:15.709" endtime="20201103 12:37:16.009"></status>
</kw>
<msg timestamp="20201103 12:37:16.012" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.101654042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.201664069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:15.708" endtime="20201103 12:37:16.012"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:16.020" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.101654042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.201664069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:16.013" endtime="20201103 12:37:16.020"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:16.021" endtime="20201103 12:37:16.023"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:15.705" endtime="20201103 12:37:16.023"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:15.703" endtime="20201103 12:37:16.024"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:16.028" level="INFO">${FILTERED} = [{'time': 4.201664069, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001002699999972, 'source_diff': 0.10001002699999972}, {'time': 4.301675444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:16.024" endtime="20201103 12:37:16.028"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:16.046" level="INFO">${RESULT} = {'diff': [0.10001002699999972, 0.1000108329999998, 0.10001086099999945, 0.10001080500000015, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001087499999972, 0.10001084700000007, 0.1...</msg>
<status status="PASS" starttime="20201103 12:37:16.034" endtime="20201103 12:37:16.046"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:16.050" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:16.049" endtime="20201103 12:37:16.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:16.053" level="INFO">VALUE: [0.10001002699999972, 0.1000108329999998, 0.10001086099999945, 0.10001080500000015, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001087499999972, 0.10001084700000007, 0.10001083300000069, 0.1000108329999998, 0.10001086099999945, 0.10001081899999953, 0.10001086100000034, 0.10001081900000042, 0.10001087499999972, 0.10001083399999988, 0.10001081999999961, 0.10001084800000015, 0.10001087500000061, 0.10001080600000023, 0.10001084700000007, 0.10001086099999945, 0.10001086100000034, 0.1000108329999998, 0.10001086099999945, 0.10001083399999988, 0.10001084800000015, 0.10001083399999988, 0.10001084800000015, 0.10001088899999999, 0.10001088899999999, 0.1000108329999998, 0.10001083300000069, 0.10001084700000007, 0.10001087500000061, 0.10001084800000015, 0.10001084700000007, 0.10001086099999945, 0.10001083300000069, 0.10001086099999945, 0.10001086099999945, 0.10001088899999999, 0.10001087500000061, 0.10001083299999891, 0.10001086099999945, 0.10001084700000007, 0.10001086099999945, 0.10001086099999945, 0.10001084800000015]</msg>
<status status="PASS" starttime="20201103 12:37:16.051" endtime="20201103 12:37:16.053"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:16.047" endtime="20201103 12:37:16.054"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:16.056" endtime="20201103 12:37:16.057"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:16.060" endtime="20201103 12:37:16.079"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:16.058" endtime="20201103 12:37:16.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:16.054" endtime="20201103 12:37:16.080"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:08.596" endtime="20201103 12:37:16.081"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:05.498" endtime="20201103 12:37:16.081" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:04.939" endtime="20201103 12:37:16.089"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">arduino-due</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:35:50.685" endtime="20201103 12:37:16.115"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_arduino-due</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
