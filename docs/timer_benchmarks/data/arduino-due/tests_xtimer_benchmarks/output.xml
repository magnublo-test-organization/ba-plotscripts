<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:25:17.462" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:21.084" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:21.093" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:22.232" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:21.083" endtime="20201103 12:25:22.233"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.239" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:25:22.235" endtime="20201103 12:25:25.241"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.082" endtime="20201103 12:25:25.242"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:25.246" endtime="20201103 12:25:25.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.243" endtime="20201103 12:25:25.485"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.499" endtime="20201103 12:25:28.522"></status>
</kw>
<msg timestamp="20201103 12:25:28.523" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.496" endtime="20201103 12:25:28.523"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.528" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:28.525" endtime="20201103 12:25:28.529"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:28.535" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:28.531" endtime="20201103 12:25:28.536"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:25.494" endtime="20201103 12:25:28.538"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:25.492" endtime="20201103 12:25:28.539"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.490" endtime="20201103 12:25:28.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:28.548" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:28.547" endtime="20201103 12:25:28.549"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.541" endtime="20201103 12:25:28.550"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.490" endtime="20201103 12:25:28.550"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.489" endtime="20201103 12:25:28.550"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:28.552" endtime="20201103 12:25:28.555"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.487" endtime="20201103 12:25:28.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:28.558" endtime="20201103 12:25:28.562"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.486" endtime="20201103 12:25:28.563"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:21.080" endtime="20201103 12:25:28.563"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:28.577" endtime="20201103 12:25:28.600"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.573" endtime="20201103 12:25:28.602"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:28.644" endtime="20201103 12:25:31.668"></status>
</kw>
<msg timestamp="20201103 12:25:31.669" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:28.639" endtime="20201103 12:25:31.669"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:31.674" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:31.671" endtime="20201103 12:25:31.675"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:31.681" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:31.677" endtime="20201103 12:25:31.682"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:28.632" endtime="20201103 12:25:31.683"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:28.622" endtime="20201103 12:25:31.684"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.617" endtime="20201103 12:25:31.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:31.693" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:31.691" endtime="20201103 12:25:31.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:31.687" endtime="20201103 12:25:31.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.615" endtime="20201103 12:25:31.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.613" endtime="20201103 12:25:31.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:31.697" endtime="20201103 12:25:31.700"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.609" endtime="20201103 12:25:31.701"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.604" endtime="20201103 12:25:31.702"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:28.570" endtime="20201103 12:25:31.703"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:31.718" endtime="20201103 12:25:31.733"></status>
</kw>
<msg timestamp="20201103 12:25:31.734" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:31.714" endtime="20201103 12:25:31.735"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:31.740" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:31.737" endtime="20201103 12:25:31.740"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:31.742" endtime="20201103 12:25:31.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:31.709" endtime="20201103 12:25:31.747"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:31.705" endtime="20201103 12:25:31.748"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:31.757" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:31.754" endtime="20201103 12:25:31.757"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:31.761" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:25:31.759" endtime="20201103 12:25:31.762"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:31.749" endtime="20201103 12:25:31.763"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:28.564" endtime="20201103 12:25:31.764" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:17.573" endtime="20201103 12:25:31.771"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:31.839" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:31.847" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:32.942" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:31.838" endtime="20201103 12:25:32.943"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:35.946" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:25:32.944" endtime="20201103 12:25:35.947"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:31.837" endtime="20201103 12:25:35.948"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:35.953" endtime="20201103 12:25:36.263"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:35.950" endtime="20201103 12:25:36.263"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:36.276" endtime="20201103 12:25:39.297"></status>
</kw>
<msg timestamp="20201103 12:25:39.298" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:36.274" endtime="20201103 12:25:39.299"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.303" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.300" endtime="20201103 12:25:39.304"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.310" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:39.306" endtime="20201103 12:25:39.310"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:36.272" endtime="20201103 12:25:39.312"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:36.269" endtime="20201103 12:25:39.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.268" endtime="20201103 12:25:39.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:39.323" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:39.321" endtime="20201103 12:25:39.324"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.315" endtime="20201103 12:25:39.324"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.267" endtime="20201103 12:25:39.325"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.267" endtime="20201103 12:25:39.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.327" endtime="20201103 12:25:39.330"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.266" endtime="20201103 12:25:39.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.332" endtime="20201103 12:25:39.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.264" endtime="20201103 12:25:39.337"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:31.835" endtime="20201103 12:25:39.337"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:39.349" endtime="20201103 12:25:39.370"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.346" endtime="20201103 12:25:39.371"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.383" endtime="20201103 12:25:42.407"></status>
</kw>
<msg timestamp="20201103 12:25:42.409" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.382" endtime="20201103 12:25:42.410"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:42.418" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:42.413" endtime="20201103 12:25:42.420"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:42.428" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:42.422" endtime="20201103 12:25:42.429"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.379" endtime="20201103 12:25:42.432"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.377" endtime="20201103 12:25:42.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.376" endtime="20201103 12:25:42.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:42.448" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:42.445" endtime="20201103 12:25:42.449"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:42.439" endtime="20201103 12:25:42.450"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.375" endtime="20201103 12:25:42.451"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.374" endtime="20201103 12:25:42.452"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:42.454" endtime="20201103 12:25:42.459"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.373" endtime="20201103 12:25:42.461"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.371" endtime="20201103 12:25:42.463"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.343" endtime="20201103 12:25:42.465"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:42.493" endtime="20201103 12:25:49.519"></status>
</kw>
<msg timestamp="20201103 12:25:49.520" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:42.489" endtime="20201103 12:25:49.521"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.526" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.522" endtime="20201103 12:25:49.526"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.528" endtime="20201103 12:25:49.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:42.479" endtime="20201103 12:25:49.532"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:42.472" endtime="20201103 12:25:49.533"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:49.538" level="INFO">${RESULT} = {'bg-timer-count': 0, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:25:49.535" endtime="20201103 12:25:49.539"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.547" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:49.545" endtime="20201103 12:25:49.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.551" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:49.549" endtime="20201103 12:25:49.552"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.540" endtime="20201103 12:25:49.553"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.561" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:49.559" endtime="20201103 12:25:49.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.565" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:49.563" endtime="20201103 12:25:49.566"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.554" endtime="20201103 12:25:49.567"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.575" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:49.573" endtime="20201103 12:25:49.576"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.580" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:49.577" endtime="20201103 12:25:49.581"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.568" endtime="20201103 12:25:49.582"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.595" endtime="20201103 12:25:49.907"></status>
</kw>
<msg timestamp="20201103 12:25:49.910" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.136593653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.236604611, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:49.592" endtime="20201103 12:25:49.910"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.917" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.136593653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.236604611, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:49.911" endtime="20201103 12:25:49.918"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.919" endtime="20201103 12:25:49.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.587" endtime="20201103 12:25:49.921"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.583" endtime="20201103 12:25:49.921"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:49.925" level="INFO">${FILTERED} = [{'time': 4.236604611, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001095799999948, 'source_diff': 0.10001095799999948}, {'time': 4.336616986, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:49.922" endtime="20201103 12:25:49.925"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:49.939" level="INFO">${RESULT} = {'source_diff': [0.10001095799999948, 0.10001183299999994, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.10001081999999961, 0.10001084700000007, 0.10001083399999988, 0.10001084800000...</msg>
<status status="PASS" starttime="20201103 12:25:49.926" endtime="20201103 12:25:49.939"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.943" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:49.942" endtime="20201103 12:25:49.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.946" level="INFO">VALUE: [0.10001095799999948, 0.10001183299999994, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.10001081999999961, 0.10001084700000007, 0.10001083399999988, 0.10001084800000015, 0.10001084800000015, 0.10001091699999964, 0.1000108329999998, 0.10001086100000034, 0.10001081900000042, 0.10001086100000034, 0.10001083300000069, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001088899999999, 0.10001088899999999, 0.10001086099999945, 0.10001086100000034, 0.10001084700000007, 0.10001086099999945, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001084800000015, 0.10001088899999999, 0.10001081900000042, 0.10001084700000007, 0.10001087499999972, 0.10001084700000007, 0.10001083399999988, 0.10001088899999999, 0.10001083300000069, 0.10001086100000034, 0.10001083300000069, 0.10001087500000061, 0.10001087500000061, 0.10001083300000069, 0.10001084700000007, 0.10001084700000007, 0.10001086099999945, 0.10001086100000123, 0.10001087500000061, 0.10001088899999999, 0.10001086099999945, 0.10001086099999945]</msg>
<status status="PASS" starttime="20201103 12:25:49.944" endtime="20201103 12:25:49.946"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.940" endtime="20201103 12:25:49.946"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.949" endtime="20201103 12:25:49.950"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:49.952" endtime="20201103 12:25:49.971"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.951" endtime="20201103 12:25:49.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.947" endtime="20201103 12:25:49.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:42.467" endtime="20201103 12:25:49.973"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:39.338" endtime="20201103 12:25:49.973" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:49.980" endtime="20201103 12:25:49.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.978" endtime="20201103 12:25:50.000"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:50.013" endtime="20201103 12:25:53.034"></status>
</kw>
<msg timestamp="20201103 12:25:53.035" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:50.012" endtime="20201103 12:25:53.036"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:53.040" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:53.037" endtime="20201103 12:25:53.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:53.047" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:53.043" endtime="20201103 12:25:53.047"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:50.009" endtime="20201103 12:25:53.049"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:50.006" endtime="20201103 12:25:53.050"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:50.005" endtime="20201103 12:25:53.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:53.058" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:53.056" endtime="20201103 12:25:53.059"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:53.052" endtime="20201103 12:25:53.061"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:50.004" endtime="20201103 12:25:53.061"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:50.004" endtime="20201103 12:25:53.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:53.063" endtime="20201103 12:25:53.066"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:50.002" endtime="20201103 12:25:53.068"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:50.001" endtime="20201103 12:25:53.069"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.977" endtime="20201103 12:25:53.069"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:53.086" endtime="20201103 12:26:00.111"></status>
</kw>
<msg timestamp="20201103 12:26:00.112" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:53.083" endtime="20201103 12:26:00.113"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.118" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:00.115" endtime="20201103 12:26:00.118"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:00.120" endtime="20201103 12:26:00.123"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:53.077" endtime="20201103 12:26:00.124"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:53.073" endtime="20201103 12:26:00.125"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:00.130" level="INFO">${RESULT} = {'bg-timer-count': 5, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:26:00.127" endtime="20201103 12:26:00.131"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.139" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:00.137" endtime="20201103 12:26:00.140"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.143" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:00.141" endtime="20201103 12:26:00.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.132" endtime="20201103 12:26:00.145"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.153" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:00.151" endtime="20201103 12:26:00.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.158" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:00.156" endtime="20201103 12:26:00.159"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.146" endtime="20201103 12:26:00.160"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.168" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:00.166" endtime="20201103 12:26:00.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.172" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:26:00.170" endtime="20201103 12:26:00.173"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.161" endtime="20201103 12:26:00.174"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:00.187" endtime="20201103 12:26:00.493"></status>
</kw>
<msg timestamp="20201103 12:26:00.496" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.0974485, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.197459403, 'source': 'DUT_IC', 'event': 'FALLI...</msg>
<status status="PASS" starttime="20201103 12:26:00.184" endtime="20201103 12:26:00.496"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.504" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.0974485, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.197459403, 'source': 'DUT_IC', 'event': 'FALLI...</msg>
<status status="PASS" starttime="20201103 12:26:00.497" endtime="20201103 12:26:00.504"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:00.505" endtime="20201103 12:26:00.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.179" endtime="20201103 12:26:00.507"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.175" endtime="20201103 12:26:00.507"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:00.511" level="INFO">${FILTERED} = [{'time': 4.197459403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001090300000026, 'source_diff': 0.10001090300000026}, {'time': 4.297470778, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:00.508" endtime="20201103 12:26:00.511"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:00.525" level="INFO">${RESULT} = {'source_diff': [0.10001090300000026, 0.10001083399999988, 0.10001084800000015, 0.10001081999999961, 0.10001084800000015, 0.10001088899999999, 0.10001084800000015, 0.10001084800000015, 0.1000108339999...</msg>
<status status="PASS" starttime="20201103 12:26:00.512" endtime="20201103 12:26:00.526"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.529" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:00.528" endtime="20201103 12:26:00.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:00.532" level="INFO">VALUE: [0.10001090300000026, 0.10001083399999988, 0.10001084800000015, 0.10001081999999961, 0.10001084800000015, 0.10001088899999999, 0.10001084800000015, 0.10001084800000015, 0.10001083399999988, 0.10001083399999988, 0.10001083399999988, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.1000108329999998, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001084700000007, 0.10001083300000069, 0.10001084700000007, 0.10001083399999988, 0.10001084800000015, 0.10001087499999972, 0.10001081899999953, 0.10001086099999945, 0.10001081899999953, 0.10001084700000007, 0.10001087499999972, 0.10001081900000042, 0.10001084700000007, 0.10001086100000034, 0.10001083399999988, 0.10001086100000034, 0.1000108329999998, 0.10001086100000034, 0.10001083300000069, 0.10001084700000007, 0.10001084699999918, 0.10001087500000061, 0.10001083400000077, 0.10001086099999945, 0.10001086099999945, 0.10001083300000069, 0.10001084700000007, 0.10001090299999937, 0.10001086099999945, 0.10001084800000015, 0.10001087499999883]</msg>
<status status="PASS" starttime="20201103 12:26:00.530" endtime="20201103 12:26:00.532"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.526" endtime="20201103 12:26:00.533"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:00.535" endtime="20201103 12:26:00.536"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:00.538" endtime="20201103 12:26:00.558"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.537" endtime="20201103 12:26:00.558"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.533" endtime="20201103 12:26:00.559"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:53.070" endtime="20201103 12:26:00.559"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:49.975" endtime="20201103 12:26:00.559" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:00.567" endtime="20201103 12:26:00.586"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.565" endtime="20201103 12:26:00.587"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:00.599" endtime="20201103 12:26:03.619"></status>
</kw>
<msg timestamp="20201103 12:26:03.620" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:00.598" endtime="20201103 12:26:03.620"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:03.622" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:03.621" endtime="20201103 12:26:03.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:03.626" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:03.623" endtime="20201103 12:26:03.626"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:00.595" endtime="20201103 12:26:03.627"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:00.593" endtime="20201103 12:26:03.627"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.592" endtime="20201103 12:26:03.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:03.632" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:03.631" endtime="20201103 12:26:03.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:03.628" endtime="20201103 12:26:03.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.591" endtime="20201103 12:26:03.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.590" endtime="20201103 12:26:03.633"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:03.633" endtime="20201103 12:26:03.635"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.589" endtime="20201103 12:26:03.636"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.587" endtime="20201103 12:26:03.636"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:00.563" endtime="20201103 12:26:03.636"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:03.645" endtime="20201103 12:26:10.669"></status>
</kw>
<msg timestamp="20201103 12:26:10.670" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:03.643" endtime="20201103 12:26:10.670"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.675" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.672" endtime="20201103 12:26:10.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.678" endtime="20201103 12:26:10.681"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:03.641" endtime="20201103 12:26:10.682"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:03.639" endtime="20201103 12:26:10.683"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:10.688" level="INFO">${RESULT} = {'bg-timer-count': 10, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:26:10.684" endtime="20201103 12:26:10.689"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.697" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:10.695" endtime="20201103 12:26:10.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.702" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:10.700" endtime="20201103 12:26:10.703"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.690" endtime="20201103 12:26:10.704"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.712" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:10.710" endtime="20201103 12:26:10.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.716" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:10.714" endtime="20201103 12:26:10.717"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.705" endtime="20201103 12:26:10.718"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.726" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:10.724" endtime="20201103 12:26:10.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.730" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:26:10.728" endtime="20201103 12:26:10.731"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.719" endtime="20201103 12:26:10.732"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.746" endtime="20201103 12:26:11.046"></status>
</kw>
<msg timestamp="20201103 12:26:11.049" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.068700639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.168710611, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:10.742" endtime="20201103 12:26:11.049"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.056" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.068700639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.168710611, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:11.050" endtime="20201103 12:26:11.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.058" endtime="20201103 12:26:11.059"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.737" endtime="20201103 12:26:11.060"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.733" endtime="20201103 12:26:11.060"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:11.064" level="INFO">${FILTERED} = [{'time': 4.168710611, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000997199999961, 'source_diff': 0.10000997199999961}, {'time': 4.268722014, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:11.061" endtime="20201103 12:26:11.064"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:11.077" level="INFO">${RESULT} = {'source_diff': [0.10000997199999961, 0.10001086099999945, 0.10001081899999953, 0.10001084700000007, 0.10001083300000069, 0.10001084700000007, 0.10001083399999988, 0.10001084800000015, 0.1000108339999...</msg>
<status status="PASS" starttime="20201103 12:26:11.065" endtime="20201103 12:26:11.077"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.081" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:11.080" endtime="20201103 12:26:11.082"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.084" level="INFO">VALUE: [0.10000997199999961, 0.10001086099999945, 0.10001081899999953, 0.10001084700000007, 0.10001083300000069, 0.10001084700000007, 0.10001083399999988, 0.10001084800000015, 0.10001083399999988, 0.10001086100000034, 0.10001084699999918, 0.10001081900000042, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.1000108329999998, 0.10001084700000007, 0.10001091599999956, 0.10001083400000077, 0.10001087499999972, 0.10001081999999961, 0.10001087499999972, 0.10001086099999945, 0.10001088899999999, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001086200000042, 0.10001086099999945, 0.1000108329999998, 0.10001088899999999, 0.1000108329999998, 0.1000108329999998, 0.10001084700000007, 0.10001086199999953, 0.10001084700000007, 0.10001091700000053, 0.10001087499999972, 0.10001084700000007, 0.10001084700000007, 0.10001087500000061, 0.10001084700000007, 0.10001090300000115, 0.10001087500000061, 0.10001084700000007, 0.10001086200000131, 0.10001086100000123, 0.10001084700000007, 0.10001087500000061]</msg>
<status status="PASS" starttime="20201103 12:26:11.082" endtime="20201103 12:26:11.084"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.078" endtime="20201103 12:26:11.085"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.087" endtime="20201103 12:26:11.089"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:11.091" endtime="20201103 12:26:11.110"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.089" endtime="20201103 12:26:11.111"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.085" endtime="20201103 12:26:11.111"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:03.637" endtime="20201103 12:26:11.111"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:00.561" endtime="20201103 12:26:11.112" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:11.118" endtime="20201103 12:26:11.138"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.117" endtime="20201103 12:26:11.139"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.152" endtime="20201103 12:26:14.171"></status>
</kw>
<msg timestamp="20201103 12:26:14.171" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:11.151" endtime="20201103 12:26:14.172"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.174" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:14.172" endtime="20201103 12:26:14.174"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:14.177" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:14.175" endtime="20201103 12:26:14.177"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:11.147" endtime="20201103 12:26:14.178"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:11.145" endtime="20201103 12:26:14.179"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.144" endtime="20201103 12:26:14.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:14.182" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:14.182" endtime="20201103 12:26:14.183"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.180" endtime="20201103 12:26:14.183"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.143" endtime="20201103 12:26:14.183"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.142" endtime="20201103 12:26:14.183"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.184" endtime="20201103 12:26:14.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.141" endtime="20201103 12:26:14.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.139" endtime="20201103 12:26:14.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.116" endtime="20201103 12:26:14.187"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:14.195" endtime="20201103 12:26:21.220"></status>
</kw>
<msg timestamp="20201103 12:26:21.221" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:14.193" endtime="20201103 12:26:21.221"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.226" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:21.223" endtime="20201103 12:26:21.227"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.229" endtime="20201103 12:26:21.233"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.191" endtime="20201103 12:26:21.234"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.189" endtime="20201103 12:26:21.235"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:21.240" level="INFO">${RESULT} = {'bg-timer-count': 15, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:26:21.236" endtime="20201103 12:26:21.240"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.248" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:21.246" endtime="20201103 12:26:21.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.253" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:21.251" endtime="20201103 12:26:21.253"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.242" endtime="20201103 12:26:21.254"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.262" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:21.260" endtime="20201103 12:26:21.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.267" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:21.265" endtime="20201103 12:26:21.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.256" endtime="20201103 12:26:21.269"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.277" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:21.275" endtime="20201103 12:26:21.278"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.281" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:26:21.279" endtime="20201103 12:26:21.282"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.270" endtime="20201103 12:26:21.283"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.298" endtime="20201103 12:26:21.602"></status>
</kw>
<msg timestamp="20201103 12:26:21.605" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.067334319, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.167346319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:21.295" endtime="20201103 12:26:21.605"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.612" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.067334319, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.167346319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:21.606" endtime="20201103 12:26:21.613"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.614" endtime="20201103 12:26:21.615"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.289" endtime="20201103 12:26:21.616"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.284" endtime="20201103 12:26:21.616"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:21.620" level="INFO">${FILTERED} = [{'time': 4.167346319, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001199999999955, 'source_diff': 0.10001199999999955}, {'time': 4.267357667, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:21.617" endtime="20201103 12:26:21.620"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:21.633" level="INFO">${RESULT} = {'source_diff': [0.10001199999999955, 0.10001080599999934, 0.10001084800000015, 0.10001083399999988, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001081900000042, 0.1000108470000...</msg>
<status status="PASS" starttime="20201103 12:26:21.621" endtime="20201103 12:26:21.634"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.638" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:21.637" endtime="20201103 12:26:21.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:21.640" level="INFO">VALUE: [0.10001199999999955, 0.10001080599999934, 0.10001084800000015, 0.10001083399999988, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001081900000042, 0.10001084700000007, 0.10001087499999972, 0.10001080499999926, 0.10001086100000034, 0.10001084700000007, 0.10001086199999953, 0.10001084700000007, 0.1000108329999998, 0.10001081999999961, 0.10001084700000007, 0.10001084700000007, 0.10001087499999972, 0.10001081899999953, 0.10001084700000007, 0.10001086100000034, 0.10001084800000015, 0.10001084800000015, 0.10001084700000007, 0.10001084700000007, 0.10001086100000034, 0.10001084700000007, 0.10001084700000007, 0.10001086100000034, 0.10001084800000015, 0.10001087499999972, 0.1000108329999998, 0.10001086100000034, 0.10001084700000007, 0.10001087499999972, 0.10001083399999988, 0.10001087500000061, 0.10001088899999999, 0.10001087499999883, 0.10001084700000007, 0.10001086199999953, 0.10001087499999883, 0.10001086099999945, 0.10001084700000007, 0.10001084700000007, 0.10001086199999953, 0.10001084700000007, 0.10001086100000123]</msg>
<status status="PASS" starttime="20201103 12:26:21.639" endtime="20201103 12:26:21.641"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.634" endtime="20201103 12:26:21.641"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.643" endtime="20201103 12:26:21.645"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:21.647" endtime="20201103 12:26:21.666"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.645" endtime="20201103 12:26:21.667"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.642" endtime="20201103 12:26:21.667"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:14.188" endtime="20201103 12:26:21.668"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:11.113" endtime="20201103 12:26:21.668" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:21.675" endtime="20201103 12:26:21.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.673" endtime="20201103 12:26:21.695"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:21.709" endtime="20201103 12:26:24.732"></status>
</kw>
<msg timestamp="20201103 12:26:24.733" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:21.708" endtime="20201103 12:26:24.733"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.738" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:24.735" endtime="20201103 12:26:24.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.744" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:24.741" endtime="20201103 12:26:24.745"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:21.705" endtime="20201103 12:26:24.747"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:21.701" endtime="20201103 12:26:24.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.700" endtime="20201103 12:26:24.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:24.756" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:24.755" endtime="20201103 12:26:24.757"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.750" endtime="20201103 12:26:24.757"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.699" endtime="20201103 12:26:24.758"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.699" endtime="20201103 12:26:24.758"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:24.760" endtime="20201103 12:26:24.763"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.697" endtime="20201103 12:26:24.764"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.696" endtime="20201103 12:26:24.765"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:21.672" endtime="20201103 12:26:24.766"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:24.783" endtime="20201103 12:26:31.809"></status>
</kw>
<msg timestamp="20201103 12:26:31.810" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:24.780" endtime="20201103 12:26:31.810"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.815" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:31.812" endtime="20201103 12:26:31.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:31.818" endtime="20201103 12:26:31.821"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.774" endtime="20201103 12:26:31.822"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.770" endtime="20201103 12:26:31.823"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:31.828" level="INFO">${RESULT} = {'bg-timer-count': 20, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:26:31.825" endtime="20201103 12:26:31.829"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.837" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:31.835" endtime="20201103 12:26:31.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.842" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:31.840" endtime="20201103 12:26:31.842"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:31.830" endtime="20201103 12:26:31.843"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.851" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:31.849" endtime="20201103 12:26:31.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.856" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:31.854" endtime="20201103 12:26:31.857"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:31.845" endtime="20201103 12:26:31.858"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.868" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:31.866" endtime="20201103 12:26:31.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:31.872" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:26:31.870" endtime="20201103 12:26:31.873"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:31.859" endtime="20201103 12:26:31.874"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:31.887" endtime="20201103 12:26:32.200"></status>
</kw>
<msg timestamp="20201103 12:26:32.203" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.099934014, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.199944986, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:31.884" endtime="20201103 12:26:32.203"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:32.211" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.099934014, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.199944986, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:32.204" endtime="20201103 12:26:32.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:32.212" endtime="20201103 12:26:32.214"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:31.879" endtime="20201103 12:26:32.214"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:31.875" endtime="20201103 12:26:32.214"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:32.218" level="INFO">${FILTERED} = [{'time': 4.199944986, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001097200000064, 'source_diff': 0.10001097200000064}, {'time': 4.299956375, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:32.215" endtime="20201103 12:26:32.219"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:32.233" level="INFO">${RESULT} = {'source_diff': [0.10001097200000064, 0.10001084700000007, 0.10001087499999972, 0.10001086099999945, 0.10001081899999953, 0.10001084700000007, 0.10001081900000042, 0.10001084700000007, 0.1000108879999...</msg>
<status status="PASS" starttime="20201103 12:26:32.219" endtime="20201103 12:26:32.234"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:32.238" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:32.237" endtime="20201103 12:26:32.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:32.241" level="INFO">VALUE: [0.10001097200000064, 0.10001084700000007, 0.10001087499999972, 0.10001086099999945, 0.10001081899999953, 0.10001084700000007, 0.10001081900000042, 0.10001084700000007, 0.10001088799999991, 0.10001086099999945, 0.10001081999999961, 0.10001083399999988, 0.10001087499999972, 0.10001080600000023, 0.10001086099999945, 0.1000108329999998, 0.1000108329999998, 0.10001086100000034, 0.10001081900000042, 0.10001086100000034, 0.1000108329999998, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001083399999988, 0.10001084800000015, 0.10001084800000015, 0.10001084700000007, 0.10001084700000007, 0.10001086100000034, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001084800000015, 0.10001088899999999, 0.10001086099999945, 0.10001088899999999, 0.10001081900000042, 0.10001084700000007, 0.10001091600000045, 0.10001087500000061, 0.100010833999999, 0.10001087500000061, 0.10001084700000007, 0.10001083300000069, 0.10001086099999945, 0.10001086099999945, 0.10001084800000015, 0.10001093099999991, 0.10001084700000007]</msg>
<status status="PASS" starttime="20201103 12:26:32.239" endtime="20201103 12:26:32.241"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.234" endtime="20201103 12:26:32.242"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:32.244" endtime="20201103 12:26:32.245"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:32.247" endtime="20201103 12:26:32.267"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.246" endtime="20201103 12:26:32.267"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.242" endtime="20201103 12:26:32.268"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.767" endtime="20201103 12:26:32.268"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:21.670" endtime="20201103 12:26:32.269" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:32.275" endtime="20201103 12:26:32.295"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.274" endtime="20201103 12:26:32.295"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:32.309" endtime="20201103 12:26:35.331"></status>
</kw>
<msg timestamp="20201103 12:26:35.332" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:32.307" endtime="20201103 12:26:35.332"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:35.337" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:35.334" endtime="20201103 12:26:35.338"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:35.343" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:35.339" endtime="20201103 12:26:35.344"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:32.305" endtime="20201103 12:26:35.345"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:32.302" endtime="20201103 12:26:35.346"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.300" endtime="20201103 12:26:35.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:35.354" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:35.353" endtime="20201103 12:26:35.355"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:35.349" endtime="20201103 12:26:35.356"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.300" endtime="20201103 12:26:35.356"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.299" endtime="20201103 12:26:35.356"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:35.358" endtime="20201103 12:26:35.361"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.298" endtime="20201103 12:26:35.362"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.296" endtime="20201103 12:26:35.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:32.272" endtime="20201103 12:26:35.364"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:35.381" endtime="20201103 12:26:42.407"></status>
</kw>
<msg timestamp="20201103 12:26:42.408" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:35.378" endtime="20201103 12:26:42.409"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.414" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:42.411" endtime="20201103 12:26:42.414"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:42.416" endtime="20201103 12:26:42.419"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:35.372" endtime="20201103 12:26:42.420"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:35.368" endtime="20201103 12:26:42.421"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:42.426" level="INFO">${RESULT} = {'bg-timer-count': 25, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:26:42.423" endtime="20201103 12:26:42.427"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.436" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:42.433" endtime="20201103 12:26:42.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.441" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:42.439" endtime="20201103 12:26:42.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.428" endtime="20201103 12:26:42.442"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.450" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:42.448" endtime="20201103 12:26:42.451"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.455" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:42.453" endtime="20201103 12:26:42.455"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.444" endtime="20201103 12:26:42.457"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.467" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:42.462" endtime="20201103 12:26:42.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.471" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:26:42.469" endtime="20201103 12:26:42.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.458" endtime="20201103 12:26:42.474"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:42.488" endtime="20201103 12:26:42.790"></status>
</kw>
<msg timestamp="20201103 12:26:42.793" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.097697472, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.197707458, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:42.485" endtime="20201103 12:26:42.793"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.800" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 4.097697472, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 4.197707458, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:42.794" endtime="20201103 12:26:42.801"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:42.802" endtime="20201103 12:26:42.803"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.479" endtime="20201103 12:26:42.804"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.476" endtime="20201103 12:26:42.804"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:42.808" level="INFO">${FILTERED} = [{'time': 4.197707458, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000998599999988, 'source_diff': 0.10000998599999988}, {'time': 4.297718875, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:42.805" endtime="20201103 12:26:42.808"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:42.822" level="INFO">${RESULT} = {'source_diff': [0.10000998599999988, 0.10001087499999972, 0.10001083300000069, 0.10001086100000034, 0.10001087500000061, 0.1000109310000008, 0.10001087499999972, 0.10001083300000069, 0.10001087499999...</msg>
<status status="PASS" starttime="20201103 12:26:42.809" endtime="20201103 12:26:42.822"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.826" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:42.825" endtime="20201103 12:26:42.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:42.828" level="INFO">VALUE: [0.10000998599999988, 0.10001087499999972, 0.10001083300000069, 0.10001086100000034, 0.10001087500000061, 0.1000109310000008, 0.10001087499999972, 0.10001083300000069, 0.10001087499999972, 0.10001086100000034, 0.10001084700000007, 0.10001086099999945, 0.10001090299999937, 0.10001088899999999, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.10001081900000042, 0.1000108329999998, 0.10001086099999945, 0.10001080500000015, 0.10001091700000053, 0.1000108329999998, 0.10001083300000069, 0.10001084700000007, 0.1000108329999998, 0.10001084700000007, 0.1000108329999998, 0.10001084699999918, 0.1000108329999998, 0.10001084700000007, 0.10001084800000015, 0.10001083399999988, 0.10001090300000026, 0.10001084700000007, 0.10001084700000007, 0.10001084700000007, 0.1000108329999998, 0.10001086099999945, 0.10001084699999918, 0.10001084700000007, 0.10001083400000077, 0.10001086200000131, 0.10001083400000077, 0.10001086099999945, 0.10001087499999883, 0.10001086099999945, 0.10001084700000007, 0.10001084700000007, 0.10001086100000123]</msg>
<status status="PASS" starttime="20201103 12:26:42.827" endtime="20201103 12:26:42.829"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.823" endtime="20201103 12:26:42.829"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:42.831" endtime="20201103 12:26:42.833"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:42.835" endtime="20201103 12:26:42.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.833" endtime="20201103 12:26:42.855"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:42.830" endtime="20201103 12:26:42.855"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:35.365" endtime="20201103 12:26:42.856"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:32.270" endtime="20201103 12:26:42.856" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:31.785" endtime="20201103 12:26:42.863"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">arduino-due</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:17.465" endtime="20201103 12:26:42.889"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_arduino-due</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
