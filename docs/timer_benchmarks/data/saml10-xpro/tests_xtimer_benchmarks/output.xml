<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:35:22.371" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:22.957" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:22.965" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:24.104" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:22.955" endtime="20201103 12:35:24.104"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.107" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:24.105" endtime="20201103 12:35:24.108"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:22.954" endtime="20201103 12:35:24.108"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:24.110" endtime="20201103 12:35:24.297"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.109" endtime="20201103 12:35:24.298"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.312" endtime="20201103 12:35:24.327"></status>
</kw>
<msg timestamp="20201103 12:35:24.328" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.310" endtime="20201103 12:35:24.329"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.334" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.331" endtime="20201103 12:35:24.334"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.340" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:24.336" endtime="20201103 12:35:24.341"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.307" endtime="20201103 12:35:24.342"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.305" endtime="20201103 12:35:24.344"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.304" endtime="20201103 12:35:24.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:24.352" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:24.351" endtime="20201103 12:35:24.353"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.346" endtime="20201103 12:35:24.353"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.303" endtime="20201103 12:35:24.354"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.302" endtime="20201103 12:35:24.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.356" endtime="20201103 12:35:24.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.301" endtime="20201103 12:35:24.360"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.361" endtime="20201103 12:35:24.365"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.299" endtime="20201103 12:35:24.366"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:22.952" endtime="20201103 12:35:24.366"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:24.379" endtime="20201103 12:35:24.400"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.376" endtime="20201103 12:35:24.402"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.423" endtime="20201103 12:35:24.435"></status>
</kw>
<msg timestamp="20201103 12:35:24.435" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.421" endtime="20201103 12:35:24.436"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.438" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.436" endtime="20201103 12:35:24.438"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.441" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:24.439" endtime="20201103 12:35:24.441"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.418" endtime="20201103 12:35:24.442"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:24.415" endtime="20201103 12:35:24.442"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.412" endtime="20201103 12:35:24.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:24.446" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:24.445" endtime="20201103 12:35:24.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.443" endtime="20201103 12:35:24.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.411" endtime="20201103 12:35:24.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.409" endtime="20201103 12:35:24.447"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.448" endtime="20201103 12:35:24.449"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.406" endtime="20201103 12:35:24.450"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.403" endtime="20201103 12:35:24.450"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.373" endtime="20201103 12:35:24.450"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.457" endtime="20201103 12:35:24.465"></status>
</kw>
<msg timestamp="20201103 12:35:24.466" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.456" endtime="20201103 12:35:24.466"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.468" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:24.467" endtime="20201103 12:35:24.469"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:24.469" endtime="20201103 12:35:24.471"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.453" endtime="20201103 12:35:24.471"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.451" endtime="20201103 12:35:24.472"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.476" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:35:24.475" endtime="20201103 12:35:24.476"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.478" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:35:24.477" endtime="20201103 12:35:24.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.472" endtime="20201103 12:35:24.479"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:24.367" endtime="20201103 12:35:24.479" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:22.497" endtime="20201103 12:35:24.481"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:24.531" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:24.539" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:25.687" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:24.529" endtime="20201103 12:35:25.688"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:25.690" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:25.689" endtime="20201103 12:35:25.691"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.528" endtime="20201103 12:35:25.691"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:25.693" endtime="20201103 12:35:25.990"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.692" endtime="20201103 12:35:25.991"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.003" endtime="20201103 12:35:26.015"></status>
</kw>
<msg timestamp="20201103 12:35:26.016" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.001" endtime="20201103 12:35:26.016"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.018" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.017" endtime="20201103 12:35:26.019"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.021" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:26.019" endtime="20201103 12:35:26.022"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:25.999" endtime="20201103 12:35:26.022"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:25.997" endtime="20201103 12:35:26.023"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.996" endtime="20201103 12:35:26.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:26.027" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:26.026" endtime="20201103 12:35:26.028"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.024" endtime="20201103 12:35:26.028"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.995" endtime="20201103 12:35:26.029"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.994" endtime="20201103 12:35:26.029"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.029" endtime="20201103 12:35:26.031"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.993" endtime="20201103 12:35:26.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.032" endtime="20201103 12:35:26.034"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:25.991" endtime="20201103 12:35:26.034"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:24.527" endtime="20201103 12:35:26.035"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:26.040" endtime="20201103 12:35:26.059"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.039" endtime="20201103 12:35:26.060"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.073" endtime="20201103 12:35:26.085"></status>
</kw>
<msg timestamp="20201103 12:35:26.085" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.071" endtime="20201103 12:35:26.086"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.088" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.087" endtime="20201103 12:35:26.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:26.092" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:26.090" endtime="20201103 12:35:26.093"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.069" endtime="20201103 12:35:26.094"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:26.066" endtime="20201103 12:35:26.095"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.065" endtime="20201103 12:35:26.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:26.099" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:26.098" endtime="20201103 12:35:26.100"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.096" endtime="20201103 12:35:26.100"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.064" endtime="20201103 12:35:26.101"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.064" endtime="20201103 12:35:26.101"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.102" endtime="20201103 12:35:26.104"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.062" endtime="20201103 12:35:26.104"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.061" endtime="20201103 12:35:26.105"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.037" endtime="20201103 12:35:26.105"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:26.117" endtime="20201103 12:35:33.110"></status>
</kw>
<msg timestamp="20201103 12:35:33.112" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:26.115" endtime="20201103 12:35:33.112"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.119" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.114" endtime="20201103 12:35:33.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.122" endtime="20201103 12:35:33.126"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.111" endtime="20201103 12:35:33.128"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.108" endtime="20201103 12:35:33.129"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:33.136" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 0, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:33.131" endtime="20201103 12:35:33.136"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.147" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:33.144" endtime="20201103 12:35:33.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.153" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:33.150" endtime="20201103 12:35:33.154"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.138" endtime="20201103 12:35:33.156"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.167" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:33.164" endtime="20201103 12:35:33.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.173" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:33.170" endtime="20201103 12:35:33.175"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.157" endtime="20201103 12:35:33.176"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.184" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:33.182" endtime="20201103 12:35:33.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.188" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:35:33.186" endtime="20201103 12:35:33.189"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.178" endtime="20201103 12:35:33.190"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.200" endtime="20201103 12:35:33.502"></status>
</kw>
<msg timestamp="20201103 12:35:33.505" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065135028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164726194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:33.198" endtime="20201103 12:35:33.506"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.513" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065135028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164726194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:33.506" endtime="20201103 12:35:33.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.514" endtime="20201103 12:35:33.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.194" endtime="20201103 12:35:33.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.191" endtime="20201103 12:35:33.517"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:33.521" level="INFO">${FILTERED} = [{'time': 1.164726194, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09959116599999995, 'source_diff': 0.09959116599999995}, {'time': 1.264326083, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:33.518" endtime="20201103 12:35:33.521"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:33.534" level="INFO">${RESULT} = {'source_diff': [0.09959116599999995, 0.09959729100000003, 0.09959591700000003, 0.099596236, 0.09959277700000002, 0.09959768099999988, 0.09959034700000013, 0.09957690199999991, 0.09957390300000002, 0....</msg>
<status status="PASS" starttime="20201103 12:35:33.522" endtime="20201103 12:35:33.535"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.539" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:33.538" endtime="20201103 12:35:33.539"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.541" level="INFO">VALUE: [0.09959116599999995, 0.09959729100000003, 0.09959591700000003, 0.099596236, 0.09959277700000002, 0.09959768099999988, 0.09959034700000013, 0.09957690199999991, 0.09957390300000002, 0.09957597199999979, 0.09957776399999974, 0.09958368099999992, 0.09958031899999975, 0.09958080600000008, 0.09957593099999995, 0.09957561100000012, 0.09958219400000035, 0.0995821109999997, 0.09958237499999978, 0.09958424999999993, 0.09958015200000014, 0.0995799169999998, 0.09957986100000005, 0.09958248600000008, 0.09957843000000022, 0.09957940200000026, 0.09958199999999984, 0.09958218000000008, 0.09957851400000006, 0.09957755499999976, 0.09957738900000024, 0.0995726939999999, 0.09957388900000019, 0.09956999999999994, 0.09957134800000045, 0.09957459700000015, 0.09957550000000026, 0.09956729099999961, 0.09957259699999987, 0.09957295799999955, 0.09957408299999937, 0.09957395800000057, 0.09957629200000007, 0.09957388900000019, 0.09957526400000027, 0.09958702800000019, 0.0995857219999996, 0.09958419400000018, 0.09958630599999996, 0.09958688899999935]</msg>
<status status="PASS" starttime="20201103 12:35:33.540" endtime="20201103 12:35:33.541"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.535" endtime="20201103 12:35:33.542"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.544" endtime="20201103 12:35:33.545"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:33.547" endtime="20201103 12:35:33.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.546" endtime="20201103 12:35:33.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.542" endtime="20201103 12:35:33.568"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:26.106" endtime="20201103 12:35:33.568"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:26.035" endtime="20201103 12:35:33.568" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:33.575" endtime="20201103 12:35:33.594"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.574" endtime="20201103 12:35:33.595"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.608" endtime="20201103 12:35:33.620"></status>
</kw>
<msg timestamp="20201103 12:35:33.621" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.607" endtime="20201103 12:35:33.621"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.623" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.622" endtime="20201103 12:35:33.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:33.626" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:33.624" endtime="20201103 12:35:33.627"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:33.604" endtime="20201103 12:35:33.627"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:33.601" endtime="20201103 12:35:33.628"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.600" endtime="20201103 12:35:33.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:33.632" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:33.631" endtime="20201103 12:35:33.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.629" endtime="20201103 12:35:33.632"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.599" endtime="20201103 12:35:33.633"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.599" endtime="20201103 12:35:33.634"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.634" endtime="20201103 12:35:33.636"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.597" endtime="20201103 12:35:33.636"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.596" endtime="20201103 12:35:33.637"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.572" endtime="20201103 12:35:33.637"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:33.645" endtime="20201103 12:35:40.638"></status>
</kw>
<msg timestamp="20201103 12:35:40.639" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:33.644" endtime="20201103 12:35:40.639"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.644" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:40.641" endtime="20201103 12:35:40.645"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:40.646" endtime="20201103 12:35:40.649"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.641" endtime="20201103 12:35:40.650"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.639" endtime="20201103 12:35:40.651"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:40.656" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 5, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:40.653" endtime="20201103 12:35:40.657"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.665" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:40.663" endtime="20201103 12:35:40.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.669" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:40.667" endtime="20201103 12:35:40.670"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.658" endtime="20201103 12:35:40.671"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.679" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:40.677" endtime="20201103 12:35:40.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.684" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:40.682" endtime="20201103 12:35:40.684"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.672" endtime="20201103 12:35:40.686"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.693" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:40.691" endtime="20201103 12:35:40.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:40.698" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:35:40.696" endtime="20201103 12:35:40.698"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.687" endtime="20201103 12:35:40.699"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:40.713" endtime="20201103 12:35:41.017"></status>
</kw>
<msg timestamp="20201103 12:35:41.020" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057520153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157104819, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:40.710" endtime="20201103 12:35:41.020"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.027" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057520153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157104819, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:41.021" endtime="20201103 12:35:41.028"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.028" endtime="20201103 12:35:41.030"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.704" endtime="20201103 12:35:41.031"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:40.701" endtime="20201103 12:35:41.031"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:41.035" level="INFO">${FILTERED} = [{'time': 1.157104819, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09958466599999993, 'source_diff': 0.09958466599999993}, {'time': 1.256682819, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:41.032" endtime="20201103 12:35:41.035"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:41.049" level="INFO">${RESULT} = {'source_diff': [0.09958466599999993, 0.09957537499999991, 0.0995741520000002, 0.09958212499999997, 0.09958648599999997, 0.09957615300000011, 0.09957562499999995, 0.09957758400000016, 0.09957879100000...</msg>
<status status="PASS" starttime="20201103 12:35:41.036" endtime="20201103 12:35:41.049"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.053" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:41.052" endtime="20201103 12:35:41.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.055" level="INFO">VALUE: [0.09958466599999993, 0.09957537499999991, 0.0995741520000002, 0.09958212499999997, 0.09958648599999997, 0.09957615300000011, 0.09957562499999995, 0.09957758400000016, 0.09957879100000011, 0.09958195899999978, 0.0995790689999998, 0.09958467999999998, 0.09958525000000007, 0.09957984699999978, 0.0995917089999998, 0.09959029099999972, 0.09958969500000014, 0.0995888749999998, 0.09958058300000028, 0.09958718099999997, 0.0995893889999997, 0.09959463899999976, 0.09959695799999979, 0.09960236100000008, 0.09959579199999968, 0.09959755599999998, 0.09959977799999997, 0.09959694399999997, 0.09959704200000008, 0.09959766700000028, 0.09959669399999971, 0.09959356999999969, 0.09960123599999982, 0.0995935560000003, 0.09959869399999999, 0.09959188900000004, 0.09958790199999967, 0.0995889029999999, 0.09958631900000015, 0.09958218000000052, 0.09958922200000053, 0.09958618100000027, 0.09958659700000005, 0.09958802799999944, 0.09959552800000004, 0.09959331900000024, 0.09959209800000046, 0.09959063900000054, 0.09959184700000012, 0.09958841700000054]</msg>
<status status="PASS" starttime="20201103 12:35:41.054" endtime="20201103 12:35:41.056"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.050" endtime="20201103 12:35:41.056"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.058" endtime="20201103 12:35:41.060"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:41.062" endtime="20201103 12:35:41.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.060" endtime="20201103 12:35:41.082"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.057" endtime="20201103 12:35:41.082"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:33.638" endtime="20201103 12:35:41.082"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:33.570" endtime="20201103 12:35:41.083" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:41.090" endtime="20201103 12:35:41.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.088" endtime="20201103 12:35:41.110"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.122" endtime="20201103 12:35:41.135"></status>
</kw>
<msg timestamp="20201103 12:35:41.136" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:41.121" endtime="20201103 12:35:41.136"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.138" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:41.137" endtime="20201103 12:35:41.139"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:41.141" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:41.139" endtime="20201103 12:35:41.142"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:41.118" endtime="20201103 12:35:41.142"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:41.116" endtime="20201103 12:35:41.143"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.115" endtime="20201103 12:35:41.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:41.147" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:41.146" endtime="20201103 12:35:41.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.144" endtime="20201103 12:35:41.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.114" endtime="20201103 12:35:41.148"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.113" endtime="20201103 12:35:41.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.148" endtime="20201103 12:35:41.150"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.112" endtime="20201103 12:35:41.150"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.110" endtime="20201103 12:35:41.151"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.087" endtime="20201103 12:35:41.151"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:41.159" endtime="20201103 12:35:48.152"></status>
</kw>
<msg timestamp="20201103 12:35:48.153" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:41.158" endtime="20201103 12:35:48.153"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.158" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.155" endtime="20201103 12:35:48.159"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.161" endtime="20201103 12:35:48.164"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.155" endtime="20201103 12:35:48.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.153" endtime="20201103 12:35:48.166"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:48.171" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 10, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:48.167" endtime="20201103 12:35:48.171"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.190" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:48.177" endtime="20201103 12:35:48.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.194" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:48.192" endtime="20201103 12:35:48.195"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.172" endtime="20201103 12:35:48.196"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.204" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:48.202" endtime="20201103 12:35:48.205"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.208" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:48.206" endtime="20201103 12:35:48.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.197" endtime="20201103 12:35:48.210"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.215" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:48.214" endtime="20201103 12:35:48.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.217" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:35:48.216" endtime="20201103 12:35:48.217"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.211" endtime="20201103 12:35:48.217"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.224" endtime="20201103 12:35:48.522"></status>
</kw>
<msg timestamp="20201103 12:35:48.525" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057026556, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156617889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:48.222" endtime="20201103 12:35:48.526"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.534" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057026556, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156617889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:48.527" endtime="20201103 12:35:48.535"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.536" endtime="20201103 12:35:48.538"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.220" endtime="20201103 12:35:48.539"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.218" endtime="20201103 12:35:48.539"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:48.543" level="INFO">${FILTERED} = [{'time': 1.156617889, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099591333, 'source_diff': 0.099591333}, {'time': 1.256207056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.099586514000000...</msg>
<status status="PASS" starttime="20201103 12:35:48.540" endtime="20201103 12:35:48.544"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:48.557" level="INFO">${RESULT} = {'source_diff': [0.099591333, 0.09958651400000007, 0.09958515199999995, 0.09958308400000004, 0.09958386099999994, 0.0995846250000001, 0.09958405600000009, 0.099580153, 0.09958168100000009, 0.099583540...</msg>
<status status="PASS" starttime="20201103 12:35:48.545" endtime="20201103 12:35:48.558"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.562" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:48.561" endtime="20201103 12:35:48.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.564" level="INFO">VALUE: [0.099591333, 0.09958651400000007, 0.09958515199999995, 0.09958308400000004, 0.09958386099999994, 0.0995846250000001, 0.09958405600000009, 0.099580153, 0.09958168100000009, 0.09958354099999989, 0.09957911100000016, 0.09958302800000007, 0.09958599999999995, 0.09958241700000015, 0.09959087500000008, 0.09958402799999977, 0.099593708, 0.09959255500000008, 0.09959015299999985, 0.09959591699999981, 0.09959576400000003, 0.09959479199999999, 0.09958845800000038, 0.09958981900000019, 0.09959248600000015, 0.09958741600000032, 0.09959017999999986, 0.09959115299999999, 0.09959687500000003, 0.099594819, 0.09958769400000023, 0.09958809700000071, 0.09958590200000028, 0.09958681899999977, 0.09959552800000004, 0.09959675000000079, 0.09959409699999977, 0.09960029199999987, 0.09959890299999952, 0.09960281900000023, 0.09960713899999973, 0.09959980600000051, 0.09959900000000044, 0.09959861099999934, 0.09960556999999959, 0.09959576400000003, 0.099596236, 0.0995949309999995, 0.09958806900000017, 0.09958944500000033]</msg>
<status status="PASS" starttime="20201103 12:35:48.563" endtime="20201103 12:35:48.564"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.558" endtime="20201103 12:35:48.565"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.567" endtime="20201103 12:35:48.569"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:48.571" endtime="20201103 12:35:48.590"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.569" endtime="20201103 12:35:48.591"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.565" endtime="20201103 12:35:48.591"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:41.152" endtime="20201103 12:35:48.592"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:41.084" endtime="20201103 12:35:48.592" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:48.599" endtime="20201103 12:35:48.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.597" endtime="20201103 12:35:48.619"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.632" endtime="20201103 12:35:48.644"></status>
</kw>
<msg timestamp="20201103 12:35:48.645" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.631" endtime="20201103 12:35:48.645"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.647" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.646" endtime="20201103 12:35:48.648"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:48.650" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:48.648" endtime="20201103 12:35:48.651"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:48.627" endtime="20201103 12:35:48.651"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:48.625" endtime="20201103 12:35:48.652"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.624" endtime="20201103 12:35:48.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:48.656" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:48.655" endtime="20201103 12:35:48.656"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.653" endtime="20201103 12:35:48.656"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.623" endtime="20201103 12:35:48.657"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.622" endtime="20201103 12:35:48.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.657" endtime="20201103 12:35:48.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.621" endtime="20201103 12:35:48.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.619" endtime="20201103 12:35:48.660"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.596" endtime="20201103 12:35:48.660"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:48.668" endtime="20201103 12:35:55.661"></status>
</kw>
<msg timestamp="20201103 12:35:55.662" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:48.667" endtime="20201103 12:35:55.663"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.667" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:55.664" endtime="20201103 12:35:55.668"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.670" endtime="20201103 12:35:55.674"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.664" endtime="20201103 12:35:55.675"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.662" endtime="20201103 12:35:55.676"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:55.681" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 15, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:35:55.677" endtime="20201103 12:35:55.681"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.689" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:55.687" endtime="20201103 12:35:55.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.694" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:35:55.692" endtime="20201103 12:35:55.694"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.682" endtime="20201103 12:35:55.695"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.703" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:35:55.701" endtime="20201103 12:35:55.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.708" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:35:55.706" endtime="20201103 12:35:55.708"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.697" endtime="20201103 12:35:55.709"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.717" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:35:55.715" endtime="20201103 12:35:55.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:55.721" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:35:55.719" endtime="20201103 12:35:55.722"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.710" endtime="20201103 12:35:55.723"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:55.739" endtime="20201103 12:35:56.044"></status>
</kw>
<msg timestamp="20201103 12:35:56.047" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057361958, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156954778, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:55.735" endtime="20201103 12:35:56.047"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.055" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057361958, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156954778, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:35:56.048" endtime="20201103 12:35:56.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.056" endtime="20201103 12:35:56.058"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.728" endtime="20201103 12:35:56.058"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:55.724" endtime="20201103 12:35:56.059"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:35:56.062" level="INFO">${FILTERED} = [{'time': 1.156954778, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09959282000000003, 'source_diff': 0.09959282000000003}, {'time': 1.256548903, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:35:56.059" endtime="20201103 12:35:56.063"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:35:56.075" level="INFO">${RESULT} = {'source_diff': [0.09959282000000003, 0.0995915140000001, 0.09958580500000003, 0.09957951399999998, 0.09958244500000002, 0.09958290299999994, 0.09958275000000016, 0.0995876389999999, 0.099583624999999...</msg>
<status status="PASS" starttime="20201103 12:35:56.063" endtime="20201103 12:35:56.076"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.080" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:35:56.079" endtime="20201103 12:35:56.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.082" level="INFO">VALUE: [0.09959282000000003, 0.0995915140000001, 0.09958580500000003, 0.09957951399999998, 0.09958244500000002, 0.09958290299999994, 0.09958275000000016, 0.0995876389999999, 0.09958362499999995, 0.09959423599999995, 0.09960056999999978, 0.09959856899999986, 0.09960329200000029, 0.09959923599999998, 0.09959258299999973, 0.09959490200000021, 0.09958970799999989, 0.09958691700000033, 0.09958626400000004, 0.09958783399999982, 0.09958954200000036, 0.09959104100000005, 0.09958480500000011, 0.09958023599999999, 0.09958186100000033, 0.09958605500000006, 0.0995882090000002, 0.09958945800000008, 0.09958720900000007, 0.09959619500000017, 0.09959433399999984, 0.09959309699999963, 0.09959086099999936, 0.09959572200000011, 0.09959724999999953, 0.0996016390000003, 0.09960130600000028, 0.09960306900000049, 0.0996011810000006, 0.0995992499999998, 0.09959438899999995, 0.0995900970000001, 0.09959455599999956, 0.09959822200000001, 0.09959301299999979, 0.09959016599999959, 0.09959329199999978, 0.09959288900000018, 0.09959566599999992, 0.09959444400000006]</msg>
<status status="PASS" starttime="20201103 12:35:56.081" endtime="20201103 12:35:56.083"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.076" endtime="20201103 12:35:56.083"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.086" endtime="20201103 12:35:56.087"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:56.089" endtime="20201103 12:35:56.108"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.087" endtime="20201103 12:35:56.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.084" endtime="20201103 12:35:56.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:48.661" endtime="20201103 12:35:56.110"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:48.594" endtime="20201103 12:35:56.110" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:56.117" endtime="20201103 12:35:56.136"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.115" endtime="20201103 12:35:56.137"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.150" endtime="20201103 12:35:56.162"></status>
</kw>
<msg timestamp="20201103 12:35:56.163" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:56.149" endtime="20201103 12:35:56.163"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.165" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:56.164" endtime="20201103 12:35:56.166"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:56.168" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:56.166" endtime="20201103 12:35:56.169"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:56.146" endtime="20201103 12:35:56.169"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:56.143" endtime="20201103 12:35:56.170"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.142" endtime="20201103 12:35:56.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:56.174" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:56.173" endtime="20201103 12:35:56.174"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.171" endtime="20201103 12:35:56.174"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.141" endtime="20201103 12:35:56.174"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.140" endtime="20201103 12:35:56.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.175" endtime="20201103 12:35:56.177"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.139" endtime="20201103 12:35:56.177"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.137" endtime="20201103 12:35:56.178"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.114" endtime="20201103 12:35:56.178"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:56.186" endtime="20201103 12:36:03.180"></status>
</kw>
<msg timestamp="20201103 12:36:03.181" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:56.185" endtime="20201103 12:36:03.181"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.186" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:03.183" endtime="20201103 12:36:03.187"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.189" endtime="20201103 12:36:03.192"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.182" endtime="20201103 12:36:03.193"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.180" endtime="20201103 12:36:03.194"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:03.199" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 20, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:03.196" endtime="20201103 12:36:03.200"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.208" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:03.206" endtime="20201103 12:36:03.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.213" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:03.211" endtime="20201103 12:36:03.213"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.201" endtime="20201103 12:36:03.214"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.222" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:03.220" endtime="20201103 12:36:03.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.227" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:03.225" endtime="20201103 12:36:03.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.216" endtime="20201103 12:36:03.228"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.238" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:03.236" endtime="20201103 12:36:03.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.243" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:36:03.241" endtime="20201103 12:36:03.244"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.230" endtime="20201103 12:36:03.245"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.259" endtime="20201103 12:36:03.563"></status>
</kw>
<msg timestamp="20201103 12:36:03.566" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057379819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156971222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:03.256" endtime="20201103 12:36:03.566"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.574" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057379819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156971222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:03.567" endtime="20201103 12:36:03.574"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.575" endtime="20201103 12:36:03.576"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.250" endtime="20201103 12:36:03.577"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.246" endtime="20201103 12:36:03.577"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:03.581" level="INFO">${FILTERED} = [{'time': 1.156971222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.0995914029999998, 'source_diff': 0.0995914029999998}, {'time': 1.256563792, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.0...</msg>
<status status="PASS" starttime="20201103 12:36:03.578" endtime="20201103 12:36:03.581"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:03.596" level="INFO">${RESULT} = {'source_diff': [0.0995914029999998, 0.099589959, 0.09958837499999995, 0.0995873060000001, 0.099594403, 0.09959154199999998, 0.09959570799999984, 0.0995883059999998, 0.09959267999999999, 0.099591486, ...</msg>
<status status="PASS" starttime="20201103 12:36:03.582" endtime="20201103 12:36:03.596"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.600" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:03.599" endtime="20201103 12:36:03.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.603" level="INFO">VALUE: [0.0995914029999998, 0.099589959, 0.09958837499999995, 0.0995873060000001, 0.099594403, 0.09959154199999998, 0.09959570799999984, 0.0995883059999998, 0.09959267999999999, 0.099591486, 0.09959206900000028, 0.09959087500000008, 0.09959043000000012, 0.0995937360000001, 0.09958902800000002, 0.09959249999999997, 0.09959551399999977, 0.09959229200000008, 0.0995968890000003, 0.09960058299999996, 0.09960142999999988, 0.09959707000000018, 0.09960387500000012, 0.09960358299999994, 0.09959923599999998, 0.0995988609999996, 0.099598764, 0.09960097199999973, 0.09960126399999991, 0.09960465299999965, 0.09960205600000016, 0.09960312499999979, 0.09960550000000001, 0.09960490300000036, 0.09959330499999997, 0.09959337499999954, 0.0995916939999999, 0.09959690300000013, 0.09959613899999997, 0.09959815199999955, 0.0995923620000001, 0.09959054099999953, 0.09959130599999977, 0.09958880599999986, 0.09959656900000002, 0.0995866249999997, 0.0995866809999999, 0.09958438900000033, 0.09958970799999989, 0.09958802800000033]</msg>
<status status="PASS" starttime="20201103 12:36:03.601" endtime="20201103 12:36:03.604"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.597" endtime="20201103 12:36:03.604"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.606" endtime="20201103 12:36:03.608"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:03.610" endtime="20201103 12:36:03.629"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.608" endtime="20201103 12:36:03.630"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.605" endtime="20201103 12:36:03.630"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:56.179" endtime="20201103 12:36:03.630"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:56.112" endtime="20201103 12:36:03.631" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:03.637" endtime="20201103 12:36:03.657"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.636" endtime="20201103 12:36:03.657"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.671" endtime="20201103 12:36:03.683"></status>
</kw>
<msg timestamp="20201103 12:36:03.684" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:03.669" endtime="20201103 12:36:03.684"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.686" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:03.685" endtime="20201103 12:36:03.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:03.689" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:03.687" endtime="20201103 12:36:03.689"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:03.667" endtime="20201103 12:36:03.690"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:03.665" endtime="20201103 12:36:03.691"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.662" endtime="20201103 12:36:03.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:03.695" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:03.694" endtime="20201103 12:36:03.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.692" endtime="20201103 12:36:03.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.662" endtime="20201103 12:36:03.695"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.661" endtime="20201103 12:36:03.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.696" endtime="20201103 12:36:03.698"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.660" endtime="20201103 12:36:03.698"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.658" endtime="20201103 12:36:03.699"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.635" endtime="20201103 12:36:03.699"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:03.707" endtime="20201103 12:36:10.700"></status>
</kw>
<msg timestamp="20201103 12:36:10.701" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:03.706" endtime="20201103 12:36:10.702"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.707" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:10.704" endtime="20201103 12:36:10.707"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.709" endtime="20201103 12:36:10.712"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.703" endtime="20201103 12:36:10.713"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.701" endtime="20201103 12:36:10.714"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:10.719" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'bg-timer-count': 25, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:10.716" endtime="20201103 12:36:10.720"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.728" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:10.726" endtime="20201103 12:36:10.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.732" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:10.730" endtime="20201103 12:36:10.733"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.721" endtime="20201103 12:36:10.734"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.742" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:10.740" endtime="20201103 12:36:10.742"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.746" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:10.744" endtime="20201103 12:36:10.747"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.735" endtime="20201103 12:36:10.748"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.758" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:10.756" endtime="20201103 12:36:10.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:10.762" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:36:10.760" endtime="20201103 12:36:10.763"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.749" endtime="20201103 12:36:10.764"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:10.777" endtime="20201103 12:36:11.083"></status>
</kw>
<msg timestamp="20201103 12:36:11.086" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058068375, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157655764, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:10.774" endtime="20201103 12:36:11.086"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.093" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058068375, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157655764, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:11.087" endtime="20201103 12:36:11.094"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:11.095" endtime="20201103 12:36:11.096"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.769" endtime="20201103 12:36:11.097"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:10.765" endtime="20201103 12:36:11.097"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:11.101" level="INFO">${FILTERED} = [{'time': 1.157655764, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09958738900000008, 'source_diff': 0.09958738900000008}, {'time': 1.257246597, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:11.098" endtime="20201103 12:36:11.101"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:11.114" level="INFO">${RESULT} = {'source_diff': [0.09958738900000008, 0.09958822199999995, 0.09957869400000008, 0.0995739579999999, 0.09957299999999991, 0.09958893000000013, 0.0995918469999999, 0.09958705600000006, 0.099583236000000...</msg>
<status status="PASS" starttime="20201103 12:36:11.102" endtime="20201103 12:36:11.115"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.119" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:11.118" endtime="20201103 12:36:11.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:11.121" level="INFO">VALUE: [0.09958738900000008, 0.09958822199999995, 0.09957869400000008, 0.0995739579999999, 0.09957299999999991, 0.09958893000000013, 0.0995918469999999, 0.09958705600000006, 0.09958323600000019, 0.09958398600000007, 0.09958179199999995, 0.09958251399999973, 0.09957793000000015, 0.09958469499999989, 0.09958388900000026, 0.09958677799999993, 0.0995902919999998, 0.09958437500000006, 0.09958234800000021, 0.09958095799999978, 0.09958786099999983, 0.09958720799999998, 0.09958787499999966, 0.09958945800000008, 0.09958836199999999, 0.09958417999999991, 0.09957837500000011, 0.09957840200000012, 0.09958475, 0.09958747199999962, 0.09958505500000037, 0.09958422199999983, 0.09958831999999962, 0.09958343000000003, 0.09958350000000049, 0.09958923599999991, 0.09958783300000018, 0.09958805599999998, 0.09958837499999973, 0.0995875970000002, 0.09958131999999953, 0.09958138899999991, 0.09958559699999991, 0.09957895900000047, 0.09957879199999997, 0.0995773049999995, 0.09957777800000045, 0.099579694, 0.09958204199999976, 0.09957919499999957]</msg>
<status status="PASS" starttime="20201103 12:36:11.120" endtime="20201103 12:36:11.121"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.115" endtime="20201103 12:36:11.122"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:11.124" endtime="20201103 12:36:11.125"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:11.127" endtime="20201103 12:36:11.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.126" endtime="20201103 12:36:11.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:11.122" endtime="20201103 12:36:11.148"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:03.699" endtime="20201103 12:36:11.148"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:03.632" endtime="20201103 12:36:11.149" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:24.486" endtime="20201103 12:36:11.156"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">saml10-xpro</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:35:22.374" endtime="20201103 12:36:11.181"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_saml10-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
