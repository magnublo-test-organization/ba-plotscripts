<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:25:23.163" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:23.757" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:23.765" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:24.908" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:23.755" endtime="20201103 12:25:24.909"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:24.912" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:24.910" endtime="20201103 12:25:24.913"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:23.754" endtime="20201103 12:25:24.914"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:24.917" endtime="20201103 12:25:25.104"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:24.915" endtime="20201103 12:25:25.105"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.118" endtime="20201103 12:25:25.131"></status>
</kw>
<msg timestamp="20201103 12:25:25.131" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.116" endtime="20201103 12:25:25.131"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.134" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.132" endtime="20201103 12:25:25.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.137" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:25.135" endtime="20201103 12:25:25.137"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:25.113" endtime="20201103 12:25:25.138"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:25.111" endtime="20201103 12:25:25.138"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.110" endtime="20201103 12:25:25.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:25.147" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:25.146" endtime="20201103 12:25:25.148"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.141" endtime="20201103 12:25:25.149"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.109" endtime="20201103 12:25:25.149"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.108" endtime="20201103 12:25:25.149"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.151" endtime="20201103 12:25:25.154"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.107" endtime="20201103 12:25:25.155"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.157" endtime="20201103 12:25:25.160"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.105" endtime="20201103 12:25:25.161"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:23.752" endtime="20201103 12:25:25.162"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:25.175" endtime="20201103 12:25:25.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.171" endtime="20201103 12:25:25.198"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.227" endtime="20201103 12:25:25.243"></status>
</kw>
<msg timestamp="20201103 12:25:25.244" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.224" endtime="20201103 12:25:25.244"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.246" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.245" endtime="20201103 12:25:25.247"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.249" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:25.247" endtime="20201103 12:25:25.250"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:25.217" endtime="20201103 12:25:25.250"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:25.212" endtime="20201103 12:25:25.251"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.209" endtime="20201103 12:25:25.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:25.255" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:25.254" endtime="20201103 12:25:25.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.252" endtime="20201103 12:25:25.256"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.207" endtime="20201103 12:25:25.256"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.206" endtime="20201103 12:25:25.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.257" endtime="20201103 12:25:25.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.203" endtime="20201103 12:25:25.259"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.199" endtime="20201103 12:25:25.259"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.169" endtime="20201103 12:25:25.259"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.266" endtime="20201103 12:25:25.274"></status>
</kw>
<msg timestamp="20201103 12:25:25.275" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.264" endtime="20201103 12:25:25.275"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.277" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:25.276" endtime="20201103 12:25:25.277"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:25.278" endtime="20201103 12:25:25.280"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.262" endtime="20201103 12:25:25.280"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.260" endtime="20201103 12:25:25.281"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.285" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:25.284" endtime="20201103 12:25:25.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.287" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:25:25.286" endtime="20201103 12:25:25.287"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.281" endtime="20201103 12:25:25.287"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:25.163" endtime="20201103 12:25:25.288" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:23.290" endtime="20201103 12:25:25.290"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:25.340" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:25.348" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:26.517" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:25.338" endtime="20201103 12:25:26.518"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.520" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:26.519" endtime="20201103 12:25:26.521"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.337" endtime="20201103 12:25:26.521"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:26.523" endtime="20201103 12:25:26.802"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.522" endtime="20201103 12:25:26.803"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.815" endtime="20201103 12:25:26.828"></status>
</kw>
<msg timestamp="20201103 12:25:26.828" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.814" endtime="20201103 12:25:26.828"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.830" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.829" endtime="20201103 12:25:26.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.834" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:26.832" endtime="20201103 12:25:26.834"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:26.811" endtime="20201103 12:25:26.835"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:26.809" endtime="20201103 12:25:26.835"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.808" endtime="20201103 12:25:26.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:26.839" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:26.838" endtime="20201103 12:25:26.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.836" endtime="20201103 12:25:26.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.807" endtime="20201103 12:25:26.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.806" endtime="20201103 12:25:26.840"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.841" endtime="20201103 12:25:26.842"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.805" endtime="20201103 12:25:26.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.844" endtime="20201103 12:25:26.845"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.804" endtime="20201103 12:25:26.846"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:25.336" endtime="20201103 12:25:26.846"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:26.853" endtime="20201103 12:25:26.872"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.851" endtime="20201103 12:25:26.873"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.885" endtime="20201103 12:25:26.898"></status>
</kw>
<msg timestamp="20201103 12:25:26.899" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.884" endtime="20201103 12:25:26.899"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.902" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.900" endtime="20201103 12:25:26.903"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.907" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:26.904" endtime="20201103 12:25:26.907"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:26.881" endtime="20201103 12:25:26.908"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:26.879" endtime="20201103 12:25:26.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.878" endtime="20201103 12:25:26.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:26.915" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:26.913" endtime="20201103 12:25:26.915"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.910" endtime="20201103 12:25:26.916"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.877" endtime="20201103 12:25:26.916"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.876" endtime="20201103 12:25:26.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.917" endtime="20201103 12:25:26.919"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.875" endtime="20201103 12:25:26.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.873" endtime="20201103 12:25:26.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.849" endtime="20201103 12:25:26.920"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.931" endtime="20201103 12:25:33.931"></status>
</kw>
<msg timestamp="20201103 12:25:33.932" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.929" endtime="20201103 12:25:33.932"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.937" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:33.934" endtime="20201103 12:25:33.938"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:33.940" endtime="20201103 12:25:33.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.926" endtime="20201103 12:25:33.944"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.923" endtime="20201103 12:25:33.945"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:33.950" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:25:33.947" endtime="20201103 12:25:33.950"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.959" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:33.957" endtime="20201103 12:25:33.959"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.963" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:33.961" endtime="20201103 12:25:33.964"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.952" endtime="20201103 12:25:33.965"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.973" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:33.971" endtime="20201103 12:25:33.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.977" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:33.975" endtime="20201103 12:25:33.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.966" endtime="20201103 12:25:33.979"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.987" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:33.985" endtime="20201103 12:25:33.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:33.992" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:33.989" endtime="20201103 12:25:33.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.980" endtime="20201103 12:25:33.994"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.008" endtime="20201103 12:25:34.312"></status>
</kw>
<msg timestamp="20201103 12:25:34.315" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067329208, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166934639, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:34.004" endtime="20201103 12:25:34.315"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.323" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.067329208, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166934639, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:34.316" endtime="20201103 12:25:34.323"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.324" endtime="20201103 12:25:34.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.999" endtime="20201103 12:25:34.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:33.995" endtime="20201103 12:25:34.327"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:34.331" level="INFO">${FILTERED} = [{'time': 1.166934639, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09960543099999986, 'source_diff': 0.09960543099999986}, {'time': 1.266535222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:34.328" endtime="20201103 12:25:34.331"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:34.344" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:25:34.332" endtime="20201103 12:25:34.344"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.349" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:34.347" endtime="20201103 12:25:34.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.351" level="INFO">VALUE: [0.09960543099999986, 0.09959808299999984, 0.09959881999999998, 0.09960072199999992, 0.0995997780000002, 0.09960202800000006, 0.09960605499999997, 0.09960186100000001, 0.09960229200000015, 0.0996050970000002, 0.09960913900000001, 0.09960741700000009, 0.09960941600000028, 0.09961018100000008, 0.09961015299999998, 0.09960161099999976, 0.09959456899999974, 0.09960186100000001, 0.0996021250000001, 0.09959830599999986, 0.09959775000000004, 0.09959311199999998, 0.09959830499999978, 0.09959951399999989, 0.09960470800000021, 0.09960391599999996, 0.09960073600000019, 0.09959804099999969, 0.09959667999999988, 0.09959493099999994, 0.09959406900000012, 0.09959530600000033, 0.0995943050000001, 0.09958973600000043, 0.09959238899999967, 0.09959586200000015, 0.09959893100000006, 0.09959701400000043, 0.09959808300000006, 0.09959929199999973, 0.09959763900000063, 0.09959945900000022, 0.09960066599999973, 0.09959844399999973, 0.09959984799999955, 0.09959283299999999, 0.09959269500000012, 0.09959388900000032, 0.09960001399999996, 0.09959627699999984]</msg>
<status status="PASS" starttime="20201103 12:25:34.350" endtime="20201103 12:25:34.351"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.345" endtime="20201103 12:25:34.352"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.354" endtime="20201103 12:25:34.356"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:34.358" endtime="20201103 12:25:34.377"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.356" endtime="20201103 12:25:34.378"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.353" endtime="20201103 12:25:34.378"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.921" endtime="20201103 12:25:34.378"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:26.846" endtime="20201103 12:25:34.379" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:34.385" endtime="20201103 12:25:34.405"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.384" endtime="20201103 12:25:34.405"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.419" endtime="20201103 12:25:34.431"></status>
</kw>
<msg timestamp="20201103 12:25:34.431" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.417" endtime="20201103 12:25:34.432"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.434" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.432" endtime="20201103 12:25:34.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.437" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:34.435" endtime="20201103 12:25:34.437"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.414" endtime="20201103 12:25:34.438"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.412" endtime="20201103 12:25:34.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.410" endtime="20201103 12:25:34.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:34.442" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:34.442" endtime="20201103 12:25:34.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.440" endtime="20201103 12:25:34.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.410" endtime="20201103 12:25:34.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.409" endtime="20201103 12:25:34.443"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.444" endtime="20201103 12:25:34.446"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.408" endtime="20201103 12:25:34.446"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.406" endtime="20201103 12:25:34.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.383" endtime="20201103 12:25:34.447"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.456" endtime="20201103 12:25:41.447"></status>
</kw>
<msg timestamp="20201103 12:25:41.447" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.455" endtime="20201103 12:25:41.447"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.450" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.448" endtime="20201103 12:25:41.450"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.451" endtime="20201103 12:25:41.453"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.452" endtime="20201103 12:25:41.454"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.449" endtime="20201103 12:25:41.454"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:41.457" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:25:41.455" endtime="20201103 12:25:41.457"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.462" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:41.460" endtime="20201103 12:25:41.462"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.464" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:41.463" endtime="20201103 12:25:41.465"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.458" endtime="20201103 12:25:41.465"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.470" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:41.468" endtime="20201103 12:25:41.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.473" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:41.472" endtime="20201103 12:25:41.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.466" endtime="20201103 12:25:41.474"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.479" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:41.477" endtime="20201103 12:25:41.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.481" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:25:41.480" endtime="20201103 12:25:41.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.475" endtime="20201103 12:25:41.482"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.490" endtime="20201103 12:25:41.787"></status>
</kw>
<msg timestamp="20201103 12:25:41.790" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058478125, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.158068208, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:41.488" endtime="20201103 12:25:41.790"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.797" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058478125, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.158068208, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:41.791" endtime="20201103 12:25:41.798"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.799" endtime="20201103 12:25:41.800"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.485" endtime="20201103 12:25:41.801"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.483" endtime="20201103 12:25:41.801"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:41.805" level="INFO">${FILTERED} = [{'time': 1.158068208, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09959008300000005, 'source_diff': 0.09959008300000005}, {'time': 1.257655889, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:41.802" endtime="20201103 12:25:41.805"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:41.820" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:25:41.806" endtime="20201103 12:25:41.820"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.824" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:41.823" endtime="20201103 12:25:41.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.827" level="INFO">VALUE: [0.09959008300000005, 0.09958519499999996, 0.09958693099999993, 0.09958652700000004, 0.09958855600000005, 0.09958820800000012, 0.09958690300000006, 0.09959104199999991, 0.099595514, 0.09959916700000004, 0.0995999030000001, 0.0996029730000001, 0.09960298599999984, 0.0996000269999997, 0.09960311200000005, 0.09960091599999998, 0.09960395799999988, 0.09960213899999992, 0.09960155500000001, 0.09960125000000009, 0.0995972359999997, 0.09959797300000028, 0.09959729099999981, 0.09959941599999977, 0.09960488900000009, 0.09960131999999966, 0.09960579099999967, 0.09961562499999976, 0.09961456900000032, 0.09961687499999972, 0.09961319400000068, 0.09961470899999991, 0.0996118749999999, 0.09961343099999986, 0.09961308400000046, 0.0996135279999999, 0.09961374999999961, 0.09961211099999989, 0.0996061939999997, 0.09959790299999938, 0.09960598599999937, 0.09960750000000029, 0.09960934700000035, 0.09961244399999991, 0.09960799999999992, 0.09960600000000053, 0.09961481900000013, 0.09961359799999947, 0.09961794400000024, 0.0996162500000004]</msg>
<status status="PASS" starttime="20201103 12:25:41.826" endtime="20201103 12:25:41.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.821" endtime="20201103 12:25:41.828"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.830" endtime="20201103 12:25:41.831"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:41.833" endtime="20201103 12:25:41.853"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.832" endtime="20201103 12:25:41.853"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.828" endtime="20201103 12:25:41.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.447" endtime="20201103 12:25:41.854"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:34.380" endtime="20201103 12:25:41.855" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:41.862" endtime="20201103 12:25:41.881"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.860" endtime="20201103 12:25:41.882"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.895" endtime="20201103 12:25:41.907"></status>
</kw>
<msg timestamp="20201103 12:25:41.907" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.893" endtime="20201103 12:25:41.907"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.910" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.908" endtime="20201103 12:25:41.910"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:41.913" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:41.911" endtime="20201103 12:25:41.913"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:41.890" endtime="20201103 12:25:41.914"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:41.888" endtime="20201103 12:25:41.914"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.887" endtime="20201103 12:25:41.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:41.919" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:41.917" endtime="20201103 12:25:41.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.915" endtime="20201103 12:25:41.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.886" endtime="20201103 12:25:41.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.885" endtime="20201103 12:25:41.920"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.921" endtime="20201103 12:25:41.922"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.884" endtime="20201103 12:25:41.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.882" endtime="20201103 12:25:41.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.858" endtime="20201103 12:25:41.924"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:41.932" endtime="20201103 12:25:48.930"></status>
</kw>
<msg timestamp="20201103 12:25:48.931" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:41.930" endtime="20201103 12:25:48.932"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.937" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:48.934" endtime="20201103 12:25:48.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:48.939" endtime="20201103 12:25:48.942"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.928" endtime="20201103 12:25:48.943"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.926" endtime="20201103 12:25:48.944"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:48.950" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:25:48.946" endtime="20201103 12:25:48.950"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.959" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:48.956" endtime="20201103 12:25:48.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.963" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:48.961" endtime="20201103 12:25:48.964"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:48.951" endtime="20201103 12:25:48.965"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.973" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:48.971" endtime="20201103 12:25:48.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.977" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:48.975" endtime="20201103 12:25:48.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:48.966" endtime="20201103 12:25:48.979"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.987" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:48.985" endtime="20201103 12:25:48.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:48.992" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:25:48.990" endtime="20201103 12:25:48.992"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:48.980" endtime="20201103 12:25:48.993"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.003" endtime="20201103 12:25:49.302"></status>
</kw>
<msg timestamp="20201103 12:25:49.305" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057865431, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157464903, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:49.002" endtime="20201103 12:25:49.305"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.313" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057865431, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157464903, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:49.306" endtime="20201103 12:25:49.314"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.315" endtime="20201103 12:25:49.316"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:48.998" endtime="20201103 12:25:49.317"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:48.995" endtime="20201103 12:25:49.317"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:49.321" level="INFO">${FILTERED} = [{'time': 1.157464903, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09959947199999997, 'source_diff': 0.09959947199999997}, {'time': 1.257063069, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:49.318" endtime="20201103 12:25:49.321"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:49.334" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:25:49.322" endtime="20201103 12:25:49.334"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.338" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:49.337" endtime="20201103 12:25:49.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.340" level="INFO">VALUE: [0.09959947199999997, 0.09959566599999992, 0.09959086099999981, 0.09959654200000001, 0.09960142999999988, 0.09959880599999993, 0.0996009579999999, 0.09959680500000001, 0.09959381899999986, 0.09959348600000006, 0.09959754200000015, 0.09959798600000003, 0.09959937499999993, 0.09959726400000024, 0.09959015299999985, 0.09958730500000001, 0.09959109700000024, 0.09959359700000014, 0.09958515300000004, 0.09958816700000028, 0.099592291, 0.09958915299999971, 0.09958527800000017, 0.0995804859999998, 0.0995817080000001, 0.09958115299999992, 0.09957973600000036, 0.09958351400000032, 0.09959241599999968, 0.0995967219999998, 0.0995971520000003, 0.09959232000000018, 0.09958820800000012, 0.09959750000000067, 0.09959016699999967, 0.0995780970000002, 0.09957662500000009, 0.09958829099999988, 0.09958919399999999, 0.0995890140000002, 0.0995902640000006, 0.09959531999999971, 0.0995919719999998, 0.09959483399999947, 0.09959669399999971, 0.09959156900000021, 0.0995898749999995, 0.09959277799999988, 0.09959393100000025, 0.09959380499999959]</msg>
<status status="PASS" starttime="20201103 12:25:49.339" endtime="20201103 12:25:49.341"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.335" endtime="20201103 12:25:49.341"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.344" endtime="20201103 12:25:49.345"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:49.347" endtime="20201103 12:25:49.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.346" endtime="20201103 12:25:49.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.342" endtime="20201103 12:25:49.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:41.924" endtime="20201103 12:25:49.368"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:41.856" endtime="20201103 12:25:49.369" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:49.375" endtime="20201103 12:25:49.395"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.374" endtime="20201103 12:25:49.395"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.408" endtime="20201103 12:25:49.421"></status>
</kw>
<msg timestamp="20201103 12:25:49.422" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.406" endtime="20201103 12:25:49.422"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.424" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.423" endtime="20201103 12:25:49.424"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:49.427" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:49.425" endtime="20201103 12:25:49.427"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:49.404" endtime="20201103 12:25:49.428"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:49.401" endtime="20201103 12:25:49.429"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.400" endtime="20201103 12:25:49.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:49.433" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:49.432" endtime="20201103 12:25:49.433"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.430" endtime="20201103 12:25:49.433"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.399" endtime="20201103 12:25:49.433"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.399" endtime="20201103 12:25:49.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.434" endtime="20201103 12:25:49.436"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.398" endtime="20201103 12:25:49.436"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.396" endtime="20201103 12:25:49.437"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.372" endtime="20201103 12:25:49.437"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:49.445" endtime="20201103 12:25:56.448"></status>
</kw>
<msg timestamp="20201103 12:25:56.449" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:49.444" endtime="20201103 12:25:56.449"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.454" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:56.451" endtime="20201103 12:25:56.455"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.457" endtime="20201103 12:25:56.461"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.441" endtime="20201103 12:25:56.462"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.439" endtime="20201103 12:25:56.463"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:56.471" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:25:56.464" endtime="20201103 12:25:56.472"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.487" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:56.484" endtime="20201103 12:25:56.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.493" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:56.489" endtime="20201103 12:25:56.494"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.474" endtime="20201103 12:25:56.495"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.504" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:56.502" endtime="20201103 12:25:56.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.510" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:56.508" endtime="20201103 12:25:56.510"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.496" endtime="20201103 12:25:56.512"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.519" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:56.517" endtime="20201103 12:25:56.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.524" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:25:56.522" endtime="20201103 12:25:56.524"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.513" endtime="20201103 12:25:56.525"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.541" endtime="20201103 12:25:56.840"></status>
</kw>
<msg timestamp="20201103 12:25:56.843" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057695736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157305625, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:56.535" endtime="20201103 12:25:56.843"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.851" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057695736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157305625, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:56.844" endtime="20201103 12:25:56.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.852" endtime="20201103 12:25:56.853"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.530" endtime="20201103 12:25:56.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.527" endtime="20201103 12:25:56.854"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:56.858" level="INFO">${FILTERED} = [{'time': 1.157305625, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.0996098889999999, 'source_diff': 0.0996098889999999}, {'time': 1.25691175, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09...</msg>
<status status="PASS" starttime="20201103 12:25:56.855" endtime="20201103 12:25:56.858"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:56.871" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:25:56.859" endtime="20201103 12:25:56.871"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.875" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:56.874" endtime="20201103 12:25:56.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.877" level="INFO">VALUE: [0.0996098889999999, 0.09960365299999996, 0.09960170800000001, 0.099609222, 0.09960290299999985, 0.09961322200000011, 0.09961507000000003, 0.0996090140000001, 0.09961092999999988, 0.09960752700000008, 0.09961034700000004, 0.09960369499999988, 0.09960995799999983, 0.09960757000000031, 0.09961308299999994, 0.0996126949999998, 0.09960848599999972, 0.09959991699999993, 0.09960144499999979, 0.09960526400000003, 0.09960816699999997, 0.0996059309999997, 0.099601528, 0.099604319, 0.0996065279999998, 0.09960722199999994, 0.09960461100000018, 0.09961062499999995, 0.09960338899999988, 0.09960236099999964, 0.09960066699999981, 0.09960513900000034, 0.09960434700000054, 0.09959763899999974, 0.09959999999999969, 0.09959804200000022, 0.09959473700000032, 0.09959484699999965, 0.09960015299999991, 0.09960293000000053, 0.09960645899999943, 0.09961084700000011, 0.0996082920000001, 0.09961048599999955, 0.09961104100000018, 0.09960908299999982, 0.09960598600000026, 0.09960466700000037, 0.09960451400000014, 0.09959902800000009]</msg>
<status status="PASS" starttime="20201103 12:25:56.876" endtime="20201103 12:25:56.878"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.872" endtime="20201103 12:25:56.879"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.881" endtime="20201103 12:25:56.882"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:56.884" endtime="20201103 12:25:56.904"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.883" endtime="20201103 12:25:56.904"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.879" endtime="20201103 12:25:56.905"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:49.438" endtime="20201103 12:25:56.905"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:49.370" endtime="20201103 12:25:56.905" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:56.912" endtime="20201103 12:25:56.931"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.910" endtime="20201103 12:25:56.932"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.945" endtime="20201103 12:25:56.958"></status>
</kw>
<msg timestamp="20201103 12:25:56.958" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:56.944" endtime="20201103 12:25:56.958"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.960" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:56.959" endtime="20201103 12:25:56.961"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:56.963" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:56.961" endtime="20201103 12:25:56.964"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:56.940" endtime="20201103 12:25:56.964"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:56.938" endtime="20201103 12:25:56.965"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.937" endtime="20201103 12:25:56.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:56.969" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:56.968" endtime="20201103 12:25:56.969"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.966" endtime="20201103 12:25:56.969"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.936" endtime="20201103 12:25:56.970"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.935" endtime="20201103 12:25:56.970"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.970" endtime="20201103 12:25:56.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.934" endtime="20201103 12:25:56.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.932" endtime="20201103 12:25:56.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.909" endtime="20201103 12:25:56.973"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:56.981" endtime="20201103 12:26:03.975"></status>
</kw>
<msg timestamp="20201103 12:26:03.976" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:56.980" endtime="20201103 12:26:03.977"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:03.981" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:03.978" endtime="20201103 12:26:03.983"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:03.984" endtime="20201103 12:26:03.988"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.977" endtime="20201103 12:26:03.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.975" endtime="20201103 12:26:03.990"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:03.995" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:26:03.991" endtime="20201103 12:26:03.995"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.003" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:04.001" endtime="20201103 12:26:04.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.008" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:04.006" endtime="20201103 12:26:04.008"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:03.997" endtime="20201103 12:26:04.009"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.017" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:04.015" endtime="20201103 12:26:04.018"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.021" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:04.019" endtime="20201103 12:26:04.022"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.010" endtime="20201103 12:26:04.023"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.032" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:04.030" endtime="20201103 12:26:04.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.038" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:26:04.034" endtime="20201103 12:26:04.039"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.024" endtime="20201103 12:26:04.040"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:04.049" endtime="20201103 12:26:04.346"></status>
</kw>
<msg timestamp="20201103 12:26:04.349" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057554792, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157162042, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:04.047" endtime="20201103 12:26:04.349"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.356" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057554792, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157162042, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:04.350" endtime="20201103 12:26:04.357"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:04.358" endtime="20201103 12:26:04.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.045" endtime="20201103 12:26:04.360"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.041" endtime="20201103 12:26:04.360"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:04.364" level="INFO">${FILTERED} = [{'time': 1.157162042, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09960725000000004, 'source_diff': 0.09960725000000004}, {'time': 1.256765722, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:04.361" endtime="20201103 12:26:04.364"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:04.379" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:26:04.365" endtime="20201103 12:26:04.379"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.383" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:04.382" endtime="20201103 12:26:04.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.386" level="INFO">VALUE: [0.09960725000000004, 0.09960124999999986, 0.09960438900000002, 0.09960359699999999, 0.09960661100000001, 0.09960911099999992, 0.09961086100000016, 0.09960627799999999, 0.09960965300000013, 0.0996095549999998, 0.09960452799999997, 0.09960695899999994, 0.09960515300000017, 0.09960366699999978, 0.09960415300000003, 0.09960584799999994, 0.09960502699999996, 0.09961052799999992, 0.09961062499999995, 0.09960887499999993, 0.09961254200000003, 0.09961337500000012, 0.09960970800000002, 0.09960973600000012, 0.09961251399999993, 0.09961284800000003, 0.09961737499999979, 0.09960006900000007, 0.09959137500000015, 0.09960026299999969, 0.09959636099999969, 0.09959895899999971, 0.0995991389999995, 0.0995976109999992, 0.09959748599999951, 0.09959679099999974, 0.09959638800000015, 0.09959408400000047, 0.09959411100000004, 0.09959113900000016, 0.09959401400000001, 0.09959152799999949, 0.09959397200000009, 0.09959198600000008, 0.09959087499999963, 0.09958398599999985, 0.09958558399999973, 0.09958741600000032, 0.0995900970000001, 0.09958376400000013]</msg>
<status status="PASS" starttime="20201103 12:26:04.384" endtime="20201103 12:26:04.386"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.380" endtime="20201103 12:26:04.387"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:04.389" endtime="20201103 12:26:04.390"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:04.392" endtime="20201103 12:26:04.412"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.391" endtime="20201103 12:26:04.412"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.387" endtime="20201103 12:26:04.413"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:56.974" endtime="20201103 12:26:04.413"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:56.907" endtime="20201103 12:26:04.413" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:04.420" endtime="20201103 12:26:04.439"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.418" endtime="20201103 12:26:04.440"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:04.454" endtime="20201103 12:26:04.466"></status>
</kw>
<msg timestamp="20201103 12:26:04.467" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:04.452" endtime="20201103 12:26:04.467"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.469" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:04.468" endtime="20201103 12:26:04.470"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:04.472" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:04.470" endtime="20201103 12:26:04.473"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:04.449" endtime="20201103 12:26:04.473"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:04.446" endtime="20201103 12:26:04.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.445" endtime="20201103 12:26:04.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:04.478" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:04.477" endtime="20201103 12:26:04.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.475" endtime="20201103 12:26:04.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.444" endtime="20201103 12:26:04.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.444" endtime="20201103 12:26:04.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:04.479" endtime="20201103 12:26:04.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.442" endtime="20201103 12:26:04.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.441" endtime="20201103 12:26:04.482"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.417" endtime="20201103 12:26:04.482"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:04.491" endtime="20201103 12:26:11.485"></status>
</kw>
<msg timestamp="20201103 12:26:11.486" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:04.489" endtime="20201103 12:26:11.486"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.491" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:11.488" endtime="20201103 12:26:11.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.493" endtime="20201103 12:26:11.497"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.486" endtime="20201103 12:26:11.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.484" endtime="20201103 12:26:11.499"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:11.504" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:26:11.500" endtime="20201103 12:26:11.504"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.512" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:11.510" endtime="20201103 12:26:11.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.517" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:11.515" endtime="20201103 12:26:11.517"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.505" endtime="20201103 12:26:11.518"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.526" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:11.524" endtime="20201103 12:26:11.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.530" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:11.528" endtime="20201103 12:26:11.531"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.519" endtime="20201103 12:26:11.532"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.540" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:11.538" endtime="20201103 12:26:11.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.547" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:26:11.545" endtime="20201103 12:26:11.547"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.533" endtime="20201103 12:26:11.549"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.561" endtime="20201103 12:26:11.858"></status>
</kw>
<msg timestamp="20201103 12:26:11.861" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058794847, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.15839425, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:26:11.559" endtime="20201103 12:26:11.861"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.869" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058794847, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.15839425, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:26:11.862" endtime="20201103 12:26:11.869"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.870" endtime="20201103 12:26:11.871"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.553" endtime="20201103 12:26:11.872"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.550" endtime="20201103 12:26:11.872"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:11.876" level="INFO">${FILTERED} = [{'time': 1.15839425, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09959940300000003, 'source_diff': 0.09959940300000003}, {'time': 1.257992111, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:26:11.873" endtime="20201103 12:26:11.876"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:11.890" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:26:11.878" endtime="20201103 12:26:11.890"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.894" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:11.893" endtime="20201103 12:26:11.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:11.896" level="INFO">VALUE: [0.09959940300000003, 0.09959537500000004, 0.09959315299999982, 0.09959204200000005, 0.09959509799999999, 0.09959519500000003, 0.09959893099999984, 0.09959348600000006, 0.099592028, 0.09959002800000016, 0.09959463899999976, 0.09959205500000001, 0.09959476399999989, 0.09959770800000012, 0.09959152799999993, 0.09958538900000002, 0.09958958299999976, 0.0995880699999998, 0.09958972199999971, 0.0995885559999996, 0.09958974999999981, 0.09959458399999965, 0.09958679199999976, 0.09959234699999975, 0.0995940270000002, 0.0995848330000002, 0.09958620799999984, 0.099581417, 0.099593708, 0.0996019859999997, 0.0996018620000001, 0.09960011099999999, 0.09959675000000079, 0.09959161100000014, 0.09959483300000027, 0.0995937360000001, 0.09959290300000045, 0.09959815200000044, 0.09960293000000053, 0.09960076399999984, 0.09959894399999936, 0.09959801400000057, 0.09959579199999968, 0.09959381999999994, 0.09959048599999942, 0.09959459700000028, 0.0996019299999995, 0.09960677700000087, 0.09959745799999986, 0.09959636099999969]</msg>
<status status="PASS" starttime="20201103 12:26:11.895" endtime="20201103 12:26:11.897"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.891" endtime="20201103 12:26:11.897"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:11.899" endtime="20201103 12:26:11.901"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:11.903" endtime="20201103 12:26:11.922"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.901" endtime="20201103 12:26:11.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:11.898" endtime="20201103 12:26:11.923"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:04.483" endtime="20201103 12:26:11.923"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:04.415" endtime="20201103 12:26:11.924" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:25.295" endtime="20201103 12:26:11.931"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">saml10-xpro</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:23.166" endtime="20201103 12:26:11.957"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_saml10-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
