<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:36:20.827" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:21.403" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:21.411" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:22.550" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:21.401" endtime="20201103 12:36:22.550"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.553" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:22.552" endtime="20201103 12:36:22.554"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.400" endtime="20201103 12:36:22.554"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:22.556" endtime="20201103 12:36:22.748"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.555" endtime="20201103 12:36:22.749"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.762" endtime="20201103 12:36:22.776"></status>
</kw>
<msg timestamp="20201103 12:36:22.776" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.761" endtime="20201103 12:36:22.776"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.779" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.777" endtime="20201103 12:36:22.779"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.782" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:22.780" endtime="20201103 12:36:22.782"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:22.758" endtime="20201103 12:36:22.783"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:22.756" endtime="20201103 12:36:22.784"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.754" endtime="20201103 12:36:22.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:22.788" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:22.787" endtime="20201103 12:36:22.788"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.785" endtime="20201103 12:36:22.788"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.753" endtime="20201103 12:36:22.788"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.753" endtime="20201103 12:36:22.789"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.789" endtime="20201103 12:36:22.791"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.751" endtime="20201103 12:36:22.791"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.792" endtime="20201103 12:36:22.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.750" endtime="20201103 12:36:22.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:21.398" endtime="20201103 12:36:22.794"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:22.800" endtime="20201103 12:36:22.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.799" endtime="20201103 12:36:22.821"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.835" endtime="20201103 12:36:22.847"></status>
</kw>
<msg timestamp="20201103 12:36:22.847" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.833" endtime="20201103 12:36:22.848"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.850" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.848" endtime="20201103 12:36:22.850"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.853" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:22.851" endtime="20201103 12:36:22.853"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:22.830" endtime="20201103 12:36:22.854"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:22.827" endtime="20201103 12:36:22.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.826" endtime="20201103 12:36:22.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:22.858" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:22.858" endtime="20201103 12:36:22.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.855" endtime="20201103 12:36:22.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.825" endtime="20201103 12:36:22.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.824" endtime="20201103 12:36:22.859"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.860" endtime="20201103 12:36:22.861"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.823" endtime="20201103 12:36:22.862"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.821" endtime="20201103 12:36:22.862"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.798" endtime="20201103 12:36:22.863"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.869" endtime="20201103 12:36:22.877"></status>
</kw>
<msg timestamp="20201103 12:36:22.878" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.867" endtime="20201103 12:36:22.878"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.880" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:22.879" endtime="20201103 12:36:22.880"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:22.881" endtime="20201103 12:36:22.883"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.865" endtime="20201103 12:36:22.883"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.863" endtime="20201103 12:36:22.884"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.888" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:36:22.887" endtime="20201103 12:36:22.888"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.890" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:36:22.889" endtime="20201103 12:36:22.890"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.884" endtime="20201103 12:36:22.890"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:22.795" endtime="20201103 12:36:22.891" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:20.952" endtime="20201103 12:36:22.893"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:22.943" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:22.951" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:24.125" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:22.942" endtime="20201103 12:36:24.126"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.128" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:24.127" endtime="20201103 12:36:24.128"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.941" endtime="20201103 12:36:24.129"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:24.131" endtime="20201103 12:36:24.356"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.130" endtime="20201103 12:36:24.356"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.369" endtime="20201103 12:36:24.381"></status>
</kw>
<msg timestamp="20201103 12:36:24.381" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:24.367" endtime="20201103 12:36:24.381"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.384" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:24.382" endtime="20201103 12:36:24.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.387" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:24.385" endtime="20201103 12:36:24.387"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:24.365" endtime="20201103 12:36:24.388"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:24.362" endtime="20201103 12:36:24.388"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.361" endtime="20201103 12:36:24.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:24.392" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:24.392" endtime="20201103 12:36:24.393"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.389" endtime="20201103 12:36:24.393"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.360" endtime="20201103 12:36:24.393"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.360" endtime="20201103 12:36:24.393"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.394" endtime="20201103 12:36:24.395"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.359" endtime="20201103 12:36:24.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.397" endtime="20201103 12:36:24.398"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.357" endtime="20201103 12:36:24.399"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:22.939" endtime="20201103 12:36:24.399"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:24.405" endtime="20201103 12:36:24.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.404" endtime="20201103 12:36:24.425"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.438" endtime="20201103 12:36:24.450"></status>
</kw>
<msg timestamp="20201103 12:36:24.451" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:24.436" endtime="20201103 12:36:24.451"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.454" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:24.452" endtime="20201103 12:36:24.454"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.457" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:24.455" endtime="20201103 12:36:24.457"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:24.434" endtime="20201103 12:36:24.457"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:24.432" endtime="20201103 12:36:24.458"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.430" endtime="20201103 12:36:24.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:24.462" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:24.461" endtime="20201103 12:36:24.462"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.459" endtime="20201103 12:36:24.462"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.430" endtime="20201103 12:36:24.463"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.429" endtime="20201103 12:36:24.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.464" endtime="20201103 12:36:24.465"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.428" endtime="20201103 12:36:24.466"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.426" endtime="20201103 12:36:24.466"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.402" endtime="20201103 12:36:24.466"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:24.474" endtime="20201103 12:36:31.471"></status>
</kw>
<msg timestamp="20201103 12:36:31.472" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:24.473" endtime="20201103 12:36:31.472"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.477" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.474" endtime="20201103 12:36:31.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.479" endtime="20201103 12:36:31.482"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.470" endtime="20201103 12:36:31.483"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.468" endtime="20201103 12:36:31.484"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:31.489" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 0, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:31.486" endtime="20201103 12:36:31.490"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.498" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:31.496" endtime="20201103 12:36:31.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.502" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:31.500" endtime="20201103 12:36:31.503"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.491" endtime="20201103 12:36:31.504"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.511" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:31.509" endtime="20201103 12:36:31.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.516" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:31.514" endtime="20201103 12:36:31.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.505" endtime="20201103 12:36:31.517"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.521" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:31.520" endtime="20201103 12:36:31.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.523" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:36:31.522" endtime="20201103 12:36:31.523"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.517" endtime="20201103 12:36:31.524"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.530" endtime="20201103 12:36:31.833"></status>
</kw>
<msg timestamp="20201103 12:36:31.836" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.056746819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156324736, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:31.529" endtime="20201103 12:36:31.836"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.844" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.056746819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156324736, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:31.837" endtime="20201103 12:36:31.844"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.845" endtime="20201103 12:36:31.847"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.526" endtime="20201103 12:36:31.847"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.525" endtime="20201103 12:36:31.848"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:31.852" level="INFO">${FILTERED} = [{'time': 1.156324736, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09957791699999996, 'source_diff': 0.09957791699999996}, {'time': 1.255905514, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:31.849" endtime="20201103 12:36:31.852"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:31.865" level="INFO">${RESULT} = {'source_diff': [0.09957791699999996, 0.09957818100000004, 0.0995752780000001, 0.09957711099999988, 0.09957197200000012, 0.09957774999999991, 0.09958055599999982, 0.09957837499999989, 0.09957716700000...</msg>
<status status="PASS" starttime="20201103 12:36:31.853" endtime="20201103 12:36:31.865"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.869" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:31.868" endtime="20201103 12:36:31.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.872" level="INFO">VALUE: [0.09957791699999996, 0.09957818100000004, 0.0995752780000001, 0.09957711099999988, 0.09957197200000012, 0.09957774999999991, 0.09958055599999982, 0.09957837499999989, 0.09957716700000008, 0.09958140199999987, 0.09958038900000021, 0.0995745699999997, 0.0995764170000002, 0.09958129199999988, 0.09957127700000035, 0.09957222300000002, 0.09957333400000001, 0.09957340299999995, 0.09956507000000014, 0.0995602360000003, 0.09957195799999985, 0.09957613900000029, 0.09957015299999972, 0.09956872199999989, 0.09957384700000027, 0.09957604200000025, 0.09957811100000002, 0.09958166700000026, 0.09958191700000008, 0.09958247200000026, 0.0995877639999998, 0.09957847200000014, 0.09958174999999958, 0.09957674999999977, 0.0995766800000002, 0.09958558299999964, 0.09959122199999992, 0.09959315199999974, 0.09959175000000009, 0.09958541600000004, 0.09959029200000025, 0.09958945799999963, 0.09958509800000037, 0.09958391600000027, 0.09958513900000021, 0.09958561100000018, 0.09959188900000004, 0.09959918100000031, 0.09959643100000015, 0.09959600000000002]</msg>
<status status="PASS" starttime="20201103 12:36:31.871" endtime="20201103 12:36:31.873"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.866" endtime="20201103 12:36:31.873"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.875" endtime="20201103 12:36:31.877"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:31.879" endtime="20201103 12:36:31.898"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.877" endtime="20201103 12:36:31.899"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.874" endtime="20201103 12:36:31.899"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.467" endtime="20201103 12:36:31.899"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:24.399" endtime="20201103 12:36:31.900" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:31.906" endtime="20201103 12:36:31.926"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.905" endtime="20201103 12:36:31.926"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.940" endtime="20201103 12:36:31.952"></status>
</kw>
<msg timestamp="20201103 12:36:31.952" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.938" endtime="20201103 12:36:31.952"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.955" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.953" endtime="20201103 12:36:31.955"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.958" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:31.956" endtime="20201103 12:36:31.958"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:31.936" endtime="20201103 12:36:31.959"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:31.933" endtime="20201103 12:36:31.959"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.931" endtime="20201103 12:36:31.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:31.963" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:31.962" endtime="20201103 12:36:31.964"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.960" endtime="20201103 12:36:31.964"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.931" endtime="20201103 12:36:31.964"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.930" endtime="20201103 12:36:31.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.965" endtime="20201103 12:36:31.967"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.929" endtime="20201103 12:36:31.967"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.927" endtime="20201103 12:36:31.967"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.904" endtime="20201103 12:36:31.968"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.977" endtime="20201103 12:36:38.970"></status>
</kw>
<msg timestamp="20201103 12:36:38.971" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.975" endtime="20201103 12:36:38.971"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.976" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:38.973" endtime="20201103 12:36:38.977"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.978" endtime="20201103 12:36:38.982"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.973" endtime="20201103 12:36:38.983"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.970" endtime="20201103 12:36:38.984"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:38.989" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 5, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:38.986" endtime="20201103 12:36:38.989"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.997" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:38.995" endtime="20201103 12:36:38.998"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.002" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:39.000" endtime="20201103 12:36:39.003"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.991" endtime="20201103 12:36:39.004"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.011" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:39.009" endtime="20201103 12:36:39.012"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.017" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:39.015" endtime="20201103 12:36:39.017"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.005" endtime="20201103 12:36:39.018"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.026" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:39.024" endtime="20201103 12:36:39.027"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.031" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:36:39.029" endtime="20201103 12:36:39.032"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.020" endtime="20201103 12:36:39.033"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:39.039" endtime="20201103 12:36:39.336"></status>
</kw>
<msg timestamp="20201103 12:36:39.339" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057966028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157552181, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:39.038" endtime="20201103 12:36:39.340"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.347" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057966028, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157552181, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:39.340" endtime="20201103 12:36:39.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:39.348" endtime="20201103 12:36:39.350"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.035" endtime="20201103 12:36:39.351"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.034" endtime="20201103 12:36:39.351"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:39.355" level="INFO">${FILTERED} = [{'time': 1.157552181, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09958615299999996, 'source_diff': 0.09958615299999996}, {'time': 1.257140958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:39.352" endtime="20201103 12:36:39.355"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:39.369" level="INFO">${RESULT} = {'source_diff': [0.09958615299999996, 0.09958615199999987, 0.09958641599999996, 0.09958516699999986, 0.0995871530000001, 0.09958558400000017, 0.09958994499999996, 0.09959018000000008, 0.09959108299999...</msg>
<status status="PASS" starttime="20201103 12:36:39.356" endtime="20201103 12:36:39.370"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.374" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:39.373" endtime="20201103 12:36:39.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.376" level="INFO">VALUE: [0.09958615299999996, 0.09958615199999987, 0.09958641599999996, 0.09958516699999986, 0.0995871530000001, 0.09958558400000017, 0.09958994499999996, 0.09959018000000008, 0.09959108299999997, 0.09959416700000001, 0.09959448600000043, 0.09960047300000019, 0.09959729099999981, 0.09959758299999999, 0.09959395800000026, 0.09959300000000004, 0.09958975000000025, 0.09959815300000008, 0.09960143099999996, 0.09959930500000036, 0.09960044499999965, 0.09959922300000024, 0.0996001940000002, 0.09959856999999994, 0.09959284699999982, 0.09959429199999992, 0.09959127800000012, 0.09959780599999979, 0.09959183299999985, 0.09958913899999944, 0.09959350000000011, 0.09959490200000065, 0.09959776399999942, 0.0995977219999995, 0.09960113899999978, 0.09960213899999992, 0.09960518000000018, 0.09960601399999991, 0.09960373599999972, 0.09960436099999992, 0.0996021530000002, 0.09960034699999998, 0.09959792999999983, 0.0995960139999994, 0.099596236, 0.09960177800000025, 0.09960099999999983, 0.09960140300000031, 0.09960529200000057, 0.09960580600000046]</msg>
<status status="PASS" starttime="20201103 12:36:39.375" endtime="20201103 12:36:39.377"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.370" endtime="20201103 12:36:39.377"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:39.379" endtime="20201103 12:36:39.381"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:39.383" endtime="20201103 12:36:39.402"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.381" endtime="20201103 12:36:39.403"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.378" endtime="20201103 12:36:39.403"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.968" endtime="20201103 12:36:39.404"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:31.901" endtime="20201103 12:36:39.404" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:39.411" endtime="20201103 12:36:39.430"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.409" endtime="20201103 12:36:39.431"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:39.444" endtime="20201103 12:36:39.456"></status>
</kw>
<msg timestamp="20201103 12:36:39.457" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:39.442" endtime="20201103 12:36:39.457"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.459" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:39.458" endtime="20201103 12:36:39.460"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:39.462" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:39.460" endtime="20201103 12:36:39.463"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:39.440" endtime="20201103 12:36:39.463"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:39.437" endtime="20201103 12:36:39.464"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.436" endtime="20201103 12:36:39.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:39.469" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:39.467" endtime="20201103 12:36:39.469"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.465" endtime="20201103 12:36:39.469"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.435" endtime="20201103 12:36:39.470"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.435" endtime="20201103 12:36:39.470"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:39.471" endtime="20201103 12:36:39.472"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.433" endtime="20201103 12:36:39.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.432" endtime="20201103 12:36:39.473"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.408" endtime="20201103 12:36:39.473"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:39.481" endtime="20201103 12:36:46.480"></status>
</kw>
<msg timestamp="20201103 12:36:46.481" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:39.480" endtime="20201103 12:36:46.481"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.486" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:46.483" endtime="20201103 12:36:46.487"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.488" endtime="20201103 12:36:46.492"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.477" endtime="20201103 12:36:46.493"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.475" endtime="20201103 12:36:46.494"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:46.500" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 10, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:46.497" endtime="20201103 12:36:46.501"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.509" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:46.507" endtime="20201103 12:36:46.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.514" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:46.512" endtime="20201103 12:36:46.515"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.502" endtime="20201103 12:36:46.516"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.523" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:46.521" endtime="20201103 12:36:46.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.528" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:46.526" endtime="20201103 12:36:46.528"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.517" endtime="20201103 12:36:46.529"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.537" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:46.535" endtime="20201103 12:36:46.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.541" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:36:46.539" endtime="20201103 12:36:46.542"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.530" endtime="20201103 12:36:46.543"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.557" endtime="20201103 12:36:46.864"></status>
</kw>
<msg timestamp="20201103 12:36:46.867" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058011639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157598833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:46.553" endtime="20201103 12:36:46.868"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.875" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058011639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157598833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:46.868" endtime="20201103 12:36:46.876"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.876" endtime="20201103 12:36:46.878"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.548" endtime="20201103 12:36:46.878"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.544" endtime="20201103 12:36:46.879"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:46.883" level="INFO">${FILTERED} = [{'time': 1.157598833, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09958719399999993, 'source_diff': 0.09958719399999993}, {'time': 1.257192403, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:46.880" endtime="20201103 12:36:46.883"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:46.895" level="INFO">${RESULT} = {'source_diff': [0.09958719399999993, 0.09959095899999992, 0.09958470799999986, 0.09958751399999999, 0.09958266699999996, 0.09958831899999998, 0.09958231999999989, 0.09958742999999992, 0.0995861379999...</msg>
<status status="PASS" starttime="20201103 12:36:46.884" endtime="20201103 12:36:46.896"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.900" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:46.899" endtime="20201103 12:36:46.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.902" level="INFO">VALUE: [0.09958719399999993, 0.09959095899999992, 0.09958470799999986, 0.09958751399999999, 0.09958266699999996, 0.09958831899999998, 0.09958231999999989, 0.09958742999999992, 0.09958613799999982, 0.09958751400000021, 0.09958549999999988, 0.09958363799999992, 0.09958659700000005, 0.09958654099999986, 0.09958711200000003, 0.09959043000000012, 0.09958681999999985, 0.09958488899999995, 0.09958690300000006, 0.09959300000000004, 0.09958951399999982, 0.09959026400000015, 0.09959084699999998, 0.09958809699999982, 0.09958386100000016, 0.09958675000000028, 0.09958288899999967, 0.09958180599999977, 0.0995807769999999, 0.09958473600000017, 0.09958197200000019, 0.09958033300000046, 0.09957705600000022, 0.09958547199999934, 0.099586167, 0.099579694, 0.09958449999999974, 0.09958120800000003, 0.0995836670000001, 0.09957856899999928, 0.09957534800000012, 0.09957968099999981, 0.09958726400000018, 0.09958823600000066, 0.09958922200000053, 0.0995892360000008, 0.09958897300000036, 0.09958119499999984, 0.09958044399999988, 0.09958122300000039]</msg>
<status status="PASS" starttime="20201103 12:36:46.901" endtime="20201103 12:36:46.902"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.896" endtime="20201103 12:36:46.903"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.905" endtime="20201103 12:36:46.907"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:46.909" endtime="20201103 12:36:46.928"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.907" endtime="20201103 12:36:46.929"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.903" endtime="20201103 12:36:46.929"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:39.474" endtime="20201103 12:36:46.929"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:39.406" endtime="20201103 12:36:46.930" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:46.937" endtime="20201103 12:36:46.956"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.935" endtime="20201103 12:36:46.957"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.969" endtime="20201103 12:36:46.982"></status>
</kw>
<msg timestamp="20201103 12:36:46.983" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:46.968" endtime="20201103 12:36:46.983"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.985" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:46.984" endtime="20201103 12:36:46.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.988" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:46.986" endtime="20201103 12:36:46.988"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:46.965" endtime="20201103 12:36:46.989"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:46.963" endtime="20201103 12:36:46.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.961" endtime="20201103 12:36:46.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:46.993" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:46.993" endtime="20201103 12:36:46.994"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.990" endtime="20201103 12:36:46.994"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.961" endtime="20201103 12:36:46.994"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.960" endtime="20201103 12:36:46.994"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.995" endtime="20201103 12:36:46.996"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.959" endtime="20201103 12:36:46.997"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.957" endtime="20201103 12:36:46.997"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.934" endtime="20201103 12:36:46.998"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:47.006" endtime="20201103 12:36:54.002"></status>
</kw>
<msg timestamp="20201103 12:36:54.003" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:47.004" endtime="20201103 12:36:54.004"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.008" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:54.005" endtime="20201103 12:36:54.009"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.010" endtime="20201103 12:36:54.014"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.002" endtime="20201103 12:36:54.016"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:47.000" endtime="20201103 12:36:54.017"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:54.021" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 15, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:36:54.018" endtime="20201103 12:36:54.022"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.030" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:54.028" endtime="20201103 12:36:54.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.034" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:54.032" endtime="20201103 12:36:54.035"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.023" endtime="20201103 12:36:54.036"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.044" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:54.042" endtime="20201103 12:36:54.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.048" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:54.046" endtime="20201103 12:36:54.049"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.037" endtime="20201103 12:36:54.050"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.057" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:54.055" endtime="20201103 12:36:54.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.062" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:54.060" endtime="20201103 12:36:54.062"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.051" endtime="20201103 12:36:54.063"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.078" endtime="20201103 12:36:54.382"></status>
</kw>
<msg timestamp="20201103 12:36:54.385" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.056833819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156428042, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:54.073" endtime="20201103 12:36:54.386"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.393" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.056833819, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156428042, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:54.386" endtime="20201103 12:36:54.394"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.394" endtime="20201103 12:36:54.396"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.068" endtime="20201103 12:36:54.396"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.065" endtime="20201103 12:36:54.397"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:54.401" level="INFO">${FILTERED} = [{'time': 1.156428042, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09959422299999998, 'source_diff': 0.09959422299999998}, {'time': 1.256021264, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:54.398" endtime="20201103 12:36:54.401"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:54.413" level="INFO">${RESULT} = {'source_diff': [0.09959422299999998, 0.099590611, 0.09958622199999989, 0.09958463800000006, 0.09958836100000013, 0.09958527699999986, 0.09959088800000004, 0.09958862499999999, 0.09958937499999987, 0....</msg>
<status status="PASS" starttime="20201103 12:36:54.402" endtime="20201103 12:36:54.414"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.417" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:54.416" endtime="20201103 12:36:54.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.420" level="INFO">VALUE: [0.09959422299999998, 0.099590611, 0.09958622199999989, 0.09958463800000006, 0.09958836100000013, 0.09958527699999986, 0.09959088800000004, 0.09958862499999999, 0.09958937499999987, 0.09959333300000006, 0.09958354199999997, 0.09958168100000009, 0.09958498599999999, 0.09958431999999995, 0.09958604100000024, 0.09958966700000005, 0.099581417, 0.09957811100000002, 0.0995778060000001, 0.09957741700000033, 0.09957672199999967, 0.09958155599999996, 0.09957856899999973, 0.09957586099999993, 0.09958268000000015, 0.09958180600000022, 0.09958861200000024, 0.09959027700000034, 0.09958629200000013, 0.0995854860000005, 0.09958120900000011, 0.0995814020000001, 0.09958027700000027, 0.09957829100000026, 0.09958022299999936, 0.09957858300000044, 0.0995803190000002, 0.09958661200000041, 0.09958726400000018, 0.09958195799999991, 0.09958487500000057, 0.09958566700000038, 0.09958286100000002, 0.09958620899999993, 0.09958501400000053, 0.09958123599999968, 0.09958013899999951, 0.09958641700000026, 0.09958644399999983, 0.09958911100000023]</msg>
<status status="PASS" starttime="20201103 12:36:54.418" endtime="20201103 12:36:54.421"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.414" endtime="20201103 12:36:54.421"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.423" endtime="20201103 12:36:54.425"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:54.427" endtime="20201103 12:36:54.446"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.425" endtime="20201103 12:36:54.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.422" endtime="20201103 12:36:54.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.998" endtime="20201103 12:36:54.447"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:46.931" endtime="20201103 12:36:54.448" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:54.455" endtime="20201103 12:36:54.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.453" endtime="20201103 12:36:54.475"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.488" endtime="20201103 12:36:54.500"></status>
</kw>
<msg timestamp="20201103 12:36:54.501" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:54.486" endtime="20201103 12:36:54.501"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.503" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:54.502" endtime="20201103 12:36:54.504"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:54.506" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:54.504" endtime="20201103 12:36:54.507"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:54.483" endtime="20201103 12:36:54.507"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:54.481" endtime="20201103 12:36:54.508"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.480" endtime="20201103 12:36:54.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:54.512" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:54.511" endtime="20201103 12:36:54.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.509" endtime="20201103 12:36:54.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.479" endtime="20201103 12:36:54.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.478" endtime="20201103 12:36:54.512"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.513" endtime="20201103 12:36:54.515"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.477" endtime="20201103 12:36:54.515"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.475" endtime="20201103 12:36:54.516"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.452" endtime="20201103 12:36:54.516"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:54.524" endtime="20201103 12:37:01.517"></status>
</kw>
<msg timestamp="20201103 12:37:01.519" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:54.522" endtime="20201103 12:37:01.519"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.526" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:01.521" endtime="20201103 12:37:01.528"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:01.530" endtime="20201103 12:37:01.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.520" endtime="20201103 12:37:01.537"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.518" endtime="20201103 12:37:01.538"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:01.544" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 20, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:01.540" endtime="20201103 12:37:01.545"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.554" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:01.552" endtime="20201103 12:37:01.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.559" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:01.557" endtime="20201103 12:37:01.560"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.546" endtime="20201103 12:37:01.562"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.571" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:01.569" endtime="20201103 12:37:01.572"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.576" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:01.574" endtime="20201103 12:37:01.577"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.563" endtime="20201103 12:37:01.579"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.585" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:01.583" endtime="20201103 12:37:01.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.589" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:37:01.586" endtime="20201103 12:37:01.589"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.580" endtime="20201103 12:37:01.590"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:01.596" endtime="20201103 12:37:01.894"></status>
</kw>
<msg timestamp="20201103 12:37:01.897" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057077875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156657708, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:01.595" endtime="20201103 12:37:01.897"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.905" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.057077875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.156657708, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:01.898" endtime="20201103 12:37:01.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:01.906" endtime="20201103 12:37:01.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.592" endtime="20201103 12:37:01.908"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.590" endtime="20201103 12:37:01.908"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:01.912" level="INFO">${FILTERED} = [{'time': 1.156657708, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.09957983299999995, 'source_diff': 0.09957983299999995}, {'time': 1.256242569, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:01.909" endtime="20201103 12:37:01.912"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:01.927" level="INFO">${RESULT} = {'source_diff': [0.09957983299999995, 0.09958223600000005, 0.0995792499999999, 0.09957700000000003, 0.09958061100000015, 0.099585056, 0.09958872200000002, 0.099586167, 0.09957874999999983, 0.099572096...</msg>
<status status="PASS" starttime="20201103 12:37:01.913" endtime="20201103 12:37:01.928"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.932" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:01.931" endtime="20201103 12:37:01.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:01.935" level="INFO">VALUE: [0.09957983299999995, 0.09958223600000005, 0.0995792499999999, 0.09957700000000003, 0.09958061100000015, 0.099585056, 0.09958872200000002, 0.099586167, 0.09957874999999983, 0.0995720969999998, 0.09958088900000028, 0.09958740200000005, 0.09958693100000016, 0.09958383300000007, 0.09958693000000007, 0.09958299999999998, 0.09958390300000008, 0.09958398600000029, 0.09958313899999993, 0.09958197299999982, 0.0995827359999999, 0.0995844309999998, 0.09958555499999999, 0.09958297199999988, 0.09958437500000006, 0.09958487500000013, 0.09958526299999981, 0.09958675000000028, 0.09958931900000012, 0.09959022299999987, 0.09958601399999978, 0.09958572200000049, 0.09959263899999993, 0.09958522199999997, 0.09958595900000056, 0.09958211100000014, 0.09958191700000008, 0.09958318100000074, 0.09958563899999984, 0.09958698600000027, 0.09958925000000018, 0.09958917999999972, 0.09958987500000038, 0.09959070800000003, 0.09958306900000036, 0.09957790299999925, 0.09957933300000033, 0.09958072299999987, 0.09958134699999999, 0.09958756900000054]</msg>
<status status="PASS" starttime="20201103 12:37:01.933" endtime="20201103 12:37:01.935"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.928" endtime="20201103 12:37:01.935"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:01.938" endtime="20201103 12:37:01.939"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:01.941" endtime="20201103 12:37:01.960"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.940" endtime="20201103 12:37:01.961"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.936" endtime="20201103 12:37:01.962"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:54.517" endtime="20201103 12:37:01.962"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:54.449" endtime="20201103 12:37:01.962" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:01.969" endtime="20201103 12:37:01.988"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.967" endtime="20201103 12:37:01.989"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:02.003" endtime="20201103 12:37:02.015"></status>
</kw>
<msg timestamp="20201103 12:37:02.015" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:02.001" endtime="20201103 12:37:02.016"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:02.018" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:02.016" endtime="20201103 12:37:02.018"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:02.021" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:02.019" endtime="20201103 12:37:02.021"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:01.998" endtime="20201103 12:37:02.022"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:01.995" endtime="20201103 12:37:02.022"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.994" endtime="20201103 12:37:02.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:02.026" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:02.026" endtime="20201103 12:37:02.027"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:02.023" endtime="20201103 12:37:02.027"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.993" endtime="20201103 12:37:02.027"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.993" endtime="20201103 12:37:02.027"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:02.028" endtime="20201103 12:37:02.029"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.991" endtime="20201103 12:37:02.030"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.990" endtime="20201103 12:37:02.030"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:01.966" endtime="20201103 12:37:02.031"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:02.039" endtime="20201103 12:37:09.033"></status>
</kw>
<msg timestamp="20201103 12:37:09.034" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:02.038" endtime="20201103 12:37:09.034"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.039" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:09.036" endtime="20201103 12:37:09.040"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:09.041" endtime="20201103 12:37:09.044"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:02.035" endtime="20201103 12:37:09.046"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:02.033" endtime="20201103 12:37:09.047"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:09.052" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 25, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:09.048" endtime="20201103 12:37:09.052"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.061" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:09.059" endtime="20201103 12:37:09.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.065" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:09.063" endtime="20201103 12:37:09.066"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.054" endtime="20201103 12:37:09.067"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.076" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:09.074" endtime="20201103 12:37:09.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.080" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:09.078" endtime="20201103 12:37:09.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.069" endtime="20201103 12:37:09.082"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.091" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:09.088" endtime="20201103 12:37:09.094"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.097" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:37:09.095" endtime="20201103 12:37:09.098"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.084" endtime="20201103 12:37:09.099"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:09.113" endtime="20201103 12:37:09.416"></status>
</kw>
<msg timestamp="20201103 12:37:09.419" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058392528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157980097, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:09.109" endtime="20201103 12:37:09.419"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.427" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.058392528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.157980097, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:09.420" endtime="20201103 12:37:09.427"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:09.428" endtime="20201103 12:37:09.430"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.104" endtime="20201103 12:37:09.430"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.100" endtime="20201103 12:37:09.430"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:09.434" level="INFO">${FILTERED} = [{'time': 1.157980097, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.0995875690000001, 'source_diff': 0.0995875690000001}, {'time': 1.257570931, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.0...</msg>
<status status="PASS" starttime="20201103 12:37:09.431" endtime="20201103 12:37:09.435"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:09.448" level="INFO">${RESULT} = {'source_diff': [0.0995875690000001, 0.09958823700000008, 0.09959072200000008, 0.09958634700000002, 0.099583333, 0.09957562499999995, 0.09957876300000001, 0.099578889, 0.09957619399999995, 0.099575554...</msg>
<status status="PASS" starttime="20201103 12:37:09.436" endtime="20201103 12:37:09.448"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.452" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:09.451" endtime="20201103 12:37:09.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:09.454" level="INFO">VALUE: [0.0995875690000001, 0.09958823700000008, 0.09959072200000008, 0.09958634700000002, 0.099583333, 0.09957562499999995, 0.09957876300000001, 0.099578889, 0.09957619399999995, 0.09957555499999993, 0.09957544400000007, 0.09957680499999988, 0.09957725000000028, 0.09958138899999991, 0.09958144400000002, 0.09959301399999987, 0.09960052799999985, 0.09959312500000017, 0.09958723600000008, 0.0995894719999999, 0.09959013900000002, 0.09959279100000007, 0.0995899170000003, 0.09958679099999967, 0.09959042999999967, 0.0995937360000001, 0.09959741599999994, 0.09959716700000021, 0.09959895900000015, 0.09960547199999992, 0.09960906900000044, 0.09960708300000043, 0.09960423600000023, 0.09960229199999926, 0.09960159700000037, 0.09960390300000022, 0.09959819500000044, 0.09959697199999962, 0.09959365300000034, 0.09959770800000012, 0.09959551399999977, 0.09959611100000032, 0.09959965300000029, 0.0996019730000004, 0.0996055689999995, 0.09960648599999988, 0.09960318099999999, 0.09960077699999914, 0.09959950000000006, 0.09959623700000009]</msg>
<status status="PASS" starttime="20201103 12:37:09.453" endtime="20201103 12:37:09.455"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.449" endtime="20201103 12:37:09.455"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:09.457" endtime="20201103 12:37:09.459"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:09.461" endtime="20201103 12:37:09.480"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.459" endtime="20201103 12:37:09.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:09.456" endtime="20201103 12:37:09.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:02.031" endtime="20201103 12:37:09.481"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:01.964" endtime="20201103 12:37:09.482" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:22.899" endtime="20201103 12:37:09.489"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">saml10-xpro</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:36:20.830" endtime="20201103 12:37:09.514"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_saml10-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
