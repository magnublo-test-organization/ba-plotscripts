<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201103 12:36:14.925" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.235" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:16.252" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:17.126" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:16.232" endtime="20201103 12:36:17.128"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.134" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:36:17.130" endtime="20201103 12:36:20.135"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.229" endtime="20201103 12:36:20.137"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:20.142" endtime="20201103 12:36:20.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.139" endtime="20201103 12:36:20.481"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.513" endtime="20201103 12:36:20.536"></status>
</kw>
<msg timestamp="20201103 12:36:20.538" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Succe...</msg>
<status status="PASS" starttime="20201103 12:36:20.509" endtime="20201103 12:36:20.538"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.544" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Succe...</msg>
<status status="PASS" starttime="20201103 12:36:20.540" endtime="20201103 12:36:20.545"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.552" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:20.547" endtime="20201103 12:36:20.553"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:20.503" endtime="20201103 12:36:20.555"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:20.497" endtime="20201103 12:36:20.557"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.494" endtime="20201103 12:36:20.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:20.566" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:20.564" endtime="20201103 12:36:20.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.559" endtime="20201103 12:36:20.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.492" endtime="20201103 12:36:20.568"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.490" endtime="20201103 12:36:20.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.570" endtime="20201103 12:36:20.574"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.486" endtime="20201103 12:36:20.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.577" endtime="20201103 12:36:20.581"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.482" endtime="20201103 12:36:20.583"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.225" endtime="20201103 12:36:20.583"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:20.600" endtime="20201103 12:36:20.622"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.596" endtime="20201103 12:36:20.624"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.661" endtime="20201103 12:36:20.681"></status>
</kw>
<msg timestamp="20201103 12:36:20.683" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:20.657" endtime="20201103 12:36:20.683"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.689" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:20.685" endtime="20201103 12:36:20.690"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.696" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:20.692" endtime="20201103 12:36:20.697"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:20.650" endtime="20201103 12:36:20.699"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:20.643" endtime="20201103 12:36:20.701"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.639" endtime="20201103 12:36:20.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:20.710" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:20.708" endtime="20201103 12:36:20.711"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.703" endtime="20201103 12:36:20.711"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.637" endtime="20201103 12:36:20.712"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.635" endtime="20201103 12:36:20.712"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.714" endtime="20201103 12:36:20.718"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.631" endtime="20201103 12:36:20.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.626" endtime="20201103 12:36:20.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.593" endtime="20201103 12:36:20.721"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.740" endtime="20201103 12:36:20.754"></status>
</kw>
<msg timestamp="20201103 12:36:20.755" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:20.736" endtime="20201103 12:36:20.755"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.761" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:20.757" endtime="20201103 12:36:20.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:20.764" endtime="20201103 12:36:20.770"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.728" endtime="20201103 12:36:20.771"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.723" endtime="20201103 12:36:20.773"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.783" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:36:20.781" endtime="20201103 12:36:20.784"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.788" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:36:20.786" endtime="20201103 12:36:20.789"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.774" endtime="20201103 12:36:20.790"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:20.584" endtime="20201103 12:36:20.792" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:15.215" endtime="20201103 12:36:20.799"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:20.929" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:20.945" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:21.781" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:20.925" endtime="20201103 12:36:21.783"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:24.790" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:36:21.785" endtime="20201103 12:36:24.791"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.922" endtime="20201103 12:36:24.793"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:24.798" endtime="20201103 12:36:25.131"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:24.794" endtime="20201103 12:36:25.133"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.163" endtime="20201103 12:36:25.186"></status>
</kw>
<msg timestamp="20201103 12:36:25.187" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.160" endtime="20201103 12:36:25.188"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.194" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.190" endtime="20201103 12:36:25.195"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.201" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:25.197" endtime="20201103 12:36:25.202"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:25.153" endtime="20201103 12:36:25.204"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:25.148" endtime="20201103 12:36:25.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.145" endtime="20201103 12:36:25.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:25.215" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:25.213" endtime="20201103 12:36:25.216"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.209" endtime="20201103 12:36:25.218"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.143" endtime="20201103 12:36:25.219"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.141" endtime="20201103 12:36:25.219"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.221" endtime="20201103 12:36:25.225"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.138" endtime="20201103 12:36:25.226"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.228" endtime="20201103 12:36:25.232"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.135" endtime="20201103 12:36:25.234"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:20.919" endtime="20201103 12:36:25.234"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:25.249" endtime="20201103 12:36:25.271"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.245" endtime="20201103 12:36:25.273"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.308" endtime="20201103 12:36:25.328"></status>
</kw>
<msg timestamp="20201103 12:36:25.329" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.304" endtime="20201103 12:36:25.330"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.336" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.332" endtime="20201103 12:36:25.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:25.343" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:25.339" endtime="20201103 12:36:25.344"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:25.297" endtime="20201103 12:36:25.346"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:25.290" endtime="20201103 12:36:25.348"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.287" endtime="20201103 12:36:25.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:25.357" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:25.355" endtime="20201103 12:36:25.358"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.350" endtime="20201103 12:36:25.358"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.285" endtime="20201103 12:36:25.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.283" endtime="20201103 12:36:25.359"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.361" endtime="20201103 12:36:25.364"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.279" endtime="20201103 12:36:25.366"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.274" endtime="20201103 12:36:25.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.242" endtime="20201103 12:36:25.368"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:25.455" endtime="20201103 12:36:32.481"></status>
</kw>
<msg timestamp="20201103 12:36:32.482" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:25.388" endtime="20201103 12:36:32.483"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.489" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:32.485" endtime="20201103 12:36:32.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.491" endtime="20201103 12:36:32.495"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.380" endtime="20201103 12:36:32.497"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.374" endtime="20201103 12:36:32.499"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:32.505" level="INFO">${RESULT} = {'bg-timer-count': 0, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:32.500" endtime="20201103 12:36:32.505"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.516" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:32.513" endtime="20201103 12:36:32.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.520" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:32.518" endtime="20201103 12:36:32.521"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.507" endtime="20201103 12:36:32.523"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.533" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:32.531" endtime="20201103 12:36:32.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.538" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:32.536" endtime="20201103 12:36:32.539"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.524" endtime="20201103 12:36:32.541"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.558" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:32.548" endtime="20201103 12:36:32.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.563" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:36:32.560" endtime="20201103 12:36:32.564"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.542" endtime="20201103 12:36:32.565"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.583" endtime="20201103 12:36:32.958"></status>
</kw>
<msg timestamp="20201103 12:36:32.965" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.198393278, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.298403764, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:32.579" endtime="20201103 12:36:32.966"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:32.983" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.198393278, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.298403764, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:32.967" endtime="20201103 12:36:32.984"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:32.985" endtime="20201103 12:36:32.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.572" endtime="20201103 12:36:32.991"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:32.567" endtime="20201103 12:36:32.992"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:33.003" level="INFO">${FILTERED} = [{'time': 1.298403764, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001048599999995, 'source_diff': 0.10001048599999995}, {'time': 1.398414583, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:32.994" endtime="20201103 12:36:33.003"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:33.033" level="INFO">${RESULT} = {'source_diff': [0.10001048599999995, 0.100010194, 0.10001023599999992, 0.100010194, 0.10001020800000004, 0.10001026299999993, 0.100010194, 0.10001024999999997, 0.100010194, 0.10001020800000004, 0.100...</msg>
<status status="PASS" starttime="20201103 12:36:33.005" endtime="20201103 12:36:33.034"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.043" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:33.041" endtime="20201103 12:36:33.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.049" level="INFO">VALUE: [0.10001048599999995, 0.100010194, 0.10001023599999992, 0.100010194, 0.10001020800000004, 0.10001026299999993, 0.100010194, 0.10001024999999997, 0.100010194, 0.10001020800000004, 0.10001020900000013, 0.10001022199999987, 0.10001030600000016, 0.1000102639999998, 0.10001024999999997, 0.10001034800000008, 0.1000102359999997, 0.1000102639999998, 0.1000102639999998, 0.1000102639999998, 0.10001027699999998, 0.1000102909999998, 0.10001026400000024, 0.10001026400000024, 0.10001026400000024, 0.10001033299999973, 0.1000102639999998, 0.1000102639999998, 0.10001030500000008, 0.1000102639999998, 0.10001026299999971, 0.10001033399999937, 0.1000102639999998, 0.10001025000000041, 0.10001026400000068, 0.10001020899999968, 0.10001026400000068, 0.10001027699999998, 0.10001027699999998, 0.1000102639999998, 0.1000102639999998, 0.1000102639999998, 0.10001026400000068, 0.10001027800000006, 0.10001027800000006, 0.1000102639999998, 0.10001019499999941, 0.1000102639999998, 0.1000102639999998, 0.1000102639999998]</msg>
<status status="PASS" starttime="20201103 12:36:33.046" endtime="20201103 12:36:33.050"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.035" endtime="20201103 12:36:33.051"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.058" endtime="20201103 12:36:33.060"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:33.066" endtime="20201103 12:36:33.088"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.062" endtime="20201103 12:36:33.090"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.053" endtime="20201103 12:36:33.091"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:25.370" endtime="20201103 12:36:33.092"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:25.235" endtime="20201103 12:36:33.093" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:33.110" endtime="20201103 12:36:33.132"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.106" endtime="20201103 12:36:33.134"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.170" endtime="20201103 12:36:33.188"></status>
</kw>
<msg timestamp="20201103 12:36:33.189" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:33.166" endtime="20201103 12:36:33.190"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.196" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:33.192" endtime="20201103 12:36:33.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:33.202" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:33.198" endtime="20201103 12:36:33.203"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:33.159" endtime="20201103 12:36:33.205"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:33.151" endtime="20201103 12:36:33.207"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.148" endtime="20201103 12:36:33.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:33.215" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:33.214" endtime="20201103 12:36:33.216"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.209" endtime="20201103 12:36:33.217"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.146" endtime="20201103 12:36:33.217"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.144" endtime="20201103 12:36:33.217"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.219" endtime="20201103 12:36:33.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.140" endtime="20201103 12:36:33.224"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.135" endtime="20201103 12:36:33.225"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.104" endtime="20201103 12:36:33.226"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:33.248" endtime="20201103 12:36:40.282"></status>
</kw>
<msg timestamp="20201103 12:36:40.285" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:33.244" endtime="20201103 12:36:40.285"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.296" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:40.289" endtime="20201103 12:36:40.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:40.299" endtime="20201103 12:36:40.303"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.237" endtime="20201103 12:36:40.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.231" endtime="20201103 12:36:40.306"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:40.312" level="INFO">${RESULT} = {'bg-timer-count': 5, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:40.308" endtime="20201103 12:36:40.313"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.323" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:40.320" endtime="20201103 12:36:40.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.328" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:40.325" endtime="20201103 12:36:40.329"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.314" endtime="20201103 12:36:40.330"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.341" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:40.339" endtime="20201103 12:36:40.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.346" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:40.343" endtime="20201103 12:36:40.346"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.332" endtime="20201103 12:36:40.348"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.358" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:40.355" endtime="20201103 12:36:40.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.362" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:36:40.360" endtime="20201103 12:36:40.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.349" endtime="20201103 12:36:40.365"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:40.384" endtime="20201103 12:36:40.735"></status>
</kw>
<msg timestamp="20201103 12:36:40.742" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129410167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229421736, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:40.380" endtime="20201103 12:36:40.742"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.760" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129410167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229421736, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:40.744" endtime="20201103 12:36:40.761"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:40.762" endtime="20201103 12:36:40.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.373" endtime="20201103 12:36:40.768"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.366" endtime="20201103 12:36:40.769"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:40.779" level="INFO">${FILTERED} = [{'time': 1.229421736, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001156899999986, 'source_diff': 0.10001156899999986}, {'time': 1.329431653, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:40.771" endtime="20201103 12:36:40.780"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:40.809" level="INFO">${RESULT} = {'source_diff': [0.10001156899999986, 0.10000927800000015, 0.10001026400000002, 0.10001027800000006, 0.10001022299999995, 0.10001020800000004, 0.10001022200000009, 0.10001027800000006, 0.1000102229999...</msg>
<status status="PASS" starttime="20201103 12:36:40.782" endtime="20201103 12:36:40.810"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.820" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:40.817" endtime="20201103 12:36:40.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.825" level="INFO">VALUE: [0.10001156899999986, 0.10000927800000015, 0.10001026400000002, 0.10001027800000006, 0.10001022299999995, 0.10001020800000004, 0.10001022200000009, 0.10001027800000006, 0.10001022299999995, 0.1000102359999997, 0.10001022200000032, 0.10001022199999987, 0.1000102079999996, 0.10001023600000014, 0.10001023600000014, 0.1000102359999997, 0.10001022199999987, 0.10001020900000013, 0.1000101950000003, 0.10001024999999997, 0.10001022199999987, 0.10001022199999987, 0.10001022299999995, 0.10001018100000003, 0.10001022200000032, 0.10001022200000032, 0.10001023600000014, 0.10001022299999995, 0.10001022200000032, 0.10001022200000076, 0.10001023600000014, 0.10001023600000014, 0.10001022199999987, 0.10001022199999987, 0.10001022199999987, 0.10001022199999987, 0.10001023700000022, 0.10001023599999925, 0.10001022199999987, 0.10001027800000006, 0.1000102079999996, 0.10001022299999995, 0.10001020899999968, 0.10001023600000014, 0.10001022199999987, 0.10001022299999995, 0.10001030500000052, 0.10001022199999987, 0.10001022199999987, 0.10001024999999952]</msg>
<status status="PASS" starttime="20201103 12:36:40.822" endtime="20201103 12:36:40.826"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.811" endtime="20201103 12:36:40.827"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:40.834" endtime="20201103 12:36:40.837"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:40.842" endtime="20201103 12:36:40.864"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.838" endtime="20201103 12:36:40.865"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.829" endtime="20201103 12:36:40.867"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:33.227" endtime="20201103 12:36:40.868"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:33.098" endtime="20201103 12:36:40.870" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:40.887" endtime="20201103 12:36:40.908"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.883" endtime="20201103 12:36:40.910"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:40.945" endtime="20201103 12:36:40.964"></status>
</kw>
<msg timestamp="20201103 12:36:40.965" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:40.942" endtime="20201103 12:36:40.966"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.972" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:40.967" endtime="20201103 12:36:40.972"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:40.978" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:40.974" endtime="20201103 12:36:40.979"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:40.934" endtime="20201103 12:36:40.981"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:40.926" endtime="20201103 12:36:40.983"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.924" endtime="20201103 12:36:40.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:40.991" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:40.990" endtime="20201103 12:36:40.992"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.985" endtime="20201103 12:36:40.992"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.922" endtime="20201103 12:36:40.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.920" endtime="20201103 12:36:40.993"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:40.995" endtime="20201103 12:36:40.998"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.916" endtime="20201103 12:36:41.000"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.912" endtime="20201103 12:36:41.002"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:40.880" endtime="20201103 12:36:41.002"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:41.024" endtime="20201103 12:36:48.048"></status>
</kw>
<msg timestamp="20201103 12:36:48.049" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:41.020" endtime="20201103 12:36:48.050"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.056" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:48.052" endtime="20201103 12:36:48.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.058" endtime="20201103 12:36:48.062"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:41.013" endtime="20201103 12:36:48.064"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:41.008" endtime="20201103 12:36:48.065"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:48.071" level="INFO">${RESULT} = {'bg-timer-count': 10, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:48.067" endtime="20201103 12:36:48.072"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.082" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:48.080" endtime="20201103 12:36:48.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.087" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:48.084" endtime="20201103 12:36:48.087"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.073" endtime="20201103 12:36:48.089"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.099" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:48.096" endtime="20201103 12:36:48.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.103" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:48.101" endtime="20201103 12:36:48.104"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.090" endtime="20201103 12:36:48.105"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.115" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:48.113" endtime="20201103 12:36:48.116"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.120" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:36:48.117" endtime="20201103 12:36:48.120"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.107" endtime="20201103 12:36:48.122"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.141" endtime="20201103 12:36:48.494"></status>
</kw>
<msg timestamp="20201103 12:36:48.501" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.128733972, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.228745486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:48.138" endtime="20201103 12:36:48.501"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.519" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.128733972, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.228745486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:48.503" endtime="20201103 12:36:48.520"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.521" endtime="20201103 12:36:48.525"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.128" endtime="20201103 12:36:48.527"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.123" endtime="20201103 12:36:48.528"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:48.538" level="INFO">${FILTERED} = [{'time': 1.228745486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001151399999997, 'source_diff': 0.10001151399999997}, {'time': 1.328755306, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:48.530" endtime="20201103 12:36:48.539"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:48.568" level="INFO">${RESULT} = {'source_diff': [0.10001151399999997, 0.10000913899999997, 0.10001020800000004, 0.100010194, 0.10001013899999989, 0.10001020800000004, 0.10001022200000009, 0.10001022200000009, 0.100010194, 0.10001022...</msg>
<status status="PASS" starttime="20201103 12:36:48.540" endtime="20201103 12:36:48.569"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.578" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:48.576" endtime="20201103 12:36:48.579"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.584" level="INFO">VALUE: [0.10001151399999997, 0.10000913899999997, 0.10001020800000004, 0.100010194, 0.10001013899999989, 0.10001020800000004, 0.10001022200000009, 0.10001022200000009, 0.100010194, 0.1000102230000004, 0.10001019399999977, 0.10001020800000004, 0.1000101950000003, 0.10001017999999995, 0.10001019499999986, 0.10001022200000032, 0.10001020800000004, 0.10001027800000006, 0.10001027800000006, 0.10001023600000014, 0.10001027699999998, 0.10001027800000006, 0.1000102639999998, 0.10001027799999962, 0.10001024999999997, 0.10001033299999973, 0.10001027800000006, 0.1000102909999998, 0.10001027699999998, 0.10001030599999972, 0.10001031999999999, 0.10001024999999952, 0.1000102639999998, 0.1000102639999998, 0.10001027800000006, 0.10001030499999963, 0.10001027699999998, 0.1000102639999998, 0.1000102639999998, 0.10001029199999945, 0.1000102639999998, 0.1000102639999998, 0.10001027800000006, 0.10001024999999952, 0.10001027699999998, 0.10001027699999998, 0.1000102639999998, 0.10001027800000006, 0.10001027800000006, 0.1000102639999998]</msg>
<status status="PASS" starttime="20201103 12:36:48.581" endtime="20201103 12:36:48.584"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.570" endtime="20201103 12:36:48.588"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.594" endtime="20201103 12:36:48.597"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:48.603" endtime="20201103 12:36:48.624"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.598" endtime="20201103 12:36:48.626"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.590" endtime="20201103 12:36:48.628"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:41.003" endtime="20201103 12:36:48.628"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:40.874" endtime="20201103 12:36:48.630" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:48.647" endtime="20201103 12:36:48.668"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.643" endtime="20201103 12:36:48.670"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.710" endtime="20201103 12:36:48.728"></status>
</kw>
<msg timestamp="20201103 12:36:48.729" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:48.706" endtime="20201103 12:36:48.729"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.735" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:48.731" endtime="20201103 12:36:48.736"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:48.742" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:48.738" endtime="20201103 12:36:48.743"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:48.693" endtime="20201103 12:36:48.745"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:48.687" endtime="20201103 12:36:48.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.684" endtime="20201103 12:36:48.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:48.755" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:48.753" endtime="20201103 12:36:48.756"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.749" endtime="20201103 12:36:48.756"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.682" endtime="20201103 12:36:48.757"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.680" endtime="20201103 12:36:48.757"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.759" endtime="20201103 12:36:48.762"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.676" endtime="20201103 12:36:48.764"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.672" endtime="20201103 12:36:48.765"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.640" endtime="20201103 12:36:48.766"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:48.789" endtime="20201103 12:36:55.813"></status>
</kw>
<msg timestamp="20201103 12:36:55.814" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:48.784" endtime="20201103 12:36:55.814"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.820" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:55.816" endtime="20201103 12:36:55.822"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:55.823" endtime="20201103 12:36:55.827"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.777" endtime="20201103 12:36:55.829"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.771" endtime="20201103 12:36:55.830"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:55.836" level="INFO">${RESULT} = {'bg-timer-count': 15, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:36:55.832" endtime="20201103 12:36:55.837"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.846" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:55.844" endtime="20201103 12:36:55.847"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.851" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:55.849" endtime="20201103 12:36:55.852"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.838" endtime="20201103 12:36:55.853"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.863" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:55.861" endtime="20201103 12:36:55.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.868" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:55.865" endtime="20201103 12:36:55.868"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.854" endtime="20201103 12:36:55.870"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.880" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:55.877" endtime="20201103 12:36:55.880"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.884" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:55.882" endtime="20201103 12:36:55.885"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.871" endtime="20201103 12:36:55.886"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:55.903" endtime="20201103 12:36:56.258"></status>
</kw>
<msg timestamp="20201103 12:36:56.265" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133484722, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.23349625, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:36:55.900" endtime="20201103 12:36:56.265"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:56.283" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133484722, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.23349625, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:36:56.267" endtime="20201103 12:36:56.283"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:56.285" endtime="20201103 12:36:56.289"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.893" endtime="20201103 12:36:56.290"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.888" endtime="20201103 12:36:56.292"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:56.302" level="INFO">${FILTERED} = [{'time': 1.23349625, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001152800000002, 'source_diff': 0.10001152800000002}, {'time': 1.333506167, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:36:56.293" endtime="20201103 12:36:56.302"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:56.331" level="INFO">${RESULT} = {'source_diff': [0.10001152800000002, 0.10000929199999997, 0.10001022199999987, 0.10001022200000009, 0.10001023599999992, 0.10001023599999992, 0.10001024999999997, 0.10001022200000009, 0.1000102499999...</msg>
<status status="PASS" starttime="20201103 12:36:56.304" endtime="20201103 12:36:56.331"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:56.341" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:56.339" endtime="20201103 12:36:56.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:56.346" level="INFO">VALUE: [0.10001152800000002, 0.10000929199999997, 0.10001022199999987, 0.10001022200000009, 0.10001023599999992, 0.10001023599999992, 0.10001024999999997, 0.10001022200000009, 0.10001024999999997, 0.10001026400000024, 0.10001023600000014, 0.1000102359999997, 0.10001024999999997, 0.1000102359999997, 0.10001027699999998, 0.10001024999999997, 0.10001024999999997, 0.10001023600000014, 0.10001023600000014, 0.1000102359999997, 0.10001022299999995, 0.10001024999999997, 0.10001024999999997, 0.10001023600000014, 0.10001022200000032, 0.10001016600000012, 0.10001024999999997, 0.10001022299999995, 0.10001025000000041, 0.10001022199999987, 0.10001023600000014, 0.10001023600000014, 0.10001022199999987, 0.10001024999999952, 0.10001023600000014, 0.10001023600000014, 0.10001023600000014, 0.10001031900000079, 0.10001022199999987, 0.10001023600000014, 0.10001030599999972, 0.10001022199999987, 0.10001025000000041, 0.10001024999999952, 0.10001022199999987, 0.10001023600000014, 0.10001024999999952, 0.10001023700000022, 0.10001023600000014, 0.10001023600000014]</msg>
<status status="PASS" starttime="20201103 12:36:56.343" endtime="20201103 12:36:56.348"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.333" endtime="20201103 12:36:56.349"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:56.355" endtime="20201103 12:36:56.358"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:56.364" endtime="20201103 12:36:56.385"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.359" endtime="20201103 12:36:56.387"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.351" endtime="20201103 12:36:56.388"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:48.767" endtime="20201103 12:36:56.389"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:48.634" endtime="20201103 12:36:56.391" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:56.407" endtime="20201103 12:36:56.429"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.404" endtime="20201103 12:36:56.431"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:56.464" endtime="20201103 12:36:56.483"></status>
</kw>
<msg timestamp="20201103 12:36:56.484" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:56.460" endtime="20201103 12:36:56.485"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:56.491" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:56.487" endtime="20201103 12:36:56.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:56.497" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:56.493" endtime="20201103 12:36:56.498"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:56.453" endtime="20201103 12:36:56.500"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:56.447" endtime="20201103 12:36:56.502"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.444" endtime="20201103 12:36:56.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:56.510" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:56.509" endtime="20201103 12:36:56.511"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.504" endtime="20201103 12:36:56.511"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.442" endtime="20201103 12:36:56.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.441" endtime="20201103 12:36:56.512"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:56.514" endtime="20201103 12:36:56.517"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.437" endtime="20201103 12:36:56.519"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.432" endtime="20201103 12:36:56.520"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.401" endtime="20201103 12:36:56.521"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:56.542" endtime="20201103 12:37:03.565"></status>
</kw>
<msg timestamp="20201103 12:37:03.567" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:56.538" endtime="20201103 12:37:03.567"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.573" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:03.569" endtime="20201103 12:37:03.574"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:03.576" endtime="20201103 12:37:03.580"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.531" endtime="20201103 12:37:03.582"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.526" endtime="20201103 12:37:03.583"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:03.590" level="INFO">${RESULT} = {'bg-timer-count': 20, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:37:03.586" endtime="20201103 12:37:03.590"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.600" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:03.598" endtime="20201103 12:37:03.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.605" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:03.602" endtime="20201103 12:37:03.605"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:03.592" endtime="20201103 12:37:03.607"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.617" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:03.614" endtime="20201103 12:37:03.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.621" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:03.619" endtime="20201103 12:37:03.622"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:03.608" endtime="20201103 12:37:03.623"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.633" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:03.630" endtime="20201103 12:37:03.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:03.637" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:37:03.635" endtime="20201103 12:37:03.638"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:03.624" endtime="20201103 12:37:03.640"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:03.656" endtime="20201103 12:37:04.016"></status>
</kw>
<msg timestamp="20201103 12:37:04.023" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125908486, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.22592, 'source': 'DUT_IC', 'event': 'FALLING...</msg>
<status status="PASS" starttime="20201103 12:37:03.653" endtime="20201103 12:37:04.023"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:04.040" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.125908486, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.22592, 'source': 'DUT_IC', 'event': 'FALLING...</msg>
<status status="PASS" starttime="20201103 12:37:04.025" endtime="20201103 12:37:04.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:04.042" endtime="20201103 12:37:04.046"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:03.645" endtime="20201103 12:37:04.048"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:03.641" endtime="20201103 12:37:04.049"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:04.060" level="INFO">${FILTERED} = [{'time': 1.22592, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001151399999997, 'source_diff': 0.10001151399999997}, {'time': 1.325929806, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100...</msg>
<status status="PASS" starttime="20201103 12:37:04.051" endtime="20201103 12:37:04.060"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:04.089" level="INFO">${RESULT} = {'source_diff': [0.10001151399999997, 0.10000919499999994, 0.100010194, 0.10001022200000009, 0.10001020900000013, 0.10001020800000004, 0.10001022199999987, 0.10001020799999982, 0.10001020800000027, 0....</msg>
<status status="PASS" starttime="20201103 12:37:04.062" endtime="20201103 12:37:04.090"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:04.099" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:04.097" endtime="20201103 12:37:04.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:04.105" level="INFO">VALUE: [0.10001151399999997, 0.10000919499999994, 0.100010194, 0.10001022200000009, 0.10001020900000013, 0.10001020800000004, 0.10001022199999987, 0.10001020799999982, 0.10001020800000027, 0.10001020900000013, 0.10001020800000004, 0.1000102079999996, 0.10001020900000013, 0.10001020800000004, 0.10001013800000003, 0.1000102639999998, 0.10001019400000022, 0.10001020900000013, 0.1000102909999998, 0.10001027799999962, 0.10001027800000006, 0.10001027800000006, 0.10001024999999997, 0.10001024999999997, 0.10001026400000024, 0.10001027800000006, 0.1000102639999998, 0.10001026400000024, 0.10001027800000006, 0.10001029200000033, 0.1000102639999998, 0.10001027699999998, 0.1000102630000006, 0.10001025000000041, 0.1000103060000006, 0.10001026400000068, 0.1000102639999998, 0.10001027800000006, 0.1000102639999998, 0.1000102639999998, 0.10001029099999936, 0.1000102639999998, 0.10001026299999971, 0.10001027699999998, 0.1000102639999998, 0.1000102639999998, 0.10001033400000026, 0.10001024999999952, 0.10001025000000041, 0.10001024999999952]</msg>
<status status="PASS" starttime="20201103 12:37:04.101" endtime="20201103 12:37:04.106"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.091" endtime="20201103 12:37:04.108"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:04.114" endtime="20201103 12:37:04.117"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:04.122" endtime="20201103 12:37:04.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.118" endtime="20201103 12:37:04.146"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.109" endtime="20201103 12:37:04.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.522" endtime="20201103 12:37:04.148"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:56.395" endtime="20201103 12:37:04.149" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:04.166" endtime="20201103 12:37:04.188"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.162" endtime="20201103 12:37:04.190"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:04.224" endtime="20201103 12:37:04.243"></status>
</kw>
<msg timestamp="20201103 12:37:04.244" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:04.220" endtime="20201103 12:37:04.244"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:04.250" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:04.246" endtime="20201103 12:37:04.251"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:04.257" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:04.253" endtime="20201103 12:37:04.258"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:04.212" endtime="20201103 12:37:04.259"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:04.206" endtime="20201103 12:37:04.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.203" endtime="20201103 12:37:04.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:04.270" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:04.268" endtime="20201103 12:37:04.270"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.264" endtime="20201103 12:37:04.271"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.201" endtime="20201103 12:37:04.271"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.200" endtime="20201103 12:37:04.272"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:04.273" endtime="20201103 12:37:04.277"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.195" endtime="20201103 12:37:04.278"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.191" endtime="20201103 12:37:04.280"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.160" endtime="20201103 12:37:04.280"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:04.302" endtime="20201103 12:37:11.326"></status>
</kw>
<msg timestamp="20201103 12:37:11.327" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:04.299" endtime="20201103 12:37:11.328"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.333" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:11.329" endtime="20201103 12:37:11.334"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:11.336" endtime="20201103 12:37:11.339"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.291" endtime="20201103 12:37:11.341"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.285" endtime="20201103 12:37:11.343"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:11.348" level="INFO">${RESULT} = {'bg-timer-count': 25, 'bg-timer-interval': 20000, 'main-timer-interval': 100000}</msg>
<status status="PASS" starttime="20201103 12:37:11.344" endtime="20201103 12:37:11.349"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.358" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:11.356" endtime="20201103 12:37:11.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.363" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:11.361" endtime="20201103 12:37:11.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.350" endtime="20201103 12:37:11.365"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.375" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:11.372" endtime="20201103 12:37:11.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.379" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:11.377" endtime="20201103 12:37:11.380"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.366" endtime="20201103 12:37:11.381"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.391" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:11.389" endtime="20201103 12:37:11.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.395" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:37:11.393" endtime="20201103 12:37:11.396"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.383" endtime="20201103 12:37:11.398"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:11.414" endtime="20201103 12:37:11.761"></status>
</kw>
<msg timestamp="20201103 12:37:11.768" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127884236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227895778, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:11.411" endtime="20201103 12:37:11.769"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.786" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127884236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227895778, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:11.770" endtime="20201103 12:37:11.787"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:11.788" endtime="20201103 12:37:11.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.404" endtime="20201103 12:37:11.800"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.399" endtime="20201103 12:37:11.801"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:11.815" level="INFO">${FILTERED} = [{'time': 1.227895778, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001154199999984, 'source_diff': 0.10001154199999984}, {'time': 1.327905639, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:11.803" endtime="20201103 12:37:11.816"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:11.848" level="INFO">${RESULT} = {'source_diff': [0.10001154199999984, 0.10000922199999995, 0.10001020800000004, 0.10001023599999992, 0.10001019500000008, 0.10001022200000009, 0.10001023599999992, 0.10001023599999992, 0.1000102079999...</msg>
<status status="PASS" starttime="20201103 12:37:11.819" endtime="20201103 12:37:11.848"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.859" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:11.856" endtime="20201103 12:37:11.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:11.864" level="INFO">VALUE: [0.10001154199999984, 0.10000922199999995, 0.10001020800000004, 0.10001023599999992, 0.10001019500000008, 0.10001022200000009, 0.10001023599999992, 0.10001023599999992, 0.10001020799999982, 0.1000102230000004, 0.10001022199999987, 0.10001023600000014, 0.10001023600000014, 0.10001026400000024, 0.10001023699999978, 0.10001022199999987, 0.10001022199999987, 0.10001022199999987, 0.10001022199999987, 0.1000102359999997, 0.10001022299999995, 0.10001022199999987, 0.10001022200000032, 0.10001024999999997, 0.10001022199999987, 0.10001023700000022, 0.10001022299999995, 0.10001026400000024, 0.10001022199999987, 0.1000102639999998, 0.10001023600000014, 0.10001022299999995, 0.10001024999999952, 0.10001023600000014, 0.10001023600000014, 0.10001022199999987, 0.10001024999999952, 0.10001023700000022, 0.10001023600000014, 0.10001022199999987, 0.10001022199999987, 0.10001023599999925, 0.10001020899999968, 0.10001022299999995, 0.10001023599999925, 0.1000102639999998, 0.10001022199999987, 0.10001020800000049, 0.10001023600000014, 0.10001023600000014]</msg>
<status status="PASS" starttime="20201103 12:37:11.862" endtime="20201103 12:37:11.865"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.850" endtime="20201103 12:37:11.867"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:11.873" endtime="20201103 12:37:11.876"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:11.882" endtime="20201103 12:37:11.903"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.877" endtime="20201103 12:37:11.905"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:11.869" endtime="20201103 12:37:11.906"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:04.281" endtime="20201103 12:37:11.907"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:04.154" endtime="20201103 12:37:11.909" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:20.813" endtime="20201103 12:37:11.926"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f103rb</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:36:14.934" endtime="20201103 12:37:11.988"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f103rb</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
