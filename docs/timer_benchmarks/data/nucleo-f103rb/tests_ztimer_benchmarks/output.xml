<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201103 12:25:28.986" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:30.347" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:30.363" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:31.220" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:30.343" endtime="20201103 12:25:31.221"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.227" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:25:31.223" endtime="20201103 12:25:34.228"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:30.340" endtime="20201103 12:25:34.230"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:34.234" endtime="20201103 12:25:34.566"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.231" endtime="20201103 12:25:34.567"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.598" endtime="20201103 12:25:34.621"></status>
</kw>
<msg timestamp="20201103 12:25:34.622" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:25:34.594" endtime="20201103 12:25:34.622"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.628" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:25:34.624" endtime="20201103 12:25:34.629"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.636" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:34.631" endtime="20201103 12:25:34.636"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.588" endtime="20201103 12:25:34.638"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.582" endtime="20201103 12:25:34.640"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.580" endtime="20201103 12:25:34.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:34.649" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:34.647" endtime="20201103 12:25:34.650"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.642" endtime="20201103 12:25:34.650"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.578" endtime="20201103 12:25:34.650"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.576" endtime="20201103 12:25:34.651"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.652" endtime="20201103 12:25:34.656"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.572" endtime="20201103 12:25:34.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.659" endtime="20201103 12:25:34.663"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.569" endtime="20201103 12:25:34.664"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:30.336" endtime="20201103 12:25:34.665"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:34.681" endtime="20201103 12:25:34.703"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.678" endtime="20201103 12:25:34.705"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.739" endtime="20201103 12:25:34.758"></status>
</kw>
<msg timestamp="20201103 12:25:34.759" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.735" endtime="20201103 12:25:34.759"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.765" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.761" endtime="20201103 12:25:34.766"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.772" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:34.768" endtime="20201103 12:25:34.773"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.728" endtime="20201103 12:25:34.774"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:34.722" endtime="20201103 12:25:34.776"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.718" endtime="20201103 12:25:34.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:34.785" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:34.783" endtime="20201103 12:25:34.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.779" endtime="20201103 12:25:34.786"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.716" endtime="20201103 12:25:34.786"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.715" endtime="20201103 12:25:34.787"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.788" endtime="20201103 12:25:34.792"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.711" endtime="20201103 12:25:34.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.706" endtime="20201103 12:25:34.795"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.675" endtime="20201103 12:25:34.796"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.813" endtime="20201103 12:25:34.826"></status>
</kw>
<msg timestamp="20201103 12:25:34.827" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.810" endtime="20201103 12:25:34.828"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.833" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:34.829" endtime="20201103 12:25:34.834"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:34.836" endtime="20201103 12:25:34.841"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.802" endtime="20201103 12:25:34.843"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.797" endtime="20201103 12:25:34.844"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.854" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:34.852" endtime="20201103 12:25:34.855"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.859" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:25:34.856" endtime="20201103 12:25:34.859"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.845" endtime="20201103 12:25:34.861"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:34.666" endtime="20201103 12:25:34.862" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:29.343" endtime="20201103 12:25:34.869"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:34.998" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:35.014" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:35.866" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:34.994" endtime="20201103 12:25:35.868"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.874" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:25:35.870" endtime="20201103 12:25:38.875"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.991" endtime="20201103 12:25:38.878"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:38.885" endtime="20201103 12:25:39.212"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.879" endtime="20201103 12:25:39.213"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.242" endtime="20201103 12:25:39.264"></status>
</kw>
<msg timestamp="20201103 12:25:39.266" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:25:39.239" endtime="20201103 12:25:39.266"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.272" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:25:39.268" endtime="20201103 12:25:39.272"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.278" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:39.274" endtime="20201103 12:25:39.279"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.233" endtime="20201103 12:25:39.281"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.228" endtime="20201103 12:25:39.283"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.225" endtime="20201103 12:25:39.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:39.291" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:39.290" endtime="20201103 12:25:39.292"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.285" endtime="20201103 12:25:39.294"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.223" endtime="20201103 12:25:39.294"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.221" endtime="20201103 12:25:39.295"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.296" endtime="20201103 12:25:39.300"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.218" endtime="20201103 12:25:39.301"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.303" endtime="20201103 12:25:39.307"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.215" endtime="20201103 12:25:39.308"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:34.988" endtime="20201103 12:25:39.309"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:39.322" endtime="20201103 12:25:39.343"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.319" endtime="20201103 12:25:39.345"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.378" endtime="20201103 12:25:39.397"></status>
</kw>
<msg timestamp="20201103 12:25:39.398" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.374" endtime="20201103 12:25:39.398"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.404" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.400" endtime="20201103 12:25:39.405"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.411" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:39.407" endtime="20201103 12:25:39.412"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.367" endtime="20201103 12:25:39.413"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.361" endtime="20201103 12:25:39.415"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.358" endtime="20201103 12:25:39.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:39.423" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:39.422" endtime="20201103 12:25:39.424"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.418" endtime="20201103 12:25:39.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.357" endtime="20201103 12:25:39.425"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.355" endtime="20201103 12:25:39.425"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.427" endtime="20201103 12:25:39.430"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.351" endtime="20201103 12:25:39.432"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.347" endtime="20201103 12:25:39.433"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.316" endtime="20201103 12:25:39.434"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.516" endtime="20201103 12:25:46.540"></status>
</kw>
<msg timestamp="20201103 12:25:46.542" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.451" endtime="20201103 12:25:46.542"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.548" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:46.544" endtime="20201103 12:25:46.549"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:46.550" endtime="20201103 12:25:46.554"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.444" endtime="20201103 12:25:46.555"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.439" endtime="20201103 12:25:46.557"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:46.562" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:25:46.558" endtime="20201103 12:25:46.563"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.572" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:46.570" endtime="20201103 12:25:46.573"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.577" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:46.575" endtime="20201103 12:25:46.578"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.564" endtime="20201103 12:25:46.579"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.589" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:46.587" endtime="20201103 12:25:46.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.593" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:46.591" endtime="20201103 12:25:46.594"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.581" endtime="20201103 12:25:46.596"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.606" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:46.603" endtime="20201103 12:25:46.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.610" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:46.608" endtime="20201103 12:25:46.611"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.597" endtime="20201103 12:25:46.613"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:46.629" endtime="20201103 12:25:46.950"></status>
</kw>
<msg timestamp="20201103 12:25:46.957" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.185589528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.285600083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:46.626" endtime="20201103 12:25:46.958"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.975" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.185589528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.285600083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:46.960" endtime="20201103 12:25:46.976"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:46.978" endtime="20201103 12:25:46.982"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.619" endtime="20201103 12:25:46.983"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.614" endtime="20201103 12:25:46.985"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:46.995" level="INFO">${FILTERED} = [{'time': 1.285600083, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001055500000011, 'source_diff': 0.10001055500000011}, {'time': 1.385610917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:46.986" endtime="20201103 12:25:46.995"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:47.025" level="INFO">${RESULT} = {'time': [1.285600083, 1.385610917, 1.485621778, 1.585632611, 1.685643472, 1.785654319, 1.885665167, 1.985676042, 2.085686875, 2.18569775, 2.285708583, 2.385719431, 2.485730306, 2.585741153, 2.6857519...</msg>
<status status="PASS" starttime="20201103 12:25:46.997" endtime="20201103 12:25:47.026"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.035" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:47.033" endtime="20201103 12:25:47.036"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.040" level="INFO">VALUE: [0.10001055500000011, 0.10001023599999992, 0.10001024999999997, 0.10001022200000009, 0.10001023599999992, 0.10001020800000004, 0.10001022299999995, 0.10001019499999986, 0.10001022199999987, 0.10001024999999997, 0.1000102359999997, 0.10001020900000013, 0.10001024999999997, 0.1000102359999997, 0.10001022199999987, 0.10001023600000014, 0.10001023600000014, 0.1000102230000004, 0.10001023600000014, 0.10001027800000006, 0.1000102079999996, 0.10001023600000014, 0.10001022299999995, 0.10001023600000014, 0.10001024999999997, 0.10001022200000032, 0.10001022199999987, 0.1000102359999997, 0.10001023699999978, 0.10001023600000014, 0.10001022199999987, 0.10001023600000014, 0.10001022199999987, 0.10001022299999995, 0.10001025000000041, 0.10001023600000014, 0.10001022199999987, 0.10001023600000014, 0.10001023599999925, 0.10001022200000076, 0.10001025000000041, 0.10001022199999987, 0.10001022199999987, 0.10001023600000014, 0.10001022299999995, 0.10001022199999987, 0.10001029200000033, 0.10001026400000068, 0.10001022200000076, 0.10001023699999934]</msg>
<status status="PASS" starttime="20201103 12:25:47.037" endtime="20201103 12:25:47.041"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.027" endtime="20201103 12:25:47.043"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.049" endtime="20201103 12:25:47.052"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:47.057" endtime="20201103 12:25:47.079"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.053" endtime="20201103 12:25:47.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.045" endtime="20201103 12:25:47.082"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.435" endtime="20201103 12:25:47.083"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:39.310" endtime="20201103 12:25:47.084" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:47.101" endtime="20201103 12:25:47.122"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.097" endtime="20201103 12:25:47.124"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.159" endtime="20201103 12:25:47.177"></status>
</kw>
<msg timestamp="20201103 12:25:47.178" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.155" endtime="20201103 12:25:47.178"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.184" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.180" endtime="20201103 12:25:47.185"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.191" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:47.187" endtime="20201103 12:25:47.191"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:47.148" endtime="20201103 12:25:47.193"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:47.141" endtime="20201103 12:25:47.195"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.138" endtime="20201103 12:25:47.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:47.203" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:47.202" endtime="20201103 12:25:47.204"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.197" endtime="20201103 12:25:47.204"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.136" endtime="20201103 12:25:47.205"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.134" endtime="20201103 12:25:47.205"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.207" endtime="20201103 12:25:47.210"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.130" endtime="20201103 12:25:47.212"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.125" endtime="20201103 12:25:47.213"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.094" endtime="20201103 12:25:47.214"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.236" endtime="20201103 12:25:54.259"></status>
</kw>
<msg timestamp="20201103 12:25:54.261" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.232" endtime="20201103 12:25:54.261"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.267" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.263" endtime="20201103 12:25:54.268"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.269" endtime="20201103 12:25:54.273"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.225" endtime="20201103 12:25:54.274"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.220" endtime="20201103 12:25:54.276"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:54.281" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:25:54.277" endtime="20201103 12:25:54.282"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.291" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:54.289" endtime="20201103 12:25:54.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.298" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:54.294" endtime="20201103 12:25:54.303"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.283" endtime="20201103 12:25:54.307"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.323" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:54.320" endtime="20201103 12:25:54.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.330" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:54.327" endtime="20201103 12:25:54.331"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.310" endtime="20201103 12:25:54.333"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.345" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:54.342" endtime="20201103 12:25:54.346"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.350" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:25:54.347" endtime="20201103 12:25:54.351"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.335" endtime="20201103 12:25:54.352"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.371" endtime="20201103 12:25:54.725"></status>
</kw>
<msg timestamp="20201103 12:25:54.732" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.12685925, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226870792, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:25:54.368" endtime="20201103 12:25:54.733"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.752" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.12685925, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226870792, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:25:54.735" endtime="20201103 12:25:54.753"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.754" endtime="20201103 12:25:54.759"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.360" endtime="20201103 12:25:54.760"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.353" endtime="20201103 12:25:54.762"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:54.773" level="INFO">${FILTERED} = [{'time': 1.226870792, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001154199999984, 'source_diff': 0.10001154199999984}, {'time': 1.326880639, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:54.763" endtime="20201103 12:25:54.773"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:54.804" level="INFO">${RESULT} = {'time': [1.226870792, 1.326880639, 1.426891486, 1.526902292, 1.626913139, 1.726923917, 1.82693475, 1.926945583, 2.026956403, 2.126967222, 2.226978042, 2.326988847, 2.426999681, 2.527010542, 2.6270213...</msg>
<status status="PASS" starttime="20201103 12:25:54.775" endtime="20201103 12:25:54.805"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.816" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:54.813" endtime="20201103 12:25:54.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.822" level="INFO">VALUE: [0.10001154199999984, 0.100009236, 0.10001022199999987, 0.10001018100000003, 0.10001022200000009, 0.10001018099999981, 0.100010194, 0.10001020800000004, 0.1000102089999999, 0.10001020800000004, 0.10001020899999968, 0.10001019399999977, 0.10001020899999968, 0.10001025000000041, 0.10001019399999977, 0.10001022200000032, 0.10001020800000004, 0.10001019499999986, 0.10001019399999977, 0.10001019499999986, 0.10001017999999995, 0.1000102359999997, 0.10001027800000006, 0.10001024999999997, 0.1000102639999998, 0.10001024999999997, 0.10001024999999997, 0.10001024999999997, 0.10001024999999952, 0.10001025000000041, 0.10001033300000017, 0.10001025000000041, 0.10001027800000006, 0.10001023600000014, 0.10001024999999952, 0.10001019400000022, 0.10001022199999987, 0.10001023700000022, 0.10001022299999995, 0.1000102639999998, 0.10001023600000014, 0.10001024999999952, 0.10001022199999987, 0.10001023600000014, 0.10001025000000041, 0.10001019400000022, 0.1000102079999996, 0.10001025000000041, 0.10001025000000041, 0.10001023600000014]</msg>
<status status="PASS" starttime="20201103 12:25:54.819" endtime="20201103 12:25:54.823"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.806" endtime="20201103 12:25:54.825"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.832" endtime="20201103 12:25:54.835"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:54.841" endtime="20201103 12:25:54.863"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.836" endtime="20201103 12:25:54.865"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.827" endtime="20201103 12:25:54.867"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.215" endtime="20201103 12:25:54.867"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:47.089" endtime="20201103 12:25:54.870" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:54.888" endtime="20201103 12:25:54.911"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.884" endtime="20201103 12:25:54.912"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.949" endtime="20201103 12:25:54.969"></status>
</kw>
<msg timestamp="20201103 12:25:54.970" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.946" endtime="20201103 12:25:54.971"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.977" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.973" endtime="20201103 12:25:54.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.984" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:54.980" endtime="20201103 12:25:54.985"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.938" endtime="20201103 12:25:54.987"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.930" endtime="20201103 12:25:54.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.927" endtime="20201103 12:25:54.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:54.998" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:54.996" endtime="20201103 12:25:54.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.991" endtime="20201103 12:25:54.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.925" endtime="20201103 12:25:54.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.923" endtime="20201103 12:25:55.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:55.002" endtime="20201103 12:25:55.005"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.919" endtime="20201103 12:25:55.007"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.914" endtime="20201103 12:25:55.009"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.882" endtime="20201103 12:25:55.009"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:55.032" endtime="20201103 12:26:02.057"></status>
</kw>
<msg timestamp="20201103 12:26:02.058" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:55.028" endtime="20201103 12:26:02.059"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.065" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.061" endtime="20201103 12:26:02.066"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.067" endtime="20201103 12:26:02.071"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:55.020" endtime="20201103 12:26:02.073"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:55.015" endtime="20201103 12:26:02.075"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:02.080" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:26:02.076" endtime="20201103 12:26:02.092"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.103" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:02.101" endtime="20201103 12:26:02.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.108" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:02.106" endtime="20201103 12:26:02.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.094" endtime="20201103 12:26:02.111"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.121" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:02.119" endtime="20201103 12:26:02.122"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.126" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:02.123" endtime="20201103 12:26:02.127"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.112" endtime="20201103 12:26:02.128"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.138" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:02.136" endtime="20201103 12:26:02.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.143" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:26:02.141" endtime="20201103 12:26:02.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.130" endtime="20201103 12:26:02.145"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.165" endtime="20201103 12:26:02.530"></status>
</kw>
<msg timestamp="20201103 12:26:02.537" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.134863694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.234875264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:02.162" endtime="20201103 12:26:02.537"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.555" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.134863694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.234875264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:02.539" endtime="20201103 12:26:02.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.557" endtime="20201103 12:26:02.561"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.152" endtime="20201103 12:26:02.563"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.147" endtime="20201103 12:26:02.564"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:02.574" level="INFO">${FILTERED} = [{'time': 1.234875264, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001156999999994, 'source_diff': 0.10001156999999994}, {'time': 1.334885125, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:02.566" endtime="20201103 12:26:02.575"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:02.604" level="INFO">${RESULT} = {'time': [1.234875264, 1.334885125, 1.434896, 1.534906875, 1.634917764, 1.734928625, 1.8349395, 1.934950347, 2.034961181, 2.134971986, 2.234982819, 2.334993653, 2.435004486, 2.535015306, 2.635026139, ...</msg>
<status status="PASS" starttime="20201103 12:26:02.577" endtime="20201103 12:26:02.604"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.614" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:02.612" endtime="20201103 12:26:02.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.619" level="INFO">VALUE: [0.10001156999999994, 0.10000925000000005, 0.10001024999999997, 0.10001024999999997, 0.10001026400000002, 0.10001024999999997, 0.10001024999999997, 0.10001020800000004, 0.10001019499999986, 0.10001019400000022, 0.10001020800000004, 0.10001020900000013, 0.10001016699999976, 0.10001020900000013, 0.10001020800000004, 0.1000102079999996, 0.10001020900000013, 0.10001023600000014, 0.1000101950000003, 0.10001020800000004, 0.10001022199999987, 0.10001019499999986, 0.10001022199999987, 0.10001019400000022, 0.10001020899999968, 0.10001020800000004, 0.1000101950000003, 0.10001019400000022, 0.10001022200000032, 0.10001020899999968, 0.10001019400000022, 0.10001020800000049, 0.10001018100000003, 0.10001020800000049, 0.10001022199999987, 0.1000102079999996, 0.10001019400000022, 0.10001020899999968, 0.10001023600000014, 0.1000102079999996, 0.10001020800000049, 0.1000102079999996, 0.10001020899999968, 0.10001015299999949, 0.1000102079999996, 0.10001020899999968, 0.10001019400000022, 0.10001022199999987, 0.1000102079999996, 0.10001019400000022]</msg>
<status status="PASS" starttime="20201103 12:26:02.616" endtime="20201103 12:26:02.621"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.606" endtime="20201103 12:26:02.623"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.629" endtime="20201103 12:26:02.632"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:02.637" endtime="20201103 12:26:02.659"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.633" endtime="20201103 12:26:02.661"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.624" endtime="20201103 12:26:02.663"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:55.010" endtime="20201103 12:26:02.663"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:54.874" endtime="20201103 12:26:02.665" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:02.682" endtime="20201103 12:26:02.703"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.678" endtime="20201103 12:26:02.705"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.742" endtime="20201103 12:26:02.760"></status>
</kw>
<msg timestamp="20201103 12:26:02.762" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.739" endtime="20201103 12:26:02.762"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.770" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.765" endtime="20201103 12:26:02.771"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.778" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:02.773" endtime="20201103 12:26:02.778"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:02.728" endtime="20201103 12:26:02.780"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:02.722" endtime="20201103 12:26:02.782"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.719" endtime="20201103 12:26:02.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:02.791" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:02.790" endtime="20201103 12:26:02.792"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.785" endtime="20201103 12:26:02.793"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.717" endtime="20201103 12:26:02.793"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.715" endtime="20201103 12:26:02.793"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.795" endtime="20201103 12:26:02.799"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.711" endtime="20201103 12:26:02.800"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.707" endtime="20201103 12:26:02.802"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.675" endtime="20201103 12:26:02.803"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.833" endtime="20201103 12:26:09.859"></status>
</kw>
<msg timestamp="20201103 12:26:09.860" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.828" endtime="20201103 12:26:09.861"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.867" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:09.863" endtime="20201103 12:26:09.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.869" endtime="20201103 12:26:09.873"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.819" endtime="20201103 12:26:09.875"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.808" endtime="20201103 12:26:09.876"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:09.882" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:26:09.878" endtime="20201103 12:26:09.882"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.892" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:09.890" endtime="20201103 12:26:09.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.896" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:09.894" endtime="20201103 12:26:09.897"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.884" endtime="20201103 12:26:09.899"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.908" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:09.906" endtime="20201103 12:26:09.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.912" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:09.910" endtime="20201103 12:26:09.913"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.900" endtime="20201103 12:26:09.915"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.924" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:09.922" endtime="20201103 12:26:09.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.929" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:26:09.926" endtime="20201103 12:26:09.929"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.916" endtime="20201103 12:26:09.931"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.947" endtime="20201103 12:26:10.311"></status>
</kw>
<msg timestamp="20201103 12:26:10.318" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.145627736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.245639319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:09.944" endtime="20201103 12:26:10.319"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.336" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.145627736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.245639319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:10.320" endtime="20201103 12:26:10.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.339" endtime="20201103 12:26:10.342"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.937" endtime="20201103 12:26:10.344"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.932" endtime="20201103 12:26:10.345"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:10.356" level="INFO">${FILTERED} = [{'time': 1.245639319, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000115829999999, 'source_diff': 0.1000115829999999}, {'time': 1.345649222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:26:10.347" endtime="20201103 12:26:10.356"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:10.385" level="INFO">${RESULT} = {'time': [1.245639319, 1.345649222, 1.445660139, 1.545671069, 1.645681847, 1.745692708, 1.845703556, 1.945714431, 2.045725292, 2.145736167, 2.245747014, 2.345757875, 2.445768722, 2.545779583, 2.645790...</msg>
<status status="PASS" starttime="20201103 12:26:10.358" endtime="20201103 12:26:10.386"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.395" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:10.393" endtime="20201103 12:26:10.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.401" level="INFO">VALUE: [0.1000115829999999, 0.1000092640000001, 0.10001027799999984, 0.10001026299999993, 0.100010194, 0.10001023599999992, 0.10001022299999995, 0.100010237, 0.10001023600000014, 0.10001024999999997, 0.10001023600000014, 0.1000102359999997, 0.10001022199999987, 0.1000102359999997, 0.10001024999999997, 0.10001024999999997, 0.10001023600000014, 0.10001023600000014, 0.10001022200000032, 0.10001023600000014, 0.10001023600000014, 0.10001022199999987, 0.1000102359999997, 0.10001024999999997, 0.10001023700000022, 0.10001024999999997, 0.10001024999999997, 0.10001024999999997, 0.10001026400000024, 0.10001025000000041, 0.10001023600000014, 0.10001024999999952, 0.10001023700000022, 0.10001024999999952, 0.10001026400000068, 0.10001023600000014, 0.10001022199999987, 0.10001023600000014, 0.10001023600000014, 0.1000102639999998, 0.10001025000000041, 0.10001023600000014, 0.10001023600000014, 0.1000102079999996, 0.10001025000000041, 0.10001023599999925, 0.10001023600000014, 0.10001023600000014, 0.10001022299999995, 0.10001023600000014]</msg>
<status status="PASS" starttime="20201103 12:26:10.398" endtime="20201103 12:26:10.402"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.387" endtime="20201103 12:26:10.404"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.410" endtime="20201103 12:26:10.413"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:10.419" endtime="20201103 12:26:10.440"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.414" endtime="20201103 12:26:10.442"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.406" endtime="20201103 12:26:10.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.804" endtime="20201103 12:26:10.444"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:02.669" endtime="20201103 12:26:10.446" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:10.462" endtime="20201103 12:26:10.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.459" endtime="20201103 12:26:10.486"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.519" endtime="20201103 12:26:10.539"></status>
</kw>
<msg timestamp="20201103 12:26:10.540" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.516" endtime="20201103 12:26:10.540"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.546" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.542" endtime="20201103 12:26:10.547"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.553" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:10.549" endtime="20201103 12:26:10.554"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:10.509" endtime="20201103 12:26:10.555"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:10.502" endtime="20201103 12:26:10.557"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.499" endtime="20201103 12:26:10.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:10.566" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:10.564" endtime="20201103 12:26:10.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.560" endtime="20201103 12:26:10.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.498" endtime="20201103 12:26:10.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.496" endtime="20201103 12:26:10.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.569" endtime="20201103 12:26:10.573"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.492" endtime="20201103 12:26:10.574"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.487" endtime="20201103 12:26:10.576"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.456" endtime="20201103 12:26:10.576"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.599" endtime="20201103 12:26:17.622"></status>
</kw>
<msg timestamp="20201103 12:26:17.624" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.595" endtime="20201103 12:26:17.624"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.630" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:17.626" endtime="20201103 12:26:17.631"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.632" endtime="20201103 12:26:17.636"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.587" endtime="20201103 12:26:17.638"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.582" endtime="20201103 12:26:17.639"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:17.645" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:26:17.641" endtime="20201103 12:26:17.645"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.655" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:17.653" endtime="20201103 12:26:17.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.660" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:17.658" endtime="20201103 12:26:17.661"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.647" endtime="20201103 12:26:17.662"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.672" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:17.670" endtime="20201103 12:26:17.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.676" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:17.674" endtime="20201103 12:26:17.677"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.663" endtime="20201103 12:26:17.679"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.688" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:17.686" endtime="20201103 12:26:17.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.693" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:26:17.691" endtime="20201103 12:26:17.693"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.680" endtime="20201103 12:26:17.695"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.712" endtime="20201103 12:26:18.066"></status>
</kw>
<msg timestamp="20201103 12:26:18.073" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127838042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227849597, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:17.708" endtime="20201103 12:26:18.073"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.091" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127838042, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227849597, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:18.075" endtime="20201103 12:26:18.092"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.094" endtime="20201103 12:26:18.098"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.701" endtime="20201103 12:26:18.099"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.696" endtime="20201103 12:26:18.101"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:18.111" level="INFO">${FILTERED} = [{'time': 1.227849597, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001155500000003, 'source_diff': 0.10001155500000003}, {'time': 1.327859486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:18.102" endtime="20201103 12:26:18.111"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:18.141" level="INFO">${RESULT} = {'time': [1.227849597, 1.327859486, 1.427870389, 1.527881222, 1.627892153, 1.727902903, 1.827913722, 1.927924542, 2.027935403, 2.127946194, 2.227957042, 2.327967875, 2.427978681, 2.527989514, 2.628000...</msg>
<status status="PASS" starttime="20201103 12:26:18.113" endtime="20201103 12:26:18.142"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.151" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:18.149" endtime="20201103 12:26:18.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.157" level="INFO">VALUE: [0.10001155500000003, 0.10000924999999983, 0.10001029199999989, 0.10001024999999997, 0.10001031999999999, 0.10001016699999998, 0.10001017999999995, 0.10001019499999986, 0.10001023599999992, 0.10001019400000022, 0.10001020899999968, 0.10001022200000032, 0.10001019499999986, 0.10001020800000004, 0.1000101520000003, 0.10001019499999986, 0.10001016699999976, 0.1000102079999996, 0.1000102230000004, 0.10001019400000022, 0.10001020900000013, 0.10001020800000004, 0.1000102359999997, 0.10001020900000013, 0.10001017999999995, 0.10001020800000004, 0.1000101950000003, 0.10001022199999987, 0.10001019499999986, 0.10001018100000003, 0.10001020800000049, 0.10001019499999941, 0.1000102079999996, 0.10001020800000049, 0.1000101950000003, 0.1000102079999996, 0.1000101950000003, 0.1000102079999996, 0.10001019399999933, 0.10001025000000041, 0.10001020800000049, 0.1000101950000003, 0.10001020800000049, 0.1000102079999996, 0.10001020899999968, 0.10001020800000049, 0.1000101950000003, 0.1000102079999996, 0.10001012500000073, 0.10001020900000057]</msg>
<status status="PASS" starttime="20201103 12:26:18.154" endtime="20201103 12:26:18.157"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.143" endtime="20201103 12:26:18.159"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.165" endtime="20201103 12:26:18.168"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:18.174" endtime="20201103 12:26:18.195"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.169" endtime="20201103 12:26:18.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.161" endtime="20201103 12:26:18.199"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.578" endtime="20201103 12:26:18.199"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:10.450" endtime="20201103 12:26:18.201" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:18.218" endtime="20201103 12:26:18.239"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.214" endtime="20201103 12:26:18.241"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.277" endtime="20201103 12:26:18.295"></status>
</kw>
<msg timestamp="20201103 12:26:18.297" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:18.272" endtime="20201103 12:26:18.297"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.303" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:18.299" endtime="20201103 12:26:18.304"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:18.310" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:18.306" endtime="20201103 12:26:18.311"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:18.264" endtime="20201103 12:26:18.312"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:18.257" endtime="20201103 12:26:18.314"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.255" endtime="20201103 12:26:18.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:18.322" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:18.321" endtime="20201103 12:26:18.323"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.317" endtime="20201103 12:26:18.324"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.253" endtime="20201103 12:26:18.324"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.251" endtime="20201103 12:26:18.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.327" endtime="20201103 12:26:18.330"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.247" endtime="20201103 12:26:18.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.242" endtime="20201103 12:26:18.333"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.211" endtime="20201103 12:26:18.334"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:18.355" endtime="20201103 12:26:25.379"></status>
</kw>
<msg timestamp="20201103 12:26:25.380" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:18.352" endtime="20201103 12:26:25.381"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.387" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:25.382" endtime="20201103 12:26:25.387"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.389" endtime="20201103 12:26:25.393"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.345" endtime="20201103 12:26:25.394"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.339" endtime="20201103 12:26:25.396"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:25.401" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:26:25.397" endtime="20201103 12:26:25.402"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.411" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:25.409" endtime="20201103 12:26:25.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.416" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:25.414" endtime="20201103 12:26:25.417"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.403" endtime="20201103 12:26:25.418"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.428" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:25.426" endtime="20201103 12:26:25.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.432" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:25.430" endtime="20201103 12:26:25.433"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.419" endtime="20201103 12:26:25.435"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.444" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:25.442" endtime="20201103 12:26:25.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.449" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:26:25.447" endtime="20201103 12:26:25.450"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.436" endtime="20201103 12:26:25.451"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.468" endtime="20201103 12:26:25.812"></status>
</kw>
<msg timestamp="20201103 12:26:25.819" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129444514, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229456069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:25.465" endtime="20201103 12:26:25.819"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.838" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129444514, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229456069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:25.821" endtime="20201103 12:26:25.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.847" endtime="20201103 12:26:25.851"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.457" endtime="20201103 12:26:25.852"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.453" endtime="20201103 12:26:25.854"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:25.864" level="INFO">${FILTERED} = [{'time': 1.229456069, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001155500000003, 'source_diff': 0.10001155500000003}, {'time': 1.329465972, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:25.855" endtime="20201103 12:26:25.865"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:25.895" level="INFO">${RESULT} = {'time': [1.229456069, 1.329465972, 1.429476819, 1.52948775, 1.629498597, 1.729509472, 1.829520278, 1.929531125, 2.029542, 2.129552778, 2.229563611, 2.329574444, 2.429585292, 2.529596125, 2.629606972,...</msg>
<status status="PASS" starttime="20201103 12:26:25.866" endtime="20201103 12:26:25.895"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.907" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:25.903" endtime="20201103 12:26:25.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:25.915" level="INFO">VALUE: [0.10001155500000003, 0.10000927799999992, 0.10001024999999997, 0.10001022199999987, 0.10001026400000002, 0.10001026400000002, 0.10001019499999986, 0.10001016699999998, 0.10001026400000024, 0.10001019499999986, 0.10001020800000004, 0.10001020800000004, 0.10001020900000013, 0.10001019399999977, 0.10001022199999987, 0.10001022299999995, 0.1000102079999996, 0.10001016600000012, 0.1000102230000004, 0.10001020800000004, 0.1000102079999996, 0.10001022199999987, 0.10001020800000004, 0.10001020800000004, 0.10001020800000004, 0.10001020900000013, 0.10001020800000004, 0.10001020800000004, 0.1000102230000004, 0.1000102079999996, 0.10001019400000022, 0.10001022299999995, 0.10001022199999987, 0.1000102079999996, 0.10001013900000011, 0.1000102079999996, 0.10001025000000041, 0.10001020900000057, 0.10001022199999987, 0.1000102079999996, 0.10001020899999968, 0.10001016700000065, 0.10001022199999987, 0.10001027799999918, 0.10001020800000049, 0.1000102079999996, 0.10001023600000014, 0.10001022199999987, 0.10001020800000049, 0.10001022299999995]</msg>
<status status="PASS" starttime="20201103 12:26:25.910" endtime="20201103 12:26:25.917"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.897" endtime="20201103 12:26:25.920"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.931" endtime="20201103 12:26:25.935"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:25.945" endtime="20201103 12:26:25.967"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.937" endtime="20201103 12:26:25.969"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.923" endtime="20201103 12:26:25.971"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:18.335" endtime="20201103 12:26:25.971"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:18.205" endtime="20201103 12:26:25.974" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:34.883" endtime="20201103 12:26:25.992"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f103rb</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:28.995" endtime="20201103 12:26:26.053"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f103rb</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
