<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201103 12:24:17.041" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:18.304" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:18.321" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:19.161" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:18.301" endtime="20201103 12:24:19.162"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.168" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:24:19.165" endtime="20201103 12:24:22.169"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:18.298" endtime="20201103 12:24:22.171"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:22.175" endtime="20201103 12:24:22.504"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.173" endtime="20201103 12:24:22.506"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.536" endtime="20201103 12:24:22.558"></status>
</kw>
<msg timestamp="20201103 12:24:22.560" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:24:22.533" endtime="20201103 12:24:22.560"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.566" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:24:22.562" endtime="20201103 12:24:22.567"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.573" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:22.568" endtime="20201103 12:24:22.574"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:22.526" endtime="20201103 12:24:22.576"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:22.521" endtime="20201103 12:24:22.577"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.518" endtime="20201103 12:24:22.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:22.586" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:22.585" endtime="20201103 12:24:22.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.580" endtime="20201103 12:24:22.587"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.516" endtime="20201103 12:24:22.588"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.514" endtime="20201103 12:24:22.588"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.590" endtime="20201103 12:24:22.593"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.511" endtime="20201103 12:24:22.595"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.596" endtime="20201103 12:24:22.600"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.508" endtime="20201103 12:24:22.601"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:18.294" endtime="20201103 12:24:22.602"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:22.618" endtime="20201103 12:24:22.640"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.614" endtime="20201103 12:24:22.641"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.675" endtime="20201103 12:24:22.693"></status>
</kw>
<msg timestamp="20201103 12:24:22.695" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:22.672" endtime="20201103 12:24:22.695"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.701" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:22.697" endtime="20201103 12:24:22.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.708" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:22.703" endtime="20201103 12:24:22.708"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:22.664" endtime="20201103 12:24:22.710"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:22.658" endtime="20201103 12:24:22.712"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.655" endtime="20201103 12:24:22.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:22.720" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:22.719" endtime="20201103 12:24:22.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.714" endtime="20201103 12:24:22.722"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.653" endtime="20201103 12:24:22.722"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.651" endtime="20201103 12:24:22.722"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.724" endtime="20201103 12:24:22.727"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.647" endtime="20201103 12:24:22.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.643" endtime="20201103 12:24:22.730"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.612" endtime="20201103 12:24:22.731"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.748" endtime="20201103 12:24:22.761"></status>
</kw>
<msg timestamp="20201103 12:24:22.762" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:22.744" endtime="20201103 12:24:22.763"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.768" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:22.764" endtime="20201103 12:24:22.769"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:22.771" endtime="20201103 12:24:22.776"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.737" endtime="20201103 12:24:22.778"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.733" endtime="20201103 12:24:22.779"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.789" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:24:22.787" endtime="20201103 12:24:22.790"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.793" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:24:22.791" endtime="20201103 12:24:22.794"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.781" endtime="20201103 12:24:22.795"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:22.603" endtime="20201103 12:24:22.797" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:17.300" endtime="20201103 12:24:22.803"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:22.930" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:22.946" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:23.816" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:22.926" endtime="20201103 12:24:23.817"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:26.823" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201103 12:24:23.820" endtime="20201103 12:24:26.824"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.923" endtime="20201103 12:24:26.826"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:26.831" endtime="20201103 12:24:27.158"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:26.828" endtime="20201103 12:24:27.159"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:27.189" endtime="20201103 12:24:27.211"></status>
</kw>
<msg timestamp="20201103 12:24:27.213" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:24:27.185" endtime="20201103 12:24:27.213"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:27.219" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['ain(): This is RIOT! (Version: 2020.10)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Su...</msg>
<status status="PASS" starttime="20201103 12:24:27.215" endtime="20201103 12:24:27.220"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:27.226" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:27.221" endtime="20201103 12:24:27.226"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:27.179" endtime="20201103 12:24:27.228"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:27.174" endtime="20201103 12:24:27.230"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.171" endtime="20201103 12:24:27.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:27.238" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:27.237" endtime="20201103 12:24:27.239"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.232" endtime="20201103 12:24:27.241"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.169" endtime="20201103 12:24:27.242"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.167" endtime="20201103 12:24:27.242"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:27.244" endtime="20201103 12:24:27.247"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.164" endtime="20201103 12:24:27.249"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:27.250" endtime="20201103 12:24:27.254"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.161" endtime="20201103 12:24:27.256"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:22.920" endtime="20201103 12:24:27.256"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:27.270" endtime="20201103 12:24:27.292"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.266" endtime="20201103 12:24:27.293"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:27.326" endtime="20201103 12:24:27.345"></status>
</kw>
<msg timestamp="20201103 12:24:27.346" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:27.323" endtime="20201103 12:24:27.347"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:27.353" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:27.348" endtime="20201103 12:24:27.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:27.359" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:27.355" endtime="20201103 12:24:27.360"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:27.315" endtime="20201103 12:24:27.362"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:27.309" endtime="20201103 12:24:27.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.307" endtime="20201103 12:24:27.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:27.372" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:27.370" endtime="20201103 12:24:27.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.366" endtime="20201103 12:24:27.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.305" endtime="20201103 12:24:27.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.303" endtime="20201103 12:24:27.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:27.375" endtime="20201103 12:24:27.379"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.299" endtime="20201103 12:24:27.380"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.295" endtime="20201103 12:24:27.382"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.263" endtime="20201103 12:24:27.383"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:27.465" endtime="20201103 12:24:34.489"></status>
</kw>
<msg timestamp="20201103 12:24:34.490" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:27.400" endtime="20201103 12:24:34.490"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.496" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:34.492" endtime="20201103 12:24:34.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:34.499" endtime="20201103 12:24:34.502"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.393" endtime="20201103 12:24:34.504"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.388" endtime="20201103 12:24:34.505"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:34.511" level="INFO">${RESULT} = {'bg-timer-count': 0, 'main-timer-interval': 100000, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:24:34.507" endtime="20201103 12:24:34.511"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.521" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:34.519" endtime="20201103 12:24:34.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.525" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:34.523" endtime="20201103 12:24:34.526"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:34.513" endtime="20201103 12:24:34.528"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.537" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:34.535" endtime="20201103 12:24:34.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.542" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:34.539" endtime="20201103 12:24:34.542"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:34.529" endtime="20201103 12:24:34.544"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.554" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:34.551" endtime="20201103 12:24:34.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.559" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:24:34.557" endtime="20201103 12:24:34.560"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:34.545" endtime="20201103 12:24:34.561"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:34.577" endtime="20201103 12:24:34.946"></status>
</kw>
<msg timestamp="20201103 12:24:34.953" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.186915958, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.286927444, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:34.574" endtime="20201103 12:24:34.953"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:34.970" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.186915958, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.286927444, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:34.955" endtime="20201103 12:24:34.971"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:34.973" endtime="20201103 12:24:34.977"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:34.567" endtime="20201103 12:24:34.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:34.562" endtime="20201103 12:24:34.980"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:34.990" level="INFO">${FILTERED} = [{'time': 1.286927444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000114860000001, 'source_diff': 0.1000114860000001}, {'time': 1.386937278, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:24:34.981" endtime="20201103 12:24:34.990"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:35.020" level="INFO">${RESULT} = {'diff': [0.1000114860000001, 0.10000920899999999, 0.10001022200000009, 0.10001020800000004, 0.1000102089999999, 0.10001023600000014, 0.100010194, 0.10001020799999982, 0.1000102089999999, 0.1000101939...</msg>
<status status="PASS" starttime="20201103 12:24:34.992" endtime="20201103 12:24:35.020"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:35.030" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:35.028" endtime="20201103 12:24:35.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:35.035" level="INFO">VALUE: [0.1000114860000001, 0.10000920899999999, 0.10001022200000009, 0.10001020800000004, 0.1000102089999999, 0.10001023600000014, 0.100010194, 0.10001020799999982, 0.1000102089999999, 0.10001019399999977, 0.10001022199999987, 0.1000101670000002, 0.10001024999999997, 0.10001020800000004, 0.10001015299999994, 0.10001022199999987, 0.10001020800000004, 0.10001020800000004, 0.1000102230000004, 0.1000101670000002, 0.10001022199999987, 0.10001020900000013, 0.10001020800000004, 0.10001023600000014, 0.10001020800000004, 0.10001024999999997, 0.10001022199999987, 0.10001022200000032, 0.1000102359999997, 0.10001023600000014, 0.1000102079999996, 0.10001022199999987, 0.10001022299999995, 0.10001020800000049, 0.10001023600000014, 0.10001025000000041, 0.10001020899999968, 0.10001022199999987, 0.10001022199999987, 0.10001020900000057, 0.10001022199999987, 0.10001020800000049, 0.10001020900000057, 0.10001022199999987, 0.10001025000000041, 0.10001022199999987, 0.10001029199999945, 0.1000102639999998, 0.1000102079999996, 0.10001022299999995]</msg>
<status status="PASS" starttime="20201103 12:24:35.032" endtime="20201103 12:24:35.036"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.022" endtime="20201103 12:24:35.037"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:35.044" endtime="20201103 12:24:35.046"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:35.052" endtime="20201103 12:24:35.074"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.048" endtime="20201103 12:24:35.075"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.039" endtime="20201103 12:24:35.077"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:27.384" endtime="20201103 12:24:35.078"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:27.258" endtime="20201103 12:24:35.079" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:35.096" endtime="20201103 12:24:35.118"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.092" endtime="20201103 12:24:35.119"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:35.156" endtime="20201103 12:24:35.174"></status>
</kw>
<msg timestamp="20201103 12:24:35.175" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:35.152" endtime="20201103 12:24:35.175"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:35.181" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:35.177" endtime="20201103 12:24:35.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:35.188" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:35.184" endtime="20201103 12:24:35.189"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:35.145" endtime="20201103 12:24:35.190"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:35.137" endtime="20201103 12:24:35.192"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.134" endtime="20201103 12:24:35.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:35.201" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:35.199" endtime="20201103 12:24:35.201"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.195" endtime="20201103 12:24:35.202"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.133" endtime="20201103 12:24:35.202"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.130" endtime="20201103 12:24:35.203"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:35.204" endtime="20201103 12:24:35.208"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.125" endtime="20201103 12:24:35.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.121" endtime="20201103 12:24:35.211"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.089" endtime="20201103 12:24:35.211"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:35.232" endtime="20201103 12:24:42.255"></status>
</kw>
<msg timestamp="20201103 12:24:42.257" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:35.229" endtime="20201103 12:24:42.257"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.263" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.259" endtime="20201103 12:24:42.263"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.265" endtime="20201103 12:24:42.269"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.222" endtime="20201103 12:24:42.270"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.216" endtime="20201103 12:24:42.272"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:42.277" level="INFO">${RESULT} = {'bg-timer-count': 5, 'main-timer-interval': 100000, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:24:42.273" endtime="20201103 12:24:42.278"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.287" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:42.285" endtime="20201103 12:24:42.288"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.292" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:42.290" endtime="20201103 12:24:42.293"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.279" endtime="20201103 12:24:42.294"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.304" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:42.302" endtime="20201103 12:24:42.305"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.309" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:42.307" endtime="20201103 12:24:42.310"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.295" endtime="20201103 12:24:42.311"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.321" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:42.319" endtime="20201103 12:24:42.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.325" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:24:42.323" endtime="20201103 12:24:42.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.313" endtime="20201103 12:24:42.328"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.346" endtime="20201103 12:24:42.672"></status>
</kw>
<msg timestamp="20201103 12:24:42.679" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127765319, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227776903, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:42.343" endtime="20201103 12:24:42.679"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.696" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127765319, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227776903, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:42.681" endtime="20201103 12:24:42.697"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.699" endtime="20201103 12:24:42.702"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.335" endtime="20201103 12:24:42.704"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.329" endtime="20201103 12:24:42.705"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:42.715" level="INFO">${FILTERED} = [{'time': 1.227776903, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001158399999999, 'source_diff': 0.10001158399999999}, {'time': 1.32778675, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0....</msg>
<status status="PASS" starttime="20201103 12:24:42.707" endtime="20201103 12:24:42.716"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:42.744" level="INFO">${RESULT} = {'diff': [0.10001158399999999, 0.100009236, 0.10001024999999997, 0.10001024999999997, 0.10001024999999997, 0.10001026400000002, 0.10001027800000006, 0.10001024999999997, 0.10001023599999992, 0.1000102...</msg>
<status status="PASS" starttime="20201103 12:24:42.718" endtime="20201103 12:24:42.745"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.755" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:42.752" endtime="20201103 12:24:42.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.760" level="INFO">VALUE: [0.10001158399999999, 0.100009236, 0.10001024999999997, 0.10001024999999997, 0.10001024999999997, 0.10001026400000002, 0.10001027800000006, 0.10001024999999997, 0.10001023599999992, 0.1000102639999998, 0.10001023600000014, 0.10001024999999997, 0.10001024999999997, 0.10001030599999972, 0.10001022199999987, 0.10001023600000014, 0.10001024999999997, 0.10001024999999997, 0.10001026300000015, 0.10001024999999997, 0.1000102359999997, 0.10001024999999997, 0.1000102359999997, 0.10001027800000006, 0.10001030500000008, 0.10001022200000032, 0.10001024999999997, 0.10001024999999997, 0.10001023600000014, 0.10001023600000014, 0.10001025000000041, 0.10001023600000014, 0.10001023599999925, 0.10001025000000041, 0.10001024999999952, 0.10001027800000006, 0.10001023600000014, 0.10001023600000014, 0.10001020800000049, 0.10001023699999934, 0.10001023600000014, 0.10001024999999952, 0.10001024999999952, 0.10001030500000052, 0.10001022199999987, 0.10001025000000041, 0.10001023600000014, 0.1000101950000003, 0.1000102639999998, 0.10001023600000014]</msg>
<status status="PASS" starttime="20201103 12:24:42.757" endtime="20201103 12:24:42.761"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.746" endtime="20201103 12:24:42.762"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.769" endtime="20201103 12:24:42.771"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:42.777" endtime="20201103 12:24:42.798"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.772" endtime="20201103 12:24:42.800"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.764" endtime="20201103 12:24:42.801"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:35.212" endtime="20201103 12:24:42.802"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:35.084" endtime="20201103 12:24:42.804" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:42.821" endtime="20201103 12:24:42.842"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.817" endtime="20201103 12:24:42.844"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.879" endtime="20201103 12:24:42.897"></status>
</kw>
<msg timestamp="20201103 12:24:42.899" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.875" endtime="20201103 12:24:42.899"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.905" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.901" endtime="20201103 12:24:42.906"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.911" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:42.907" endtime="20201103 12:24:42.912"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:42.868" endtime="20201103 12:24:42.914"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:42.860" endtime="20201103 12:24:42.915"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.857" endtime="20201103 12:24:42.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:42.924" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:42.922" endtime="20201103 12:24:42.925"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.918" endtime="20201103 12:24:42.925"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.856" endtime="20201103 12:24:42.926"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.854" endtime="20201103 12:24:42.926"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.928" endtime="20201103 12:24:42.931"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.850" endtime="20201103 12:24:42.932"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.846" endtime="20201103 12:24:42.934"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.814" endtime="20201103 12:24:42.934"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.955" endtime="20201103 12:24:49.979"></status>
</kw>
<msg timestamp="20201103 12:24:49.980" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.952" endtime="20201103 12:24:49.981"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.987" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:49.983" endtime="20201103 12:24:49.987"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.989" endtime="20201103 12:24:49.993"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.945" endtime="20201103 12:24:49.994"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.940" endtime="20201103 12:24:49.996"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:50.001" level="INFO">${RESULT} = {'bg-timer-count': 10, 'main-timer-interval': 100000, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:24:49.997" endtime="20201103 12:24:50.002"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.012" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:50.010" endtime="20201103 12:24:50.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.016" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:50.014" endtime="20201103 12:24:50.017"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.004" endtime="20201103 12:24:50.019"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.028" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:50.026" endtime="20201103 12:24:50.029"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.033" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:50.031" endtime="20201103 12:24:50.033"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.020" endtime="20201103 12:24:50.035"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.044" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:50.042" endtime="20201103 12:24:50.045"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.049" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:24:50.047" endtime="20201103 12:24:50.050"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.036" endtime="20201103 12:24:50.051"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.070" endtime="20201103 12:24:50.423"></status>
</kw>
<msg timestamp="20201103 12:24:50.431" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126148167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226157639, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:50.066" endtime="20201103 12:24:50.431"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.466" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.126148167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.226157639, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:50.433" endtime="20201103 12:24:50.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.469" endtime="20201103 12:24:50.477"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.057" endtime="20201103 12:24:50.479"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.052" endtime="20201103 12:24:50.481"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:50.494" level="INFO">${FILTERED} = [{'time': 1.226157639, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000947199999999, 'source_diff': 0.10000947199999999}, {'time': 1.3261695, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:24:50.483" endtime="20201103 12:24:50.494"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:50.526" level="INFO">${RESULT} = {'diff': [0.10000947199999999, 0.10001125000000011, 0.10001027800000006, 0.10001026400000002, 0.10001019499999986, 0.10001027800000006, 0.10001026400000002, 0.10001026400000002, 0.10001026299999993, 0...</msg>
<status status="PASS" starttime="20201103 12:24:50.496" endtime="20201103 12:24:50.527"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.539" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:50.536" endtime="20201103 12:24:50.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.546" level="INFO">VALUE: [0.10000947199999999, 0.10001125000000011, 0.10001027800000006, 0.10001026400000002, 0.10001019499999986, 0.10001027800000006, 0.10001026400000002, 0.10001026400000002, 0.10001026299999993, 0.10001022299999995, 0.10001019399999977, 0.10001020800000004, 0.10001023699999978, 0.10001020800000004, 0.10001012499999984, 0.10001020900000013, 0.10001022199999987, 0.10001016599999968, 0.10001020900000013, 0.10001022199999987, 0.10001023600000014, 0.10001020899999968, 0.10001020800000004, 0.10001024999999997, 0.10001022299999995, 0.10001022199999987, 0.10001020800000004, 0.10001020900000013, 0.1000102079999996, 0.1000102639999998, 0.1000102079999996, 0.10001020800000049, 0.10001018099999914, 0.10001020899999968, 0.10001022199999987, 0.10001022199999987, 0.10001020800000049, 0.10001023700000022, 0.1000102079999996, 0.10001017999999995, 0.10001020899999968, 0.10001022199999987, 0.10001017999999995, 0.10001027800000006, 0.10001024999999952, 0.1000102079999996, 0.10001020899999968, 0.10001015300000038, 0.1000102079999996, 0.10001022199999987]</msg>
<status status="PASS" starttime="20201103 12:24:50.542" endtime="20201103 12:24:50.548"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.529" endtime="20201103 12:24:50.550"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.558" endtime="20201103 12:24:50.562"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:50.569" endtime="20201103 12:24:50.592"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.563" endtime="20201103 12:24:50.594"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.552" endtime="20201103 12:24:50.596"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.936" endtime="20201103 12:24:50.597"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:42.809" endtime="20201103 12:24:50.599" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:50.620" endtime="20201103 12:24:50.643"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.615" endtime="20201103 12:24:50.645"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.691" endtime="20201103 12:24:50.710"></status>
</kw>
<msg timestamp="20201103 12:24:50.711" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:50.687" endtime="20201103 12:24:50.711"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.717" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:50.713" endtime="20201103 12:24:50.718"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:50.724" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:50.720" endtime="20201103 12:24:50.725"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:50.674" endtime="20201103 12:24:50.727"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:50.666" endtime="20201103 12:24:50.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.663" endtime="20201103 12:24:50.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:50.737" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:50.736" endtime="20201103 12:24:50.738"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.731" endtime="20201103 12:24:50.738"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.660" endtime="20201103 12:24:50.739"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.658" endtime="20201103 12:24:50.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.741" endtime="20201103 12:24:50.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.653" endtime="20201103 12:24:50.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.647" endtime="20201103 12:24:50.747"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.612" endtime="20201103 12:24:50.748"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:50.769" endtime="20201103 12:24:57.794"></status>
</kw>
<msg timestamp="20201103 12:24:57.795" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:50.766" endtime="20201103 12:24:57.795"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.801" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:57.797" endtime="20201103 12:24:57.803"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.804" endtime="20201103 12:24:57.808"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.759" endtime="20201103 12:24:57.810"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.753" endtime="20201103 12:24:57.811"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:57.817" level="INFO">${RESULT} = {'bg-timer-count': 15, 'main-timer-interval': 100000, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:24:57.813" endtime="20201103 12:24:57.817"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.827" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:57.825" endtime="20201103 12:24:57.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.832" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:57.830" endtime="20201103 12:24:57.832"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.819" endtime="20201103 12:24:57.834"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.844" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:57.841" endtime="20201103 12:24:57.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.849" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:57.846" endtime="20201103 12:24:57.849"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.835" endtime="20201103 12:24:57.851"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.861" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:57.858" endtime="20201103 12:24:57.861"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.865" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:24:57.863" endtime="20201103 12:24:57.866"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.852" endtime="20201103 12:24:57.868"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.884" endtime="20201103 12:24:58.241"></status>
</kw>
<msg timestamp="20201103 12:24:58.248" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.140325583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.240335139, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:57.881" endtime="20201103 12:24:58.248"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.266" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.140325583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.240335139, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:58.250" endtime="20201103 12:24:58.267"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.268" endtime="20201103 12:24:58.272"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.873" endtime="20201103 12:24:58.274"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.869" endtime="20201103 12:24:58.275"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:58.285" level="INFO">${FILTERED} = [{'time': 1.240335139, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000955599999983, 'source_diff': 0.10000955599999983}, {'time': 1.340345944, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:24:58.277" endtime="20201103 12:24:58.286"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:58.315" level="INFO">${RESULT} = {'diff': [0.10000955599999983, 0.10001022200000009, 0.10001024999999997, 0.10001030500000008, 0.10001027699999998, 0.10001029200000011, 0.10001026400000002, 0.10001029100000003, 0.10001029199999989, 0...</msg>
<status status="PASS" starttime="20201103 12:24:58.288" endtime="20201103 12:24:58.316"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.325" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:58.323" endtime="20201103 12:24:58.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.331" level="INFO">VALUE: [0.10000955599999983, 0.10001022200000009, 0.10001024999999997, 0.10001030500000008, 0.10001027699999998, 0.10001029200000011, 0.10001026400000002, 0.10001029100000003, 0.10001029199999989, 0.1000102639999998, 0.10001017999999995, 0.1000102359999997, 0.10001023700000022, 0.10001024999999997, 0.10001023600000014, 0.1000102359999997, 0.10001023600000014, 0.10001022199999987, 0.10001018100000003, 0.10001023600000014, 0.1000102359999997, 0.10001024999999997, 0.1000102359999997, 0.10001022199999987, 0.10001024999999997, 0.10001031999999999, 0.10001024999999997, 0.10001024999999997, 0.10001027800000051, 0.10001022199999987, 0.1000102639999998, 0.10001023600000014, 0.10001023599999925, 0.10001027699999998, 0.10001022199999987, 0.10001024999999952, 0.10001023600000014, 0.10001023600000014, 0.10001023700000022, 0.10001020900000057, 0.10001023600000014, 0.10001022199999987, 0.10001023600000014, 0.10001023599999925, 0.10001025000000041, 0.10001022199999987, 0.10001023600000014, 0.1000101950000003, 0.10001022199999987, 0.10001023600000014]</msg>
<status status="PASS" starttime="20201103 12:24:58.328" endtime="20201103 12:24:58.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.317" endtime="20201103 12:24:58.334"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.340" endtime="20201103 12:24:58.343"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:58.349" endtime="20201103 12:24:58.370"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.344" endtime="20201103 12:24:58.372"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.336" endtime="20201103 12:24:58.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:50.749" endtime="20201103 12:24:58.374"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:50.604" endtime="20201103 12:24:58.376" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:58.393" endtime="20201103 12:24:58.414"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.389" endtime="20201103 12:24:58.416"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.449" endtime="20201103 12:24:58.469"></status>
</kw>
<msg timestamp="20201103 12:24:58.471" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:58.446" endtime="20201103 12:24:58.471"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.477" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:58.473" endtime="20201103 12:24:58.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:58.484" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:58.480" endtime="20201103 12:24:58.485"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:58.439" endtime="20201103 12:24:58.487"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:58.432" endtime="20201103 12:24:58.488"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.429" endtime="20201103 12:24:58.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:58.497" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:58.495" endtime="20201103 12:24:58.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.491" endtime="20201103 12:24:58.498"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.428" endtime="20201103 12:24:58.499"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.426" endtime="20201103 12:24:58.499"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.501" endtime="20201103 12:24:58.504"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.422" endtime="20201103 12:24:58.506"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.418" endtime="20201103 12:24:58.507"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.386" endtime="20201103 12:24:58.508"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:58.530" endtime="20201103 12:25:05.554"></status>
</kw>
<msg timestamp="20201103 12:25:05.556" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:58.527" endtime="20201103 12:25:05.556"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.562" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:05.558" endtime="20201103 12:25:05.563"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:05.564" endtime="20201103 12:25:05.568"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.519" endtime="20201103 12:25:05.570"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.513" endtime="20201103 12:25:05.571"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:05.577" level="INFO">${RESULT} = {'bg-timer-count': 20, 'main-timer-interval': 100000, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:05.573" endtime="20201103 12:25:05.577"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.587" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:05.585" endtime="20201103 12:25:05.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.593" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:05.591" endtime="20201103 12:25:05.594"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:05.579" endtime="20201103 12:25:05.595"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.605" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:05.603" endtime="20201103 12:25:05.606"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.610" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:05.607" endtime="20201103 12:25:05.610"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:05.597" endtime="20201103 12:25:05.612"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.622" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:05.619" endtime="20201103 12:25:05.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.626" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:25:05.624" endtime="20201103 12:25:05.627"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:05.613" endtime="20201103 12:25:05.628"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:05.645" endtime="20201103 12:25:05.967"></status>
</kw>
<msg timestamp="20201103 12:25:05.974" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129257625, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229269125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:05.642" endtime="20201103 12:25:05.974"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:05.992" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.129257625, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.229269125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:05.976" endtime="20201103 12:25:05.992"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:05.994" endtime="20201103 12:25:05.998"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:05.634" endtime="20201103 12:25:05.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:05.630" endtime="20201103 12:25:06.001"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:06.011" level="INFO">${FILTERED} = [{'time': 1.229269125, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10001150000000014, 'source_diff': 0.10001150000000014}, {'time': 1.329278958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:06.003" endtime="20201103 12:25:06.011"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:06.042" level="INFO">${RESULT} = {'diff': [0.10001150000000014, 0.10000925000000005, 0.10001024999999997, 0.10001026400000002, 0.10001019500000008, 0.10001020800000004, 0.1000102089999999, 0.100010194, 0.10001022199999987, 0.10001020...</msg>
<status status="PASS" starttime="20201103 12:25:06.014" endtime="20201103 12:25:06.043"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.054" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:06.052" endtime="20201103 12:25:06.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.060" level="INFO">VALUE: [0.10001150000000014, 0.10000925000000005, 0.10001024999999997, 0.10001026400000002, 0.10001019500000008, 0.10001020800000004, 0.1000102089999999, 0.100010194, 0.10001022199999987, 0.10001020800000004, 0.10001024999999997, 0.10001020900000013, 0.10001020800000004, 0.10001022200000032, 0.10001020900000013, 0.10001019399999977, 0.10001020899999968, 0.10001019499999986, 0.10001024999999997, 0.10001022299999995, 0.10001022199999987, 0.10001020800000004, 0.1000101950000003, 0.10001019399999977, 0.10001019499999986, 0.10001022199999987, 0.10001020800000004, 0.1000101950000003, 0.10001022199999987, 0.1000101950000003, 0.10001019499999941, 0.10001019400000022, 0.10001020899999968, 0.10001019399999933, 0.1000102639999998, 0.10001018100000003, 0.10001019399999933, 0.1000101950000003, 0.1000102079999996, 0.1000102079999996, 0.1000101950000003, 0.10001020800000049, 0.10001022199999987, 0.10001030599999972, 0.10001029199999945, 0.1000103060000006, 0.1000102639999998, 0.10001027699999998, 0.1000102639999998, 0.10001034799999964]</msg>
<status status="PASS" starttime="20201103 12:25:06.057" endtime="20201103 12:25:06.061"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.045" endtime="20201103 12:25:06.062"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.069" endtime="20201103 12:25:06.071"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:06.077" endtime="20201103 12:25:06.099"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.072" endtime="20201103 12:25:06.101"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.064" endtime="20201103 12:25:06.102"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:58.509" endtime="20201103 12:25:06.103"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:58.380" endtime="20201103 12:25:06.104" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:06.121" endtime="20201103 12:25:06.143"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.117" endtime="20201103 12:25:06.144"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.179" endtime="20201103 12:25:06.198"></status>
</kw>
<msg timestamp="20201103 12:25:06.199" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.175" endtime="20201103 12:25:06.200"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.206" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.202" endtime="20201103 12:25:06.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:06.212" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:06.208" endtime="20201103 12:25:06.213"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:06.167" endtime="20201103 12:25:06.215"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:06.161" endtime="20201103 12:25:06.216"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.158" endtime="20201103 12:25:06.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:06.225" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:06.223" endtime="20201103 12:25:06.226"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.219" endtime="20201103 12:25:06.226"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.156" endtime="20201103 12:25:06.227"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.155" endtime="20201103 12:25:06.227"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.229" endtime="20201103 12:25:06.233"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.150" endtime="20201103 12:25:06.234"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.146" endtime="20201103 12:25:06.236"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.115" endtime="20201103 12:25:06.236"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:06.257" endtime="20201103 12:25:13.281"></status>
</kw>
<msg timestamp="20201103 12:25:13.282" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:06.254" endtime="20201103 12:25:13.283"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.288" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:13.284" endtime="20201103 12:25:13.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:13.291" endtime="20201103 12:25:13.294"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.247" endtime="20201103 12:25:13.296"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.241" endtime="20201103 12:25:13.298"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:13.303" level="INFO">${RESULT} = {'bg-timer-count': 25, 'main-timer-interval': 100000, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:25:13.299" endtime="20201103 12:25:13.303"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.313" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:13.311" endtime="20201103 12:25:13.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.318" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:13.315" endtime="20201103 12:25:13.318"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.305" endtime="20201103 12:25:13.320"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.329" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:13.327" endtime="20201103 12:25:13.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.334" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:13.332" endtime="20201103 12:25:13.334"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.321" endtime="20201103 12:25:13.336"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.347" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:13.344" endtime="20201103 12:25:13.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.351" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:25:13.349" endtime="20201103 12:25:13.352"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.337" endtime="20201103 12:25:13.353"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:13.370" endtime="20201103 12:25:13.750"></status>
</kw>
<msg timestamp="20201103 12:25:13.757" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127646917, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227658347, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:13.367" endtime="20201103 12:25:13.757"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.776" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.127646917, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.227658347, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:13.759" endtime="20201103 12:25:13.777"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:13.779" endtime="20201103 12:25:13.783"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.359" endtime="20201103 12:25:13.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.355" endtime="20201103 12:25:13.786"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:13.797" level="INFO">${FILTERED} = [{'time': 1.227658347, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000114299999999, 'source_diff': 0.1000114299999999}, {'time': 1.327669194, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:25:13.788" endtime="20201103 12:25:13.798"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:13.828" level="INFO">${RESULT} = {'diff': [0.1000114299999999, 0.10001015200000007, 0.100010237, 0.100010237, 0.10001022200000009, 0.10001020800000004, 0.10001026400000002, 0.10001026400000002, 0.10001022199999987, 0.1000102369999997...</msg>
<status status="PASS" starttime="20201103 12:25:13.799" endtime="20201103 12:25:13.829"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.839" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:13.837" endtime="20201103 12:25:13.840"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:13.845" level="INFO">VALUE: [0.1000114299999999, 0.10001015200000007, 0.100010237, 0.100010237, 0.10001022200000009, 0.10001020800000004, 0.10001026400000002, 0.10001026400000002, 0.10001022199999987, 0.10001023699999978, 0.10001024999999997, 0.10001022199999987, 0.10001024999999997, 0.10001023600000014, 0.10001022200000032, 0.10001027800000006, 0.10001022299999995, 0.10001023600000014, 0.10001022199999987, 0.10001024999999997, 0.1000102359999997, 0.10001022200000032, 0.1000101520000003, 0.10001022299999995, 0.10001020900000013, 0.10001023600000014, 0.10001023600000014, 0.1000102359999997, 0.10001027800000006, 0.10001024999999952, 0.10001030599999972, 0.1000102639999998, 0.10001023600000014, 0.10001023600000014, 0.10001024999999952, 0.10001022199999987, 0.10001025000000041, 0.10001025000000041, 0.10001024999999952, 0.10001026400000068, 0.10001023600000014, 0.10001023600000014, 0.10001027800000006, 0.10001022199999987, 0.10001024999999952, 0.10001023600000014, 0.10001024999999952, 0.10001023700000022, 0.10001025000000041, 0.10001023599999925]</msg>
<status status="PASS" starttime="20201103 12:25:13.842" endtime="20201103 12:25:13.846"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.830" endtime="20201103 12:25:13.848"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:13.854" endtime="20201103 12:25:13.857"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:13.863" endtime="20201103 12:25:13.886"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.859" endtime="20201103 12:25:13.888"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:13.850" endtime="20201103 12:25:13.889"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:06.237" endtime="20201103 12:25:13.890"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:06.109" endtime="20201103 12:25:13.892" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:22.817" endtime="20201103 12:25:13.911"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f103rb</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:24:17.051" endtime="20201103 12:25:13.977"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f103rb</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
