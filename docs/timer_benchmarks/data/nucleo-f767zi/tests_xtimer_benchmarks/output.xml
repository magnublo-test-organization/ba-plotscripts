<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:24:38.308" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:38.885" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:38.893" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:40.142" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:38.884" endtime="20201103 12:24:40.143"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.146" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:24:40.144" endtime="20201103 12:24:40.147"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:38.882" endtime="20201103 12:24:40.147"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:40.150" endtime="20201103 12:24:40.332"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.148" endtime="20201103 12:24:40.333"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.346" endtime="20201103 12:24:40.361"></status>
</kw>
<msg timestamp="20201103 12:24:40.361" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.344" endtime="20201103 12:24:40.361"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.364" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.362" endtime="20201103 12:24:40.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.367" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:40.365" endtime="20201103 12:24:40.367"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.342" endtime="20201103 12:24:40.368"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.339" endtime="20201103 12:24:40.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.338" endtime="20201103 12:24:40.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:40.373" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:40.372" endtime="20201103 12:24:40.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.370" endtime="20201103 12:24:40.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.337" endtime="20201103 12:24:40.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.337" endtime="20201103 12:24:40.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.374" endtime="20201103 12:24:40.376"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.335" endtime="20201103 12:24:40.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.377" endtime="20201103 12:24:40.378"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.334" endtime="20201103 12:24:40.379"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:38.881" endtime="20201103 12:24:40.379"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:40.385" endtime="20201103 12:24:40.406"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.384" endtime="20201103 12:24:40.407"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.436" endtime="20201103 12:24:40.454"></status>
</kw>
<msg timestamp="20201103 12:24:40.455" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.433" endtime="20201103 12:24:40.455"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.460" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.457" endtime="20201103 12:24:40.460"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.466" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:40.462" endtime="20201103 12:24:40.466"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.426" endtime="20201103 12:24:40.468"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:40.421" endtime="20201103 12:24:40.469"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.418" endtime="20201103 12:24:40.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:40.477" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:40.475" endtime="20201103 12:24:40.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.471" endtime="20201103 12:24:40.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.416" endtime="20201103 12:24:40.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.415" endtime="20201103 12:24:40.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.480" endtime="20201103 12:24:40.483"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.412" endtime="20201103 12:24:40.484"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.409" endtime="20201103 12:24:40.485"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.383" endtime="20201103 12:24:40.486"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.495" endtime="20201103 12:24:40.506"></status>
</kw>
<msg timestamp="20201103 12:24:40.507" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.494" endtime="20201103 12:24:40.507"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.509" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:40.508" endtime="20201103 12:24:40.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:40.510" endtime="20201103 12:24:40.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.491" endtime="20201103 12:24:40.512"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.488" endtime="20201103 12:24:40.513"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.517" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:24:40.515" endtime="20201103 12:24:40.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.518" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:24:40.518" endtime="20201103 12:24:40.519"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.513" endtime="20201103 12:24:40.519"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:40.380" endtime="20201103 12:24:40.520" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:38.430" endtime="20201103 12:24:40.533"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:24:40.583" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:24:40.593" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:24:41.726" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:24:40.582" endtime="20201103 12:24:41.727"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:24:41.729" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:24:41.728" endtime="20201103 12:24:41.729"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.580" endtime="20201103 12:24:41.730"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:41.732" endtime="20201103 12:24:41.990"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:41.731" endtime="20201103 12:24:41.991"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.014" endtime="20201103 12:24:42.028"></status>
</kw>
<msg timestamp="20201103 12:24:42.028" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.012" endtime="20201103 12:24:42.028"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.031" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.029" endtime="20201103 12:24:42.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.034" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:42.032" endtime="20201103 12:24:42.034"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:42.008" endtime="20201103 12:24:42.035"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:42.004" endtime="20201103 12:24:42.035"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.001" endtime="20201103 12:24:42.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:42.039" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:42.038" endtime="20201103 12:24:42.040"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.036" endtime="20201103 12:24:42.041"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:41.999" endtime="20201103 12:24:42.041"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:41.998" endtime="20201103 12:24:42.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.042" endtime="20201103 12:24:42.043"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:41.995" endtime="20201103 12:24:42.044"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.044" endtime="20201103 12:24:42.046"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:41.993" endtime="20201103 12:24:42.046"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:40.579" endtime="20201103 12:24:42.047"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:42.052" endtime="20201103 12:24:42.072"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.051" endtime="20201103 12:24:42.072"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.085" endtime="20201103 12:24:42.099"></status>
</kw>
<msg timestamp="20201103 12:24:42.099" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.083" endtime="20201103 12:24:42.100"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.103" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.101" endtime="20201103 12:24:42.104"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:42.107" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:42.105" endtime="20201103 12:24:42.107"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:42.081" endtime="20201103 12:24:42.108"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:42.078" endtime="20201103 12:24:42.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.077" endtime="20201103 12:24:42.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:42.114" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:42.113" endtime="20201103 12:24:42.115"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.110" endtime="20201103 12:24:42.115"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.076" endtime="20201103 12:24:42.115"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.076" endtime="20201103 12:24:42.116"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.117" endtime="20201103 12:24:42.119"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.074" endtime="20201103 12:24:42.119"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.073" endtime="20201103 12:24:42.120"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.050" endtime="20201103 12:24:42.120"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:42.131" endtime="20201103 12:24:49.153"></status>
</kw>
<msg timestamp="20201103 12:24:49.154" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:42.129" endtime="20201103 12:24:49.155"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.160" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:49.156" endtime="20201103 12:24:49.160"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.162" endtime="20201103 12:24:49.165"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.125" endtime="20201103 12:24:49.166"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.122" endtime="20201103 12:24:49.167"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:49.172" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:24:49.169" endtime="20201103 12:24:49.173"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.182" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:49.178" endtime="20201103 12:24:49.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.188" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:49.185" endtime="20201103 12:24:49.189"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.174" endtime="20201103 12:24:49.191"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.199" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:49.197" endtime="20201103 12:24:49.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.203" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:49.201" endtime="20201103 12:24:49.204"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.192" endtime="20201103 12:24:49.205"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.213" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:49.211" endtime="20201103 12:24:49.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.218" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:24:49.215" endtime="20201103 12:24:49.218"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.206" endtime="20201103 12:24:49.219"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.231" endtime="20201103 12:24:49.531"></status>
</kw>
<msg timestamp="20201103 12:24:49.534" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.06930275, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.169310972, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:24:49.229" endtime="20201103 12:24:49.534"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.542" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.06930275, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.169310972, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201103 12:24:49.535" endtime="20201103 12:24:49.542"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.543" endtime="20201103 12:24:49.544"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.224" endtime="20201103 12:24:49.545"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.221" endtime="20201103 12:24:49.545"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:49.549" level="INFO">${FILTERED} = [{'time': 1.169310972, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000822199999981, 'source_diff': 0.10000822199999981}, {'time': 1.269318292, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:24:49.546" endtime="20201103 12:24:49.550"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:49.563" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:24:49.550" endtime="20201103 12:24:49.563"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.567" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:49.566" endtime="20201103 12:24:49.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.569" level="INFO">VALUE: [0.10000822199999981, 0.10000684799999982, 0.10000688899999988, 0.100006861, 0.1000068890000001, 0.100006861, 0.10000690199999984, 0.1000068329999999, 0.10000690300000015, 0.10000686099999978, 0.10000687500000005, 0.10000686099999978, 0.10000688899999988, 0.10000686100000022, 0.10000688899999988, 0.10000686099999978, 0.10000688899999988, 0.1000068470000004, 0.1000069309999998, 0.1000069029999997, 0.10000683300000013, 0.10000686199999986, 0.10000687500000005, 0.10000686099999978, 0.10000688900000032, 0.10000687500000005, 0.10000688800000024, 0.10000686099999978, 0.10000697200000008, 0.10000679199999984, 0.10000691699999997, 0.10000688900000032, 0.10000686099999978, 0.10000688900000032, 0.10000686099999978, 0.10000687500000005, 0.10000687500000005, 0.10000687500000005, 0.10000687500000005, 0.1000068470000004, 0.10000688900000032, 0.10000684699999951, 0.10000688900000032, 0.10000687500000005, 0.10000690200000051, 0.10000687500000005, 0.10000688899999943, 0.10000687500000005, 0.10000688900000032, 0.10000686099999978]</msg>
<status status="PASS" starttime="20201103 12:24:49.568" endtime="20201103 12:24:49.570"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.564" endtime="20201103 12:24:49.570"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.572" endtime="20201103 12:24:49.573"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:49.575" endtime="20201103 12:24:49.595"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.574" endtime="20201103 12:24:49.595"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.571" endtime="20201103 12:24:49.596"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:42.121" endtime="20201103 12:24:49.596"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:42.047" endtime="20201103 12:24:49.597" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:49.603" endtime="20201103 12:24:49.622"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.602" endtime="20201103 12:24:49.623"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.636" endtime="20201103 12:24:49.650"></status>
</kw>
<msg timestamp="20201103 12:24:49.651" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:49.635" endtime="20201103 12:24:49.651"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.653" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:49.652" endtime="20201103 12:24:49.654"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:49.656" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:49.654" endtime="20201103 12:24:49.656"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:49.632" endtime="20201103 12:24:49.657"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:49.629" endtime="20201103 12:24:49.658"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.628" endtime="20201103 12:24:49.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:49.662" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:49.661" endtime="20201103 12:24:49.662"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.659" endtime="20201103 12:24:49.662"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.627" endtime="20201103 12:24:49.663"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.627" endtime="20201103 12:24:49.664"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.664" endtime="20201103 12:24:49.666"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.625" endtime="20201103 12:24:49.666"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.624" endtime="20201103 12:24:49.667"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.600" endtime="20201103 12:24:49.667"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:49.675" endtime="20201103 12:24:56.696"></status>
</kw>
<msg timestamp="20201103 12:24:56.697" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:49.674" endtime="20201103 12:24:56.698"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.702" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:56.699" endtime="20201103 12:24:56.703"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.705" endtime="20201103 12:24:56.708"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.671" endtime="20201103 12:24:56.709"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.669" endtime="20201103 12:24:56.710"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:56.715" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:24:56.711" endtime="20201103 12:24:56.715"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.723" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:56.721" endtime="20201103 12:24:56.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.727" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:24:56.725" endtime="20201103 12:24:56.728"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.716" endtime="20201103 12:24:56.729"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.737" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:24:56.735" endtime="20201103 12:24:56.738"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.742" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:24:56.740" endtime="20201103 12:24:56.743"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.730" endtime="20201103 12:24:56.744"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.752" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:24:56.750" endtime="20201103 12:24:56.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:56.756" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:24:56.754" endtime="20201103 12:24:56.757"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.745" endtime="20201103 12:24:56.758"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:56.771" endtime="20201103 12:24:57.073"></status>
</kw>
<msg timestamp="20201103 12:24:57.076" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062125681, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162131931, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:56.768" endtime="20201103 12:24:57.077"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.084" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062125681, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162131931, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:24:57.077" endtime="20201103 12:24:57.085"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.085" endtime="20201103 12:24:57.087"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.763" endtime="20201103 12:24:57.087"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:56.759" endtime="20201103 12:24:57.088"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:24:57.092" level="INFO">${FILTERED} = [{'time': 1.162131931, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000625000000007, 'source_diff': 0.10000625000000007}, {'time': 1.262140153, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:24:57.089" endtime="20201103 12:24:57.092"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:24:57.105" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:24:57.093" endtime="20201103 12:24:57.105"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.109" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:24:57.108" endtime="20201103 12:24:57.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.112" level="INFO">VALUE: [0.10000625000000007, 0.10000775000000006, 0.10000681900000008, 0.10000687500000005, 0.10000687500000005, 0.10000681900000008, 0.10000681900000008, 0.10000694500000007, 0.10000676399999997, 0.10000694500000007, 0.10000676400000019, 0.10000692999999972, 0.10000677699999994, 0.10000688899999988, 0.10000680500000003, 0.10000688899999988, 0.10000680599999967, 0.10000697200000008, 0.10000674999999992, 0.10000695800000026, 0.10000673699999973, 0.10000690200000006, 0.10000683299999968, 0.10000686100000022, 0.10000681899999986, 0.10000688900000032, 0.10000683399999977, 0.10000688900000032, 0.10000681899999986, 0.10000687500000005, 0.10000687500000005, 0.10000683299999924, 0.10000683400000021, 0.10000687500000005, 0.10000681999999994, 0.10000688900000032, 0.10000681899999986, 0.10000690199999962, 0.10000681899999986, 0.10000693100000024, 0.10000677800000002, 0.10000688899999943, 0.10000687500000005, 0.1000068470000004, 0.10000683300000013, 0.1000069029999997, 0.10000680600000056, 0.10000688900000032, 0.10000681899999986, 0.10000693000000016]</msg>
<status status="PASS" starttime="20201103 12:24:57.111" endtime="20201103 12:24:57.112"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.106" endtime="20201103 12:24:57.113"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.115" endtime="20201103 12:24:57.116"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:57.118" endtime="20201103 12:24:57.137"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.117" endtime="20201103 12:24:57.138"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.113" endtime="20201103 12:24:57.138"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:49.668" endtime="20201103 12:24:57.139"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:49.598" endtime="20201103 12:24:57.139" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:24:57.146" endtime="20201103 12:24:57.166"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.145" endtime="20201103 12:24:57.166"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.179" endtime="20201103 12:24:57.193"></status>
</kw>
<msg timestamp="20201103 12:24:57.194" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:57.177" endtime="20201103 12:24:57.194"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.196" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:57.195" endtime="20201103 12:24:57.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:24:57.199" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:24:57.198" endtime="20201103 12:24:57.200"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:57.175" endtime="20201103 12:24:57.200"></status>
</kw>
<status status="FAIL" starttime="20201103 12:24:57.173" endtime="20201103 12:24:57.201"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.171" endtime="20201103 12:24:57.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:24:57.205" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:24:57.204" endtime="20201103 12:24:57.205"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.202" endtime="20201103 12:24:57.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.171" endtime="20201103 12:24:57.206"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.170" endtime="20201103 12:24:57.206"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.207" endtime="20201103 12:24:57.208"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.168" endtime="20201103 12:24:57.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.167" endtime="20201103 12:24:57.209"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.143" endtime="20201103 12:24:57.209"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:24:57.217" endtime="20201103 12:25:04.239"></status>
</kw>
<msg timestamp="20201103 12:25:04.241" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:24:57.216" endtime="20201103 12:25:04.242"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.249" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:04.244" endtime="20201103 12:25:04.250"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.252" endtime="20201103 12:25:04.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.213" endtime="20201103 12:25:04.256"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.211" endtime="20201103 12:25:04.257"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:04.263" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:25:04.259" endtime="20201103 12:25:04.263"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.272" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:04.269" endtime="20201103 12:25:04.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.277" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:04.275" endtime="20201103 12:25:04.278"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.264" endtime="20201103 12:25:04.279"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.287" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:04.285" endtime="20201103 12:25:04.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.291" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:04.289" endtime="20201103 12:25:04.292"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.280" endtime="20201103 12:25:04.293"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.300" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:04.298" endtime="20201103 12:25:04.301"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.305" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:25:04.303" endtime="20201103 12:25:04.305"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.294" endtime="20201103 12:25:04.306"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.320" endtime="20201103 12:25:04.626"></status>
</kw>
<msg timestamp="20201103 12:25:04.628" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061494056, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161502333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:04.317" endtime="20201103 12:25:04.629"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.636" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061494056, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161502333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:04.630" endtime="20201103 12:25:04.637"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.637" endtime="20201103 12:25:04.639"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.311" endtime="20201103 12:25:04.640"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.308" endtime="20201103 12:25:04.640"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:04.644" level="INFO">${FILTERED} = [{'time': 1.161502333, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000827700000015, 'source_diff': 0.10000827700000015}, {'time': 1.261509569, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:04.641" endtime="20201103 12:25:04.644"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:04.657" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:04.645" endtime="20201103 12:25:04.657"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.661" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:04.660" endtime="20201103 12:25:04.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.663" level="INFO">VALUE: [0.10000827700000015, 0.10000676299999989, 0.1000068329999999, 0.10000690299999992, 0.10000687499999983, 0.10000687500000005, 0.1000068329999999, 0.10000691699999997, 0.1000068329999999, 0.10000690300000015, 0.10000684800000004, 0.10000690300000015, 0.10000683300000013, 0.10000698599999991, 0.10000677699999994, 0.10000690200000006, 0.10000683300000013, 0.10000691699999997, 0.10000683299999968, 0.10000693000000016, 0.10000681999999994, 0.1000069029999997, 0.10000684699999995, 0.10000691700000042, 0.10000683399999977, 0.10000690199999962, 0.10000683299999968, 0.10000691700000042, 0.10000686099999978, 0.10000690300000015, 0.10000683400000021, 0.10000691600000078, 0.10000683300000013, 0.10000694500000051, 0.10000683300000013, 0.10000691699999997, 0.10000684799999959, 0.10000690300000059, 0.10000684699999951, 0.10000691699999997, 0.10000683300000013, 0.10000690199999962, 0.10000683400000021, 0.10000691699999997, 0.10000683300000013, 0.10000691699999997, 0.10000683300000013, 0.10000691599999989, 0.10000684699999951, 0.10000691699999997]</msg>
<status status="PASS" starttime="20201103 12:25:04.662" endtime="20201103 12:25:04.664"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.657" endtime="20201103 12:25:04.664"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.666" endtime="20201103 12:25:04.668"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:04.670" endtime="20201103 12:25:04.690"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.668" endtime="20201103 12:25:04.690"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.665" endtime="20201103 12:25:04.691"></status>
</kw>
<status status="PASS" starttime="20201103 12:24:57.210" endtime="20201103 12:25:04.691"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:24:57.141" endtime="20201103 12:25:04.691" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:04.699" endtime="20201103 12:25:04.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.697" endtime="20201103 12:25:04.720"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.733" endtime="20201103 12:25:04.748"></status>
</kw>
<msg timestamp="20201103 12:25:04.748" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:04.732" endtime="20201103 12:25:04.748"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.751" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:04.749" endtime="20201103 12:25:04.751"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:04.754" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:04.752" endtime="20201103 12:25:04.754"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:04.728" endtime="20201103 12:25:04.755"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:04.726" endtime="20201103 12:25:04.755"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.725" endtime="20201103 12:25:04.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:04.759" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:04.759" endtime="20201103 12:25:04.760"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.757" endtime="20201103 12:25:04.760"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.724" endtime="20201103 12:25:04.760"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.724" endtime="20201103 12:25:04.760"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.761" endtime="20201103 12:25:04.763"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.722" endtime="20201103 12:25:04.763"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.721" endtime="20201103 12:25:04.764"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.695" endtime="20201103 12:25:04.764"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:04.772" endtime="20201103 12:25:11.794"></status>
</kw>
<msg timestamp="20201103 12:25:11.795" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:04.770" endtime="20201103 12:25:11.795"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.800" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:11.797" endtime="20201103 12:25:11.801"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.802" endtime="20201103 12:25:11.806"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.768" endtime="20201103 12:25:11.807"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.766" endtime="20201103 12:25:11.808"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:11.813" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:25:11.810" endtime="20201103 12:25:11.814"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.822" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:11.820" endtime="20201103 12:25:11.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.826" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:11.824" endtime="20201103 12:25:11.826"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.815" endtime="20201103 12:25:11.828"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.835" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:11.833" endtime="20201103 12:25:11.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.840" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:11.838" endtime="20201103 12:25:11.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.829" endtime="20201103 12:25:11.841"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.849" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:11.847" endtime="20201103 12:25:11.850"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:11.853" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:25:11.851" endtime="20201103 12:25:11.854"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.843" endtime="20201103 12:25:11.855"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:11.870" endtime="20201103 12:25:12.173"></status>
</kw>
<msg timestamp="20201103 12:25:12.175" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062531236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162539514, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:11.867" endtime="20201103 12:25:12.176"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:12.183" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062531236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162539514, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:12.177" endtime="20201103 12:25:12.184"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:12.184" endtime="20201103 12:25:12.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.860" endtime="20201103 12:25:12.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:11.856" endtime="20201103 12:25:12.187"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:12.191" level="INFO">${FILTERED} = [{'time': 1.162539514, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.100008278, 'source_diff': 0.100008278}, {'time': 1.26254575, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000057639999998...</msg>
<status status="PASS" starttime="20201103 12:25:12.188" endtime="20201103 12:25:12.191"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:12.203" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:12.192" endtime="20201103 12:25:12.204"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:12.208" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:12.207" endtime="20201103 12:25:12.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:12.210" level="INFO">VALUE: [0.100008278, 0.10000576399999983, 0.10000683399999999, 0.10000690299999992, 0.10000684699999995, 0.10000690300000015, 0.10000681999999994, 0.10000690200000006, 0.100006861, 0.10000688900000032, 0.10000683299999968, 0.10000691599999989, 0.10000683300000013, 0.10000691699999997, 0.10000683300000013, 0.10000690200000006, 0.10000683400000021, 0.10000691699999997, 0.10000683299999968, 0.1000069029999997, 0.10000686099999978, 0.10000687500000005, 0.10000683300000013, 0.10000691699999997, 0.10000688900000032, 0.10000686099999978, 0.10000683300000013, 0.10000690300000015, 0.10000683300000013, 0.10000691600000033, 0.10000683399999932, 0.1000069580000007, 0.10000680500000048, 0.10000694499999963, 0.10000680600000056, 0.10000691599999989, 0.10000690199999962, 0.1000068470000004, 0.10000686099999978, 0.10000697300000017, 0.10000677800000002, 0.10000692999999927, 0.10000681900000075, 0.10000690300000059, 0.10000687500000005, 0.10000687500000005, 0.10000688900000032, 0.10000687500000005, 0.10000683299999924, 0.10000693100000024]</msg>
<status status="PASS" starttime="20201103 12:25:12.209" endtime="20201103 12:25:12.211"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.204" endtime="20201103 12:25:12.211"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:12.214" endtime="20201103 12:25:12.215"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:12.217" endtime="20201103 12:25:12.236"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.215" endtime="20201103 12:25:12.237"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.212" endtime="20201103 12:25:12.237"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:04.764" endtime="20201103 12:25:12.237"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:04.693" endtime="20201103 12:25:12.238" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:12.244" endtime="20201103 12:25:12.264"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.243" endtime="20201103 12:25:12.264"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:12.278" endtime="20201103 12:25:12.292"></status>
</kw>
<msg timestamp="20201103 12:25:12.292" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:12.277" endtime="20201103 12:25:12.292"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:12.295" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:12.293" endtime="20201103 12:25:12.295"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:12.298" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:12.296" endtime="20201103 12:25:12.298"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:12.274" endtime="20201103 12:25:12.299"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:12.271" endtime="20201103 12:25:12.299"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.270" endtime="20201103 12:25:12.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:12.303" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:12.302" endtime="20201103 12:25:12.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.300" endtime="20201103 12:25:12.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.269" endtime="20201103 12:25:12.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.268" endtime="20201103 12:25:12.304"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:12.305" endtime="20201103 12:25:12.306"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.267" endtime="20201103 12:25:12.307"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.265" endtime="20201103 12:25:12.307"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.242" endtime="20201103 12:25:12.308"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:12.316" endtime="20201103 12:25:19.337"></status>
</kw>
<msg timestamp="20201103 12:25:19.338" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:12.314" endtime="20201103 12:25:19.338"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.343" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.340" endtime="20201103 12:25:19.345"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.346" endtime="20201103 12:25:19.350"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.312" endtime="20201103 12:25:19.351"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.310" endtime="20201103 12:25:19.352"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:19.357" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:25:19.353" endtime="20201103 12:25:19.357"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.365" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:19.363" endtime="20201103 12:25:19.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.370" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:19.368" endtime="20201103 12:25:19.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.358" endtime="20201103 12:25:19.372"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.380" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:19.378" endtime="20201103 12:25:19.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.384" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:19.382" endtime="20201103 12:25:19.385"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.373" endtime="20201103 12:25:19.386"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.396" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:19.394" endtime="20201103 12:25:19.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.400" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:25:19.398" endtime="20201103 12:25:19.401"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.387" endtime="20201103 12:25:19.402"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.415" endtime="20201103 12:25:19.716"></status>
</kw>
<msg timestamp="20201103 12:25:19.719" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061447083, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161454319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:19.412" endtime="20201103 12:25:19.719"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.727" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061447083, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161454319, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:19.720" endtime="20201103 12:25:19.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.728" endtime="20201103 12:25:19.730"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.406" endtime="20201103 12:25:19.730"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.403" endtime="20201103 12:25:19.730"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:19.734" level="INFO">${FILTERED} = [{'time': 1.161454319, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000723599999994, 'source_diff': 0.10000723599999994}, {'time': 1.261461542, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:19.731" endtime="20201103 12:25:19.734"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:19.749" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:19.735" endtime="20201103 12:25:19.749"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.753" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:19.752" endtime="20201103 12:25:19.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.756" level="INFO">VALUE: [0.10000723599999994, 0.10000673599999987, 0.10000684700000018, 0.100006861, 0.10000680500000003, 0.10000687500000005, 0.10000681999999994, 0.1000068890000001, 0.10000681999999994, 0.10000687500000027, 0.10000680600000011, 0.10000687500000005, 0.10000680499999959, 0.10000688899999988, 0.10000681899999986, 0.10000688900000032, 0.10000681999999994, 0.10000694399999999, 0.10000676399999975, 0.10000688899999988, 0.1000068190000003, 0.1000069029999997, 0.10000680600000011, 0.10000694500000007, 0.10000677800000002, 0.10000690300000015, 0.10000687500000005, 0.10000681999999994, 0.10000681899999986, 0.10000690300000015, 0.10000680599999967, 0.10000688900000032, 0.10000683400000021, 0.10000687500000005, 0.10000683299999924, 0.10000687500000005, 0.10000681899999986, 0.1000069029999997, 0.10000680599999967, 0.1000069029999997, 0.10000680600000056, 0.10000688899999943, 0.10000680500000048, 0.10000690200000051, 0.10000681899999986, 0.1000069029999997, 0.10000687500000005, 0.10000683300000013, 0.10000681999999994, 0.10000690300000059]</msg>
<status status="PASS" starttime="20201103 12:25:19.754" endtime="20201103 12:25:19.756"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.750" endtime="20201103 12:25:19.757"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.759" endtime="20201103 12:25:19.760"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:19.762" endtime="20201103 12:25:19.782"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.761" endtime="20201103 12:25:19.782"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.757" endtime="20201103 12:25:19.783"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:12.308" endtime="20201103 12:25:19.783"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:12.240" endtime="20201103 12:25:19.784" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:19.790" endtime="20201103 12:25:19.809"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.789" endtime="20201103 12:25:19.810"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.824" endtime="20201103 12:25:19.837"></status>
</kw>
<msg timestamp="20201103 12:25:19.838" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.822" endtime="20201103 12:25:19.838"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.840" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.839" endtime="20201103 12:25:19.841"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:19.843" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:19.841" endtime="20201103 12:25:19.844"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:19.820" endtime="20201103 12:25:19.844"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:19.817" endtime="20201103 12:25:19.845"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.815" endtime="20201103 12:25:19.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:19.849" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:19.848" endtime="20201103 12:25:19.849"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.846" endtime="20201103 12:25:19.849"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.814" endtime="20201103 12:25:19.850"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.814" endtime="20201103 12:25:19.850"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.850" endtime="20201103 12:25:19.852"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.812" endtime="20201103 12:25:19.852"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.811" endtime="20201103 12:25:19.853"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.787" endtime="20201103 12:25:19.853"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:19.862" endtime="20201103 12:25:26.883"></status>
</kw>
<msg timestamp="20201103 12:25:26.884" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:19.860" endtime="20201103 12:25:26.884"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.889" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:26.886" endtime="20201103 12:25:26.890"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.891" endtime="20201103 12:25:26.894"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.857" endtime="20201103 12:25:26.895"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.855" endtime="20201103 12:25:26.896"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:26.901" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:25:26.898" endtime="20201103 12:25:26.902"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.910" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:26.908" endtime="20201103 12:25:26.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.914" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:26.912" endtime="20201103 12:25:26.915"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.903" endtime="20201103 12:25:26.916"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.924" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:26.921" endtime="20201103 12:25:26.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.928" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:26.926" endtime="20201103 12:25:26.928"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.917" endtime="20201103 12:25:26.930"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.940" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:26.937" endtime="20201103 12:25:26.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:26.944" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:25:26.942" endtime="20201103 12:25:26.945"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.931" endtime="20201103 12:25:26.946"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:26.959" endtime="20201103 12:25:27.262"></status>
</kw>
<msg timestamp="20201103 12:25:27.265" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061865875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161874111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:26.956" endtime="20201103 12:25:27.265"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:27.273" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061865875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161874111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:27.266" endtime="20201103 12:25:27.273"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:27.274" endtime="20201103 12:25:27.275"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.950" endtime="20201103 12:25:27.276"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:26.947" endtime="20201103 12:25:27.276"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:27.280" level="INFO">${FILTERED} = [{'time': 1.161874111, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000823599999986, 'source_diff': 0.10000823599999986}, {'time': 1.261881333, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:27.277" endtime="20201103 12:25:27.280"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:27.293" level="INFO">${RESULT} = {'event': ['FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'FALLING', 'F...</msg>
<status status="PASS" starttime="20201103 12:25:27.282" endtime="20201103 12:25:27.294"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:27.298" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:27.297" endtime="20201103 12:25:27.298"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:27.301" level="INFO">VALUE: [0.10000823599999986, 0.10000675000000014, 0.10000684699999995, 0.10000690299999992, 0.1000068890000001, 0.100006861, 0.10000683399999999, 0.10000691699999997, 0.10000683300000013, 0.10000690299999992, 0.1000068470000004, 0.10000688800000024, 0.10000683300000013, 0.10000691699999997, 0.10000684699999995, 0.10000690300000015, 0.10000684800000004, 0.10000690300000015, 0.10000683300000013, 0.10000698599999991, 0.10000677699999994, 0.10000690200000006, 0.10000684799999959, 0.10000691699999997, 0.10000683299999968, 0.10000691699999997, 0.10000686099999978, 0.10000690200000006, 0.10000684699999995, 0.1000069309999998, 0.10000686099999978, 0.10000688900000032, 0.10000686099999978, 0.10000691599999989, 0.10000683400000021, 0.10000693100000024, 0.10000683300000013, 0.10000691699999997, 0.10000686099999978, 0.10000690200000051, 0.10000686100000067, 0.1000069029999997, 0.1000068470000004, 0.10000691699999997, 0.10000684699999951, 0.10000694400000043, 0.10000681999999994, 0.10000691699999997, 0.10000686099999978, 0.10000691699999997]</msg>
<status status="PASS" starttime="20201103 12:25:27.299" endtime="20201103 12:25:27.301"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:27.294" endtime="20201103 12:25:27.302"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:27.305" endtime="20201103 12:25:27.307"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:27.309" endtime="20201103 12:25:27.329"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:27.307" endtime="20201103 12:25:27.329"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:27.303" endtime="20201103 12:25:27.330"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:19.854" endtime="20201103 12:25:27.330"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:19.785" endtime="20201103 12:25:27.331" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:24:40.537" endtime="20201103 12:25:27.340"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f767zi</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:24:38.311" endtime="20201103 12:25:27.367"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f767zi</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
