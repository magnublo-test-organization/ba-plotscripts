<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:35:57.322" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:57.906" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:57.916" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:35:59.098" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:57.905" endtime="20201103 12:35:59.099"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.102" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:35:59.100" endtime="20201103 12:35:59.102"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:57.904" endtime="20201103 12:35:59.103"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:59.105" endtime="20201103 12:35:59.324"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.103" endtime="20201103 12:35:59.324"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.338" endtime="20201103 12:35:59.352"></status>
</kw>
<msg timestamp="20201103 12:35:59.352" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:59.336" endtime="20201103 12:35:59.353"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.355" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:59.354" endtime="20201103 12:35:59.355"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.358" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:59.356" endtime="20201103 12:35:59.359"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:59.333" endtime="20201103 12:35:59.360"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:59.331" endtime="20201103 12:35:59.360"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.330" endtime="20201103 12:35:59.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:59.364" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:59.364" endtime="20201103 12:35:59.365"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.361" endtime="20201103 12:35:59.365"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.329" endtime="20201103 12:35:59.365"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.328" endtime="20201103 12:35:59.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.366" endtime="20201103 12:35:59.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.327" endtime="20201103 12:35:59.368"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.369" endtime="20201103 12:35:59.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.325" endtime="20201103 12:35:59.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:57.902" endtime="20201103 12:35:59.372"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:35:59.378" endtime="20201103 12:35:59.397"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.376" endtime="20201103 12:35:59.398"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.414" endtime="20201103 12:35:59.428"></status>
</kw>
<msg timestamp="20201103 12:35:59.428" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:59.412" endtime="20201103 12:35:59.429"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.431" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:59.429" endtime="20201103 12:35:59.431"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.434" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:35:59.432" endtime="20201103 12:35:59.435"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:59.408" endtime="20201103 12:35:59.435"></status>
</kw>
<status status="FAIL" starttime="20201103 12:35:59.406" endtime="20201103 12:35:59.436"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.404" endtime="20201103 12:35:59.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:35:59.440" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:35:59.439" endtime="20201103 12:35:59.440"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.437" endtime="20201103 12:35:59.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.403" endtime="20201103 12:35:59.441"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.402" endtime="20201103 12:35:59.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.442" endtime="20201103 12:35:59.443"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.401" endtime="20201103 12:35:59.444"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.399" endtime="20201103 12:35:59.444"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.375" endtime="20201103 12:35:59.444"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.451" endtime="20201103 12:35:59.462"></status>
</kw>
<msg timestamp="20201103 12:35:59.462" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:59.450" endtime="20201103 12:35:59.463"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.465" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:35:59.463" endtime="20201103 12:35:59.465"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:35:59.466" endtime="20201103 12:35:59.468"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.447" endtime="20201103 12:35:59.468"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.445" endtime="20201103 12:35:59.469"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.473" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:35:59.472" endtime="20201103 12:35:59.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.475" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201103 12:35:59.474" endtime="20201103 12:35:59.475"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.469" endtime="20201103 12:35:59.476"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:35:59.372" endtime="20201103 12:35:59.476" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:57.446" endtime="20201103 12:35:59.479"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:35:59.529" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:35:59.537" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:00.735" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:35:59.528" endtime="20201103 12:36:00.735"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:00.738" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:00.736" endtime="20201103 12:36:00.738"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.526" endtime="20201103 12:36:00.739"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:00.742" endtime="20201103 12:36:01.041"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:00.740" endtime="20201103 12:36:01.041"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.054" endtime="20201103 12:36:01.070"></status>
</kw>
<msg timestamp="20201103 12:36:01.071" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.052" endtime="20201103 12:36:01.071"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.074" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.072" endtime="20201103 12:36:01.075"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.078" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:01.076" endtime="20201103 12:36:01.079"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.050" endtime="20201103 12:36:01.080"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.047" endtime="20201103 12:36:01.081"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.046" endtime="20201103 12:36:01.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:01.087" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:01.086" endtime="20201103 12:36:01.088"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.082" endtime="20201103 12:36:01.088"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.045" endtime="20201103 12:36:01.089"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.045" endtime="20201103 12:36:01.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.090" endtime="20201103 12:36:01.092"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.044" endtime="20201103 12:36:01.093"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.094" endtime="20201103 12:36:01.099"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.042" endtime="20201103 12:36:01.100"></status>
</kw>
<status status="PASS" starttime="20201103 12:35:59.525" endtime="20201103 12:36:01.101"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:01.111" endtime="20201103 12:36:01.130"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.108" endtime="20201103 12:36:01.131"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.148" endtime="20201103 12:36:01.162"></status>
</kw>
<msg timestamp="20201103 12:36:01.163" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.146" endtime="20201103 12:36:01.163"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.166" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.164" endtime="20201103 12:36:01.166"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:01.169" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:01.167" endtime="20201103 12:36:01.169"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.143" endtime="20201103 12:36:01.170"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:01.140" endtime="20201103 12:36:01.170"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.138" endtime="20201103 12:36:01.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:01.174" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:01.174" endtime="20201103 12:36:01.175"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.171" endtime="20201103 12:36:01.175"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.137" endtime="20201103 12:36:01.175"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.136" endtime="20201103 12:36:01.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.176" endtime="20201103 12:36:01.177"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.134" endtime="20201103 12:36:01.178"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.132" endtime="20201103 12:36:01.178"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.106" endtime="20201103 12:36:01.178"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:01.188" endtime="20201103 12:36:08.210"></status>
</kw>
<msg timestamp="20201103 12:36:08.211" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:01.186" endtime="20201103 12:36:08.211"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.216" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.213" endtime="20201103 12:36:08.216"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.218" endtime="20201103 12:36:08.221"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.183" endtime="20201103 12:36:08.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.181" endtime="20201103 12:36:08.223"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:08.228" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:36:08.225" endtime="20201103 12:36:08.228"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.236" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:08.234" endtime="20201103 12:36:08.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.241" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:08.239" endtime="20201103 12:36:08.241"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.230" endtime="20201103 12:36:08.242"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.250" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:08.248" endtime="20201103 12:36:08.251"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.255" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:08.253" endtime="20201103 12:36:08.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.244" endtime="20201103 12:36:08.256"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.264" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:08.262" endtime="20201103 12:36:08.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.269" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:36:08.267" endtime="20201103 12:36:08.270"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.258" endtime="20201103 12:36:08.271"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.284" endtime="20201103 12:36:08.589"></status>
</kw>
<msg timestamp="20201103 12:36:08.592" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066917764, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166924917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:08.281" endtime="20201103 12:36:08.592"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.600" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.066917764, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.166924917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:08.593" endtime="20201103 12:36:08.600"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.601" endtime="20201103 12:36:08.602"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.276" endtime="20201103 12:36:08.603"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.272" endtime="20201103 12:36:08.603"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:08.607" level="INFO">${FILTERED} = [{'time': 1.166924917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000715299999996, 'source_diff': 0.10000715299999996}, {'time': 1.266933222, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:08.604" endtime="20201103 12:36:08.607"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:08.621" level="INFO">${RESULT} = {'diff': [0.10000715299999996, 0.10000776400000011, 0.1000068329999999, 0.10000684700000018, 0.10000679199999984, 0.1000067910000002, 0.10000680599999989, 0.10000676400000019, 0.1000068329999999, 0.10...</msg>
<status status="PASS" starttime="20201103 12:36:08.608" endtime="20201103 12:36:08.621"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.625" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:08.624" endtime="20201103 12:36:08.625"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.627" level="INFO">VALUE: [0.10000715299999996, 0.10000776400000011, 0.1000068329999999, 0.10000684700000018, 0.10000679199999984, 0.1000067910000002, 0.10000680599999989, 0.10000676400000019, 0.1000068329999999, 0.10000681899999986, 0.10000682000000038, 0.10000677699999994, 0.10000683299999968, 0.10000676400000019, 0.10000680500000003, 0.10000674999999992, 0.10000681999999994, 0.10000677800000002, 0.10000680500000003, 0.10000679200000029, 0.10000680600000011, 0.10000679099999976, 0.10000680500000003, 0.10000680600000011, 0.10000680600000011, 0.10000676300000011, 0.10000683299999968, 0.10000676400000019, 0.10000681899999986, 0.10000683300000057, 0.10000681999999994, 0.10000679200000029, 0.10000681900000075, 0.10000677800000002, 0.10000681999999994, 0.10000677800000002, 0.10000683300000013, 0.10000677800000002, 0.10000686099999978, 0.10000679099999932, 0.10000680499999959, 0.10000680599999967, 0.10000683400000021, 0.10000675000000037, 0.10000683300000013, 0.10000677800000002, 0.10000683400000021, 0.10000676399999975, 0.10000683300000013, 0.1000067919999994]</msg>
<status status="PASS" starttime="20201103 12:36:08.626" endtime="20201103 12:36:08.627"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.621" endtime="20201103 12:36:08.628"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.630" endtime="20201103 12:36:08.631"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:08.633" endtime="20201103 12:36:08.653"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.632" endtime="20201103 12:36:08.653"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.628" endtime="20201103 12:36:08.654"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:01.179" endtime="20201103 12:36:08.654"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:01.102" endtime="20201103 12:36:08.655" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:08.661" endtime="20201103 12:36:08.681"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.660" endtime="20201103 12:36:08.681"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.694" endtime="20201103 12:36:08.708"></status>
</kw>
<msg timestamp="20201103 12:36:08.708" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.693" endtime="20201103 12:36:08.708"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.711" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.709" endtime="20201103 12:36:08.711"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:08.714" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:08.712" endtime="20201103 12:36:08.714"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:08.690" endtime="20201103 12:36:08.715"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:08.687" endtime="20201103 12:36:08.715"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.686" endtime="20201103 12:36:08.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:08.719" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:08.718" endtime="20201103 12:36:08.719"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.716" endtime="20201103 12:36:08.720"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.685" endtime="20201103 12:36:08.721"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.685" endtime="20201103 12:36:08.721"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.722" endtime="20201103 12:36:08.723"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.683" endtime="20201103 12:36:08.724"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.682" endtime="20201103 12:36:08.724"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.658" endtime="20201103 12:36:08.724"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:08.732" endtime="20201103 12:36:15.754"></status>
</kw>
<msg timestamp="20201103 12:36:15.755" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:08.731" endtime="20201103 12:36:15.755"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.760" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:15.757" endtime="20201103 12:36:15.761"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:15.762" endtime="20201103 12:36:15.765"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.728" endtime="20201103 12:36:15.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.726" endtime="20201103 12:36:15.767"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:15.772" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:36:15.769" endtime="20201103 12:36:15.773"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.781" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:15.778" endtime="20201103 12:36:15.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.785" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:15.783" endtime="20201103 12:36:15.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.774" endtime="20201103 12:36:15.786"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.794" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:15.792" endtime="20201103 12:36:15.795"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.799" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:15.797" endtime="20201103 12:36:15.800"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.788" endtime="20201103 12:36:15.801"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.809" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:15.807" endtime="20201103 12:36:15.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:15.813" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:36:15.811" endtime="20201103 12:36:15.814"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.802" endtime="20201103 12:36:15.815"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:15.825" endtime="20201103 12:36:16.123"></status>
</kw>
<msg timestamp="20201103 12:36:16.126" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061372361, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161379528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:15.824" endtime="20201103 12:36:16.126"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.134" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061372361, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161379528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:16.127" endtime="20201103 12:36:16.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.135" endtime="20201103 12:36:16.137"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.820" endtime="20201103 12:36:16.137"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:15.816" endtime="20201103 12:36:16.137"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:16.141" level="INFO">${FILTERED} = [{'time': 1.161379528, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000716700000001, 'source_diff': 0.10000716700000001}, {'time': 1.261386903, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:16.138" endtime="20201103 12:36:16.142"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:16.155" level="INFO">${RESULT} = {'diff': [0.10000716700000001, 0.10000683399999999, 0.10000681900000008, 0.10000677800000002, 0.10000681899999986, 0.10000679099999998, 0.10000679199999984, 0.10000680599999989, 0.10000680500000003, 0...</msg>
<status status="PASS" starttime="20201103 12:36:16.142" endtime="20201103 12:36:16.155"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.159" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:16.158" endtime="20201103 12:36:16.159"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.161" level="INFO">VALUE: [0.10000716700000001, 0.10000683399999999, 0.10000681900000008, 0.10000677800000002, 0.10000681899999986, 0.10000679099999998, 0.10000679199999984, 0.10000680599999989, 0.10000680500000003, 0.10000679099999998, 0.10000680600000011, 0.10000681999999994, 0.10000679200000029, 0.10000681899999986, 0.10000677800000002, 0.10000679200000029, 0.10000680500000003, 0.10000679199999984, 0.10000679199999984, 0.10000677700000038, 0.10000680599999967, 0.10000679199999984, 0.10000681899999986, 0.10000677699999994, 0.10000686100000022, 0.10000679200000029, 0.10000680500000003, 0.10000679199999984, 0.10000683400000021, 0.10000677800000002, 0.1000067910000002, 0.1000067919999994, 0.10000680599999967, 0.10000680499999959, 0.10000680499999959, 0.10000679200000029, 0.10000679200000029, 0.10000680500000048, 0.10000686100000067, 0.10000680599999967, 0.10000681999999994, 0.1000067910000002, 0.10000679200000029, 0.10000680599999967, 0.1000067919999994, 0.10000680499999959, 0.10000680599999967, 0.10000680599999967, 0.10000680599999967, 0.10000681899999986]</msg>
<status status="PASS" starttime="20201103 12:36:16.160" endtime="20201103 12:36:16.162"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.156" endtime="20201103 12:36:16.162"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.164" endtime="20201103 12:36:16.166"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:16.168" endtime="20201103 12:36:16.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.166" endtime="20201103 12:36:16.188"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.163" endtime="20201103 12:36:16.188"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:08.725" endtime="20201103 12:36:16.188"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:08.656" endtime="20201103 12:36:16.189" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:16.196" endtime="20201103 12:36:16.215"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.194" endtime="20201103 12:36:16.216"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.228" endtime="20201103 12:36:16.243"></status>
</kw>
<msg timestamp="20201103 12:36:16.244" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:16.227" endtime="20201103 12:36:16.244"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.246" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:16.245" endtime="20201103 12:36:16.247"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:16.249" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:16.247" endtime="20201103 12:36:16.250"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:16.224" endtime="20201103 12:36:16.250"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:16.222" endtime="20201103 12:36:16.251"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.221" endtime="20201103 12:36:16.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:16.255" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:16.254" endtime="20201103 12:36:16.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.252" endtime="20201103 12:36:16.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.220" endtime="20201103 12:36:16.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.219" endtime="20201103 12:36:16.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.256" endtime="20201103 12:36:16.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.218" endtime="20201103 12:36:16.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.216" endtime="20201103 12:36:16.259"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.193" endtime="20201103 12:36:16.259"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:16.267" endtime="20201103 12:36:23.289"></status>
</kw>
<msg timestamp="20201103 12:36:23.290" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:16.265" endtime="20201103 12:36:23.290"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.295" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:23.292" endtime="20201103 12:36:23.296"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.297" endtime="20201103 12:36:23.301"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.263" endtime="20201103 12:36:23.302"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.261" endtime="20201103 12:36:23.303"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:23.307" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:36:23.304" endtime="20201103 12:36:23.308"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.317" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:23.314" endtime="20201103 12:36:23.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.321" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:23.319" endtime="20201103 12:36:23.322"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.309" endtime="20201103 12:36:23.323"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.331" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:23.329" endtime="20201103 12:36:23.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.335" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:23.333" endtime="20201103 12:36:23.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.324" endtime="20201103 12:36:23.337"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.341" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:23.340" endtime="20201103 12:36:23.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.343" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:36:23.342" endtime="20201103 12:36:23.343"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.337" endtime="20201103 12:36:23.344"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.350" endtime="20201103 12:36:23.649"></status>
</kw>
<msg timestamp="20201103 12:36:23.652" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061435653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161442792, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:23.348" endtime="20201103 12:36:23.652"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.660" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061435653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161442792, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:23.653" endtime="20201103 12:36:23.660"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.661" endtime="20201103 12:36:23.662"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.346" endtime="20201103 12:36:23.663"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.344" endtime="20201103 12:36:23.663"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:23.667" level="INFO">${FILTERED} = [{'time': 1.161442792, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000713899999991, 'source_diff': 0.10000713899999991}, {'time': 1.261451139, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:23.664" endtime="20201103 12:36:23.667"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:23.680" level="INFO">${RESULT} = {'diff': [0.10000713899999991, 0.10000780600000003, 0.10000677699999994, 0.10000680600000011, 0.10000677800000002, 0.10000679099999998, 0.10000679200000007, 0.10000683399999999, 0.10000674999999992, 0...</msg>
<status status="PASS" starttime="20201103 12:36:23.668" endtime="20201103 12:36:23.680"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.684" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:23.683" endtime="20201103 12:36:23.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.687" level="INFO">VALUE: [0.10000713899999991, 0.10000780600000003, 0.10000677699999994, 0.10000680600000011, 0.10000677800000002, 0.10000679099999998, 0.10000679200000007, 0.10000683399999999, 0.10000674999999992, 0.10000683300000013, 0.10000674999999992, 0.10000683300000013, 0.10000676399999975, 0.10000679200000029, 0.10000679099999976, 0.10000680500000003, 0.10000679200000029, 0.10000681999999994, 0.10000676300000011, 0.10000680600000011, 0.10000679199999984, 0.1000067910000002, 0.10000680599999967, 0.10000679199999984, 0.10000679099999976, 0.10000680499999959, 0.10000682000000038, 0.10000679199999984, 0.10000677699999994, 0.10000679199999984, 0.10000686099999978, 0.10000681899999986, 0.10000677700000082, 0.10000686099999978, 0.10000686199999986, 0.1000067910000002, 0.10000681900000075, 0.10000677800000002, 0.10000680499999959, 0.10000679099999932, 0.10000680599999967, 0.10000683400000021, 0.10000676400000064, 0.10000680499999959, 0.10000679200000029, 0.10000679200000029, 0.10000680500000048, 0.1000068470000004, 0.10000680599999967, 0.10000684699999951]</msg>
<status status="PASS" starttime="20201103 12:36:23.685" endtime="20201103 12:36:23.687"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.681" endtime="20201103 12:36:23.688"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.690" endtime="20201103 12:36:23.692"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:23.694" endtime="20201103 12:36:23.713"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.692" endtime="20201103 12:36:23.714"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.688" endtime="20201103 12:36:23.714"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:16.259" endtime="20201103 12:36:23.714"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:16.190" endtime="20201103 12:36:23.715" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:23.721" endtime="20201103 12:36:23.741"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.720" endtime="20201103 12:36:23.741"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.755" endtime="20201103 12:36:23.769"></status>
</kw>
<msg timestamp="20201103 12:36:23.770" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:23.753" endtime="20201103 12:36:23.770"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.772" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:23.771" endtime="20201103 12:36:23.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:23.775" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:23.773" endtime="20201103 12:36:23.776"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:23.750" endtime="20201103 12:36:23.776"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:23.748" endtime="20201103 12:36:23.777"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.746" endtime="20201103 12:36:23.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:23.781" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:23.780" endtime="20201103 12:36:23.781"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.778" endtime="20201103 12:36:23.781"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.746" endtime="20201103 12:36:23.782"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.745" endtime="20201103 12:36:23.782"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.783" endtime="20201103 12:36:23.784"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.744" endtime="20201103 12:36:23.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.742" endtime="20201103 12:36:23.785"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.719" endtime="20201103 12:36:23.785"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:23.794" endtime="20201103 12:36:30.816"></status>
</kw>
<msg timestamp="20201103 12:36:30.817" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:23.792" endtime="20201103 12:36:30.817"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.822" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:30.819" endtime="20201103 12:36:30.823"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:30.824" endtime="20201103 12:36:30.828"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.789" endtime="20201103 12:36:30.830"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.787" endtime="20201103 12:36:30.831"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:30.835" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:36:30.832" endtime="20201103 12:36:30.836"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.844" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:30.842" endtime="20201103 12:36:30.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.848" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:30.846" endtime="20201103 12:36:30.849"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:30.837" endtime="20201103 12:36:30.850"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.858" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:30.856" endtime="20201103 12:36:30.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.862" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:30.861" endtime="20201103 12:36:30.863"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:30.852" endtime="20201103 12:36:30.864"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.868" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:30.867" endtime="20201103 12:36:30.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:30.870" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:36:30.869" endtime="20201103 12:36:30.871"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:30.864" endtime="20201103 12:36:30.874"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:30.885" endtime="20201103 12:36:31.183"></status>
</kw>
<msg timestamp="20201103 12:36:31.186" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062619417, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162627528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:30.884" endtime="20201103 12:36:31.186"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.194" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062619417, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162627528, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:31.187" endtime="20201103 12:36:31.194"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.195" endtime="20201103 12:36:31.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:30.877" endtime="20201103 12:36:31.197"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:30.874" endtime="20201103 12:36:31.198"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:31.202" level="INFO">${FILTERED} = [{'time': 1.162627528, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000811099999996, 'source_diff': 0.10000811099999996}, {'time': 1.262633847, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:31.198" endtime="20201103 12:36:31.202"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:31.215" level="INFO">${RESULT} = {'diff': [0.10000811099999996, 0.1000057780000001, 0.10000679200000007, 0.10000674999999992, 0.10000680500000003, 0.10000675000000014, 0.10000677800000002, 0.10000676399999997, 0.10000677800000002, 0....</msg>
<status status="PASS" starttime="20201103 12:36:31.203" endtime="20201103 12:36:31.215"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.219" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:31.218" endtime="20201103 12:36:31.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.222" level="INFO">VALUE: [0.10000811099999996, 0.1000057780000001, 0.10000679200000007, 0.10000674999999992, 0.10000680500000003, 0.10000675000000014, 0.10000677800000002, 0.10000676399999997, 0.10000677800000002, 0.10000679200000007, 0.10000676300000011, 0.10000681999999994, 0.10000677700000038, 0.10000677800000002, 0.10000677699999994, 0.10000677800000002, 0.10000677800000002, 0.10000677800000002, 0.10000677800000002, 0.1000067910000002, 0.10000677800000002, 0.10000676299999967, 0.10000677800000002, 0.1000067910000002, 0.10000677800000002, 0.10000676400000019, 0.10000679199999984, 0.10000679200000029, 0.10000674999999992, 0.10000677800000002, 0.1000067910000002, 0.1000067919999994, 0.10000677800000002, 0.10000676400000064, 0.10000680600000056, 0.10000675000000037, 0.10000679200000029, 0.10000677699999994, 0.10000677800000002, 0.10000677800000002, 0.10000677800000002, 0.10000679200000029, 0.10000677699999994, 0.1000067919999994, 0.10000679200000029, 0.10000676399999975, 0.10000677800000002, 0.1000067910000002, 0.10000677800000002, 0.10000677699999994]</msg>
<status status="PASS" starttime="20201103 12:36:31.220" endtime="20201103 12:36:31.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.216" endtime="20201103 12:36:31.223"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.225" endtime="20201103 12:36:31.227"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:31.229" endtime="20201103 12:36:31.248"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.227" endtime="20201103 12:36:31.249"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.224" endtime="20201103 12:36:31.249"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:23.786" endtime="20201103 12:36:31.250"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:23.716" endtime="20201103 12:36:31.250" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:31.257" endtime="20201103 12:36:31.276"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.255" endtime="20201103 12:36:31.277"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.291" endtime="20201103 12:36:31.305"></status>
</kw>
<msg timestamp="20201103 12:36:31.306" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.290" endtime="20201103 12:36:31.306"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.309" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.307" endtime="20201103 12:36:31.309"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:31.312" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:31.310" endtime="20201103 12:36:31.312"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:31.287" endtime="20201103 12:36:31.313"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:31.284" endtime="20201103 12:36:31.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.282" endtime="20201103 12:36:31.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:31.317" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:31.317" endtime="20201103 12:36:31.318"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.314" endtime="20201103 12:36:31.318"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.282" endtime="20201103 12:36:31.318"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.281" endtime="20201103 12:36:31.318"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.319" endtime="20201103 12:36:31.321"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.279" endtime="20201103 12:36:31.321"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.278" endtime="20201103 12:36:31.322"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.254" endtime="20201103 12:36:31.322"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:31.330" endtime="20201103 12:36:38.352"></status>
</kw>
<msg timestamp="20201103 12:36:38.353" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:31.329" endtime="20201103 12:36:38.353"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.358" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:38.355" endtime="20201103 12:36:38.359"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.361" endtime="20201103 12:36:38.364"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.326" endtime="20201103 12:36:38.365"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.324" endtime="20201103 12:36:38.366"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:38.371" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:36:38.368" endtime="20201103 12:36:38.372"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.380" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:38.378" endtime="20201103 12:36:38.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.385" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:38.383" endtime="20201103 12:36:38.385"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.373" endtime="20201103 12:36:38.386"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.390" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:38.389" endtime="20201103 12:36:38.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.392" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:38.391" endtime="20201103 12:36:38.392"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.386" endtime="20201103 12:36:38.393"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.398" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:38.396" endtime="20201103 12:36:38.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.400" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:36:38.399" endtime="20201103 12:36:38.400"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.393" endtime="20201103 12:36:38.401"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.407" endtime="20201103 12:36:38.703"></status>
</kw>
<msg timestamp="20201103 12:36:38.706" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064206556, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164212653, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:38.406" endtime="20201103 12:36:38.706"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.713" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064206556, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164212653, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:38.707" endtime="20201103 12:36:38.714"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.715" endtime="20201103 12:36:38.716"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.403" endtime="20201103 12:36:38.717"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.402" endtime="20201103 12:36:38.717"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:38.721" level="INFO">${FILTERED} = [{'time': 1.164212653, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000609700000007, 'source_diff': 0.10000609700000007}, {'time': 1.264219958, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:38.718" endtime="20201103 12:36:38.721"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:38.736" level="INFO">${RESULT} = {'diff': [0.10000609700000007, 0.10000676399999997, 0.10000679200000007, 0.10000675000000014, 0.10000677800000002, 0.10000674999999992, 0.10000677800000002, 0.10000676300000011, 0.10000676399999997, 0...</msg>
<status status="PASS" starttime="20201103 12:36:38.722" endtime="20201103 12:36:38.736"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.740" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:38.739" endtime="20201103 12:36:38.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.743" level="INFO">VALUE: [0.10000609700000007, 0.10000676399999997, 0.10000679200000007, 0.10000675000000014, 0.10000677800000002, 0.10000674999999992, 0.10000677800000002, 0.10000676300000011, 0.10000676399999997, 0.10000677700000016, 0.10000676399999975, 0.10000677699999994, 0.10000680600000011, 0.1000067360000001, 0.10000676400000019, 0.10000676399999975, 0.10000677799999957, 0.10000676400000019, 0.10000677800000002, 0.10000676400000019, 0.10000677800000002, 0.10000684699999995, 0.10000676400000019, 0.10000677699999994, 0.10000676399999975, 0.10000677700000038, 0.10000676399999975, 0.10000676400000019, 0.10000677800000002, 0.10000676400000019, 0.10000677800000002, 0.10000676399999975, 0.1000067919999994, 0.1000067910000002, 0.10000680500000048, 0.10000677800000002, 0.10000679099999932, 0.10000679200000029, 0.10000677800000002, 0.10000677699999994, 0.10000681999999994, 0.10000676399999975, 0.1000067910000002, 0.10000677800000002, 0.10000684699999951, 0.1000067919999994, 0.10000676400000064, 0.10000677699999994, 0.10000679200000029, 0.10000679200000029]</msg>
<status status="PASS" starttime="20201103 12:36:38.741" endtime="20201103 12:36:38.743"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.737" endtime="20201103 12:36:38.744"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.746" endtime="20201103 12:36:38.747"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:38.749" endtime="20201103 12:36:38.769"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.748" endtime="20201103 12:36:38.769"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.744" endtime="20201103 12:36:38.770"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:31.323" endtime="20201103 12:36:38.770"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:31.252" endtime="20201103 12:36:38.771" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:38.777" endtime="20201103 12:36:38.796"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.775" endtime="20201103 12:36:38.797"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.810" endtime="20201103 12:36:38.824"></status>
</kw>
<msg timestamp="20201103 12:36:38.825" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:38.809" endtime="20201103 12:36:38.825"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.827" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:38.826" endtime="20201103 12:36:38.828"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:38.830" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:38.828" endtime="20201103 12:36:38.831"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:38.806" endtime="20201103 12:36:38.831"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:38.803" endtime="20201103 12:36:38.832"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.802" endtime="20201103 12:36:38.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:38.836" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:38.835" endtime="20201103 12:36:38.836"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.833" endtime="20201103 12:36:38.837"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.801" endtime="20201103 12:36:38.837"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.801" endtime="20201103 12:36:38.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.838" endtime="20201103 12:36:38.839"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.799" endtime="20201103 12:36:38.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.797" endtime="20201103 12:36:38.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.774" endtime="20201103 12:36:38.840"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:38.849" endtime="20201103 12:36:45.871"></status>
</kw>
<msg timestamp="20201103 12:36:45.872" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:38.847" endtime="20201103 12:36:45.872"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.877" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:45.874" endtime="20201103 12:36:45.877"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:45.879" endtime="20201103 12:36:45.882"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.844" endtime="20201103 12:36:45.883"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.842" endtime="20201103 12:36:45.884"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:45.889" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-interval': 20000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:36:45.886" endtime="20201103 12:36:45.890"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.897" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:45.895" endtime="20201103 12:36:45.898"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.902" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:36:45.900" endtime="20201103 12:36:45.903"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.891" endtime="20201103 12:36:45.904"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.911" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:36:45.909" endtime="20201103 12:36:45.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.916" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:36:45.914" endtime="20201103 12:36:45.916"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.905" endtime="20201103 12:36:45.917"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.925" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:36:45.923" endtime="20201103 12:36:45.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:45.932" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:36:45.930" endtime="20201103 12:36:45.933"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.919" endtime="20201103 12:36:45.934"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:45.948" endtime="20201103 12:36:46.246"></status>
</kw>
<msg timestamp="20201103 12:36:46.249" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062406972, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162414111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:45.944" endtime="20201103 12:36:46.249"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.257" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062406972, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162414111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:36:46.250" endtime="20201103 12:36:46.257"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.258" endtime="20201103 12:36:46.259"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.938" endtime="20201103 12:36:46.260"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:45.935" endtime="20201103 12:36:46.260"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:36:46.264" level="INFO">${FILTERED} = [{'time': 1.162414111, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000713899999991, 'source_diff': 0.10000713899999991}, {'time': 1.262422444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:36:46.261" endtime="20201103 12:36:46.264"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:36:46.277" level="INFO">${RESULT} = {'diff': [0.10000713899999991, 0.10000779100000012, 0.10000679200000007, 0.10000679200000007, 0.10000680500000003, 0.10000677800000002, 0.10000680599999989, 0.10000680500000003, 0.10000677800000002, 0...</msg>
<status status="PASS" starttime="20201103 12:36:46.265" endtime="20201103 12:36:46.278"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.281" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:36:46.280" endtime="20201103 12:36:46.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:46.284" level="INFO">VALUE: [0.10000713899999991, 0.10000779100000012, 0.10000679200000007, 0.10000679200000007, 0.10000680500000003, 0.10000677800000002, 0.10000680599999989, 0.10000680500000003, 0.10000677800000002, 0.10000683399999999, 0.10000677800000002, 0.10000677800000002, 0.10000681999999994, 0.10000679199999984, 0.10000677699999994, 0.10000684699999995, 0.10000680599999967, 0.1000067910000002, 0.10000680600000011, 0.10000680600000011, 0.10000679199999984, 0.1000067910000002, 0.10000680599999967, 0.10000680599999967, 0.10000683300000013, 0.10000676300000011, 0.10000679199999984, 0.10000680599999967, 0.10000680500000003, 0.10000679199999984, 0.10000681999999994, 0.1000067919999994, 0.10000680499999959, 0.1000067919999994, 0.10000683400000021, 0.10000677800000002, 0.1000067910000002, 0.10000680599999967, 0.10000683400000021, 0.10000677800000002, 0.1000067910000002, 0.10000680600000056, 0.1000068470000004, 0.10000681900000075, 0.1000067910000002, 0.10000681899999986, 0.10000679200000029, 0.10000680600000056, 0.10000680500000048, 0.10000681899999986]</msg>
<status status="PASS" starttime="20201103 12:36:46.282" endtime="20201103 12:36:46.284"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.278" endtime="20201103 12:36:46.285"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:46.287" endtime="20201103 12:36:46.288"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:46.290" endtime="20201103 12:36:46.310"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.289" endtime="20201103 12:36:46.310"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:46.285" endtime="20201103 12:36:46.311"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:38.841" endtime="20201103 12:36:46.311"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:38.772" endtime="20201103 12:36:46.312" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:35:59.483" endtime="20201103 12:36:46.324"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f767zi</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:35:57.325" endtime="20201103 12:36:46.357"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f767zi</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
