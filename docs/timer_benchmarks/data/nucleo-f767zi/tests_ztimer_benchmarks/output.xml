<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:25:35.969" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:36.568" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:36.576" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:37.762" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:36.566" endtime="20201103 12:25:37.763"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:37.766" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:37.764" endtime="20201103 12:25:37.766"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.565" endtime="20201103 12:25:37.767"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:37.769" endtime="20201103 12:25:37.955"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.767" endtime="20201103 12:25:37.955"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:37.968" endtime="20201103 12:25:37.983"></status>
</kw>
<msg timestamp="20201103 12:25:37.984" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:37.967" endtime="20201103 12:25:37.984"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:37.987" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:37.985" endtime="20201103 12:25:37.987"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:37.990" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:37.988" endtime="20201103 12:25:37.990"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:37.964" endtime="20201103 12:25:37.991"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:37.962" endtime="20201103 12:25:37.991"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.961" endtime="20201103 12:25:37.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:37.996" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:37.995" endtime="20201103 12:25:37.996"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.993" endtime="20201103 12:25:37.996"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.960" endtime="20201103 12:25:37.997"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.959" endtime="20201103 12:25:37.997"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:37.998" endtime="20201103 12:25:37.999"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.958" endtime="20201103 12:25:38.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:38.001" endtime="20201103 12:25:38.002"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:37.956" endtime="20201103 12:25:38.003"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:36.563" endtime="20201103 12:25:38.003"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:38.009" endtime="20201103 12:25:38.032"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.008" endtime="20201103 12:25:38.032"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:38.058" endtime="20201103 12:25:38.071"></status>
</kw>
<msg timestamp="20201103 12:25:38.072" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:38.056" endtime="20201103 12:25:38.072"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.074" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:38.073" endtime="20201103 12:25:38.074"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.077" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:38.075" endtime="20201103 12:25:38.077"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:38.050" endtime="20201103 12:25:38.078"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:38.047" endtime="20201103 12:25:38.079"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.045" endtime="20201103 12:25:38.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:38.083" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:38.082" endtime="20201103 12:25:38.083"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.080" endtime="20201103 12:25:38.083"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.042" endtime="20201103 12:25:38.083"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.040" endtime="20201103 12:25:38.083"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:38.084" endtime="20201103 12:25:38.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.036" endtime="20201103 12:25:38.086"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.033" endtime="20201103 12:25:38.087"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.006" endtime="20201103 12:25:38.087"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:38.094" endtime="20201103 12:25:38.103"></status>
</kw>
<msg timestamp="20201103 12:25:38.104" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:38.092" endtime="20201103 12:25:38.104"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.106" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:38.105" endtime="20201103 12:25:38.106"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:38.107" endtime="20201103 12:25:38.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.089" endtime="20201103 12:25:38.109"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.088" endtime="20201103 12:25:38.110"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.114" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:25:38.113" endtime="20201103 12:25:38.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.116" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:25:38.115" endtime="20201103 12:25:38.116"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.110" endtime="20201103 12:25:38.116"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:38.003" endtime="20201103 12:25:38.117" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:36.098" endtime="20201103 12:25:38.119"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:25:38.168" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:25:38.176" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:25:39.475" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:25:38.167" endtime="20201103 12:25:39.475"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.478" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:25:39.476" endtime="20201103 12:25:39.478"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.166" endtime="20201103 12:25:39.479"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:39.481" endtime="20201103 12:25:39.705"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.479" endtime="20201103 12:25:39.705"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.717" endtime="20201103 12:25:39.732"></status>
</kw>
<msg timestamp="20201103 12:25:39.732" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.716" endtime="20201103 12:25:39.732"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.735" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.733" endtime="20201103 12:25:39.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.738" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:39.736" endtime="20201103 12:25:39.738"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.713" endtime="20201103 12:25:39.739"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.711" endtime="20201103 12:25:39.739"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.710" endtime="20201103 12:25:39.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:39.743" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:39.742" endtime="20201103 12:25:39.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.740" endtime="20201103 12:25:39.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.709" endtime="20201103 12:25:39.744"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.709" endtime="20201103 12:25:39.744"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.745" endtime="20201103 12:25:39.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.707" endtime="20201103 12:25:39.747"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.747" endtime="20201103 12:25:39.749"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.706" endtime="20201103 12:25:39.750"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:38.164" endtime="20201103 12:25:39.750"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:39.756" endtime="20201103 12:25:39.776"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.755" endtime="20201103 12:25:39.776"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.789" endtime="20201103 12:25:39.803"></status>
</kw>
<msg timestamp="20201103 12:25:39.803" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.788" endtime="20201103 12:25:39.804"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.806" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.805" endtime="20201103 12:25:39.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:39.810" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:39.807" endtime="20201103 12:25:39.811"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.785" endtime="20201103 12:25:39.812"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:39.783" endtime="20201103 12:25:39.812"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.782" endtime="20201103 12:25:39.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:39.817" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:39.816" endtime="20201103 12:25:39.817"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.814" endtime="20201103 12:25:39.817"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.781" endtime="20201103 12:25:39.817"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.780" endtime="20201103 12:25:39.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.818" endtime="20201103 12:25:39.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.779" endtime="20201103 12:25:39.821"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.777" endtime="20201103 12:25:39.822"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.753" endtime="20201103 12:25:39.822"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:39.833" endtime="20201103 12:25:46.857"></status>
</kw>
<msg timestamp="20201103 12:25:46.858" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:39.831" endtime="20201103 12:25:46.859"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.865" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:46.861" endtime="20201103 12:25:46.865"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:46.867" endtime="20201103 12:25:46.870"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.828" endtime="20201103 12:25:46.871"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.825" endtime="20201103 12:25:46.872"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:46.877" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 0}</msg>
<status status="PASS" starttime="20201103 12:25:46.874" endtime="20201103 12:25:46.878"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.886" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:46.884" endtime="20201103 12:25:46.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.890" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:46.888" endtime="20201103 12:25:46.891"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.879" endtime="20201103 12:25:46.892"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.899" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:46.897" endtime="20201103 12:25:46.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.904" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:46.902" endtime="20201103 12:25:46.904"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.893" endtime="20201103 12:25:46.905"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.913" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:46.911" endtime="20201103 12:25:46.914"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:46.918" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:25:46.916" endtime="20201103 12:25:46.919"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.907" endtime="20201103 12:25:46.920"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:46.933" endtime="20201103 12:25:47.239"></status>
</kw>
<msg timestamp="20201103 12:25:47.242" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068494222, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168501264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:46.930" endtime="20201103 12:25:47.242"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.249" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.068494222, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.168501264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:47.243" endtime="20201103 12:25:47.250"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.251" endtime="20201103 12:25:47.252"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.925" endtime="20201103 12:25:47.253"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:46.921" endtime="20201103 12:25:47.253"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:47.257" level="INFO">${FILTERED} = [{'time': 1.168501264, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1000070420000001, 'source_diff': 0.1000070420000001}, {'time': 1.268508486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.1...</msg>
<status status="PASS" starttime="20201103 12:25:47.254" endtime="20201103 12:25:47.257"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:47.270" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:25:47.258" endtime="20201103 12:25:47.270"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.275" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:47.273" endtime="20201103 12:25:47.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.277" level="INFO">VALUE: [0.1000070420000001, 0.10000674999999992, 0.10000676399999997, 0.10000679199999984, 0.10000684700000018, 0.10000674999999992, 0.10000679200000007, 0.10000680500000003, 0.10000679099999998, 0.10000680599999989, 0.10000679200000029, 0.10000680500000003, 0.10000679199999984, 0.10000680600000011, 0.10000679200000029, 0.10000680500000003, 0.10000679199999984, 0.10000680600000011, 0.10000679099999976, 0.10000680500000003, 0.10000680600000011, 0.10000679200000029, 0.10000680500000003, 0.10000680500000003, 0.10000679199999984, 0.10000680600000011, 0.10000679099999976, 0.10000679199999984, 0.10000680600000011, 0.10000680600000011, 0.10000679099999932, 0.10000683300000013, 0.10000677800000002, 0.10000680599999967, 0.10000679099999932, 0.10000681899999986, 0.1000067919999994, 0.10000680599999967, 0.10000680499999959, 0.1000067919999994, 0.10000680599999967, 0.10000684799999959, 0.10000677800000002, 0.10000679099999932, 0.10000680599999967, 0.10000680599999967, 0.10000679099999932, 0.10000680499999959, 0.10000680599999967, 0.10000681999999994]</msg>
<status status="PASS" starttime="20201103 12:25:47.276" endtime="20201103 12:25:47.278"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.271" endtime="20201103 12:25:47.278"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.280" endtime="20201103 12:25:47.282"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:47.284" endtime="20201103 12:25:47.303"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.282" endtime="20201103 12:25:47.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.279" endtime="20201103 12:25:47.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:39.823" endtime="20201103 12:25:47.304"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:39.750" endtime="20201103 12:25:47.305" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:47.311" endtime="20201103 12:25:47.331"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.310" endtime="20201103 12:25:47.331"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.344" endtime="20201103 12:25:47.357"></status>
</kw>
<msg timestamp="20201103 12:25:47.358" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.343" endtime="20201103 12:25:47.358"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.360" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.359" endtime="20201103 12:25:47.361"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:47.363" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:47.361" endtime="20201103 12:25:47.364"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:47.340" endtime="20201103 12:25:47.364"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:47.338" endtime="20201103 12:25:47.365"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.336" endtime="20201103 12:25:47.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:47.369" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:47.368" endtime="20201103 12:25:47.369"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.366" endtime="20201103 12:25:47.370"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.335" endtime="20201103 12:25:47.370"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.335" endtime="20201103 12:25:47.370"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.371" endtime="20201103 12:25:47.372"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.333" endtime="20201103 12:25:47.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.332" endtime="20201103 12:25:47.373"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.308" endtime="20201103 12:25:47.373"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:47.382" endtime="20201103 12:25:54.404"></status>
</kw>
<msg timestamp="20201103 12:25:54.405" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:47.381" endtime="20201103 12:25:54.405"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.410" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.407" endtime="20201103 12:25:54.411"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.413" endtime="20201103 12:25:54.416"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.378" endtime="20201103 12:25:54.417"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.375" endtime="20201103 12:25:54.418"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:54.423" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 5}</msg>
<status status="PASS" starttime="20201103 12:25:54.419" endtime="20201103 12:25:54.423"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.431" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:54.429" endtime="20201103 12:25:54.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.435" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:25:54.433" endtime="20201103 12:25:54.436"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.425" endtime="20201103 12:25:54.437"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.445" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:25:54.443" endtime="20201103 12:25:54.446"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.450" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:25:54.448" endtime="20201103 12:25:54.451"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.438" endtime="20201103 12:25:54.452"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.459" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:25:54.457" endtime="20201103 12:25:54.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.464" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:25:54.462" endtime="20201103 12:25:54.464"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.453" endtime="20201103 12:25:54.465"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.476" endtime="20201103 12:25:54.774"></status>
</kw>
<msg timestamp="20201103 12:25:54.777" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061471153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161478097, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:54.475" endtime="20201103 12:25:54.777"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.785" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061471153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161478097, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:25:54.778" endtime="20201103 12:25:54.785"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.786" endtime="20201103 12:25:54.787"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.470" endtime="20201103 12:25:54.788"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.466" endtime="20201103 12:25:54.788"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:25:54.792" level="INFO">${FILTERED} = [{'time': 1.161478097, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000694399999999, 'source_diff': 0.10000694399999999}, {'time': 1.261484444, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:25:54.789" endtime="20201103 12:25:54.793"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:25:54.807" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:25:54.793" endtime="20201103 12:25:54.807"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.811" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:25:54.810" endtime="20201103 12:25:54.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.813" level="INFO">VALUE: [0.10000694399999999, 0.10000580499999989, 0.10000679200000007, 0.10000680600000011, 0.10000677699999994, 0.10000680600000011, 0.10000676399999997, 0.10000679200000007, 0.10000679200000007, 0.10000680500000025, 0.10000677800000002, 0.10000679199999984, 0.1000067910000002, 0.10000680500000003, 0.10000677800000002, 0.10000679099999976, 0.10000679199999984, 0.10000679199999984, 0.1000067910000002, 0.10000679199999984, 0.10000679199999984, 0.10000684699999995, 0.10000679199999984, 0.10000679199999984, 0.1000067910000002, 0.10000681899999986, 0.10000679199999984, 0.10000677800000002, 0.1000067910000002, 0.10000679199999984, 0.1000067919999994, 0.10000680499999959, 0.10000677800000002, 0.10000680600000056, 0.1000068470000004, 0.10000680599999967, 0.10000677800000002, 0.10000680500000048, 0.10000680500000048, 0.10000677800000002, 0.10000679099999932, 0.1000067910000002, 0.10000677800000002, 0.10000680599999967, 0.10000684699999951, 0.10000679200000029, 0.10000681999999994, 0.10000683400000021, 0.10000687500000005, 0.1000067919999994]</msg>
<status status="PASS" starttime="20201103 12:25:54.812" endtime="20201103 12:25:54.814"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.807" endtime="20201103 12:25:54.814"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.816" endtime="20201103 12:25:54.817"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:54.820" endtime="20201103 12:25:54.839"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.818" endtime="20201103 12:25:54.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.815" endtime="20201103 12:25:54.840"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:47.374" endtime="20201103 12:25:54.840"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:47.306" endtime="20201103 12:25:54.841" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:25:54.848" endtime="20201103 12:25:54.867"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.846" endtime="20201103 12:25:54.868"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.881" endtime="20201103 12:25:54.894"></status>
</kw>
<msg timestamp="20201103 12:25:54.894" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.879" endtime="20201103 12:25:54.894"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.897" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.895" endtime="20201103 12:25:54.897"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:25:54.900" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:25:54.898" endtime="20201103 12:25:54.900"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.876" endtime="20201103 12:25:54.901"></status>
</kw>
<status status="FAIL" starttime="20201103 12:25:54.874" endtime="20201103 12:25:54.901"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.873" endtime="20201103 12:25:54.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:25:54.906" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:25:54.904" endtime="20201103 12:25:54.906"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.902" endtime="20201103 12:25:54.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.872" endtime="20201103 12:25:54.907"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.871" endtime="20201103 12:25:54.907"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.908" endtime="20201103 12:25:54.909"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.870" endtime="20201103 12:25:54.910"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.868" endtime="20201103 12:25:54.910"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.845" endtime="20201103 12:25:54.911"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:25:54.919" endtime="20201103 12:26:01.942"></status>
</kw>
<msg timestamp="20201103 12:26:01.943" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:25:54.917" endtime="20201103 12:26:01.943"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.948" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:01.945" endtime="20201103 12:26:01.949"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:01.950" endtime="20201103 12:26:01.954"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.915" endtime="20201103 12:26:01.955"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.913" endtime="20201103 12:26:01.956"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:01.961" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 10}</msg>
<status status="PASS" starttime="20201103 12:26:01.957" endtime="20201103 12:26:01.961"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.970" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:01.968" endtime="20201103 12:26:01.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.974" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:01.972" endtime="20201103 12:26:01.975"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.962" endtime="20201103 12:26:01.976"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.984" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:01.982" endtime="20201103 12:26:01.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.988" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:01.986" endtime="20201103 12:26:01.989"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.977" endtime="20201103 12:26:01.989"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.993" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:01.992" endtime="20201103 12:26:01.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:01.995" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:26:01.994" endtime="20201103 12:26:01.996"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.990" endtime="20201103 12:26:01.996"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.003" endtime="20201103 12:26:02.301"></status>
</kw>
<msg timestamp="20201103 12:26:02.304" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061477167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161484125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:02.001" endtime="20201103 12:26:02.304"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.312" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061477167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161484125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:02.305" endtime="20201103 12:26:02.312"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.313" endtime="20201103 12:26:02.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.998" endtime="20201103 12:26:02.315"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:01.997" endtime="20201103 12:26:02.316"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:02.320" level="INFO">${FILTERED} = [{'time': 1.161484125, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000695800000003, 'source_diff': 0.10000695800000003}, {'time': 1.261490472, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:02.317" endtime="20201103 12:26:02.320"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:02.333" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:26:02.321" endtime="20201103 12:26:02.333"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.337" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:02.336" endtime="20201103 12:26:02.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.340" level="INFO">VALUE: [0.10000695800000003, 0.10000580499999989, 0.10000677800000002, 0.10000682000000016, 0.10000679200000007, 0.10000677800000002, 0.10000680600000011, 0.10000679200000007, 0.10000680500000003, 0.10000679199999984, 0.10000677800000002, 0.10000686100000022, 0.10000679200000029, 0.10000680600000011, 0.10000680500000003, 0.10000677800000002, 0.10000679199999984, 0.10000681899999986, 0.10000683300000013, 0.10000680599999967, 0.10000679199999984, 0.10000684699999995, 0.10000676300000011, 0.10000679199999984, 0.10000683400000021, 0.10000676400000019, 0.10000680599999967, 0.10000679199999984, 0.10000686100000022, 0.10000680500000003, 0.10000680600000056, 0.10000679200000029, 0.10000686100000067, 0.10000681899999986, 0.10000679200000029, 0.1000067919999994, 0.10000686099999978, 0.10000681999999994, 0.10000681999999994, 0.10000679200000029, 0.10000684699999951, 0.10000679200000029, 0.10000680600000056, 0.1000067910000002, 0.10000676399999975, 0.10000680599999967, 0.1000067919999994, 0.10000680499999959, 0.10000680599999967, 0.10000680599999967]</msg>
<status status="PASS" starttime="20201103 12:26:02.339" endtime="20201103 12:26:02.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.334" endtime="20201103 12:26:02.341"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.343" endtime="20201103 12:26:02.345"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:02.347" endtime="20201103 12:26:02.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.346" endtime="20201103 12:26:02.367"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.341" endtime="20201103 12:26:02.368"></status>
</kw>
<status status="PASS" starttime="20201103 12:25:54.911" endtime="20201103 12:26:02.368"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:25:54.842" endtime="20201103 12:26:02.368" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:02.375" endtime="20201103 12:26:02.394"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.374" endtime="20201103 12:26:02.395"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.408" endtime="20201103 12:26:02.423"></status>
</kw>
<msg timestamp="20201103 12:26:02.423" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.407" endtime="20201103 12:26:02.424"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.426" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.424" endtime="20201103 12:26:02.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:02.429" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:02.427" endtime="20201103 12:26:02.429"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:02.404" endtime="20201103 12:26:02.430"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:02.402" endtime="20201103 12:26:02.431"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.401" endtime="20201103 12:26:02.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:02.435" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:02.434" endtime="20201103 12:26:02.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.432" endtime="20201103 12:26:02.435"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.400" endtime="20201103 12:26:02.436"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.399" endtime="20201103 12:26:02.436"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.436" endtime="20201103 12:26:02.438"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.398" endtime="20201103 12:26:02.439"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.396" endtime="20201103 12:26:02.439"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.372" endtime="20201103 12:26:02.439"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:02.448" endtime="20201103 12:26:09.473"></status>
</kw>
<msg timestamp="20201103 12:26:09.474" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:02.446" endtime="20201103 12:26:09.475"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.483" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:09.478" endtime="20201103 12:26:09.484"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.487" endtime="20201103 12:26:09.493"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.443" endtime="20201103 12:26:09.496"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.442" endtime="20201103 12:26:09.497"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:09.518" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 15}</msg>
<status status="PASS" starttime="20201103 12:26:09.499" endtime="20201103 12:26:09.520"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.530" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:09.528" endtime="20201103 12:26:09.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.534" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:09.532" endtime="20201103 12:26:09.535"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.523" endtime="20201103 12:26:09.536"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.544" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:09.542" endtime="20201103 12:26:09.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.548" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:09.546" endtime="20201103 12:26:09.549"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.537" endtime="20201103 12:26:09.550"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.558" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:09.556" endtime="20201103 12:26:09.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.562" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:26:09.560" endtime="20201103 12:26:09.563"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.551" endtime="20201103 12:26:09.564"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.571" endtime="20201103 12:26:09.878"></status>
</kw>
<msg timestamp="20201103 12:26:09.881" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063109194, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163116153, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:09.569" endtime="20201103 12:26:09.881"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.889" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.063109194, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.163116153, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:09.882" endtime="20201103 12:26:09.889"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.890" endtime="20201103 12:26:09.891"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.566" endtime="20201103 12:26:09.892"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.565" endtime="20201103 12:26:09.892"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:09.896" level="INFO">${FILTERED} = [{'time': 1.163116153, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000695900000012, 'source_diff': 0.10000695900000012}, {'time': 1.263122486, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:09.893" endtime="20201103 12:26:09.896"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:09.909" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:26:09.897" endtime="20201103 12:26:09.909"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.913" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:09.912" endtime="20201103 12:26:09.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:09.915" level="INFO">VALUE: [0.10000695900000012, 0.10000579200000015, 0.10000680499999981, 0.10000681900000008, 0.10000676399999997, 0.10000681900000008, 0.10000677800000002, 0.10000682000000016, 0.10000680599999989, 0.10000679099999976, 0.10000679200000029, 0.10000681999999994, 0.10000683400000021, 0.10000680500000003, 0.10000680600000011, 0.10000680600000011, 0.10000679199999984, 0.10000680500000003, 0.10000680600000011, 0.10000679200000029, 0.10000680500000003, 0.10000681899999986, 0.10000687500000005, 0.10000680600000011, 0.10000680600000011, 0.10000679099999976, 0.10000680500000003, 0.10000680600000011, 0.10000679199999984, 0.10000677800000046, 0.10000680500000048, 0.10000680600000056, 0.10000681999999994, 0.1000067919999994, 0.10000680499999959, 0.10000680599999967, 0.10000681999999994, 0.10000680599999967, 0.10000681900000075, 0.10000677699999994, 0.10000680599999967, 0.10000683399999932, 0.10000677800000002, 0.10000681899999986, 0.10000680500000048, 0.10000680600000056, 0.10000679200000029, 0.10000681899999986, 0.1000067910000002, 0.10000680600000056]</msg>
<status status="PASS" starttime="20201103 12:26:09.914" endtime="20201103 12:26:09.926"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.910" endtime="20201103 12:26:09.926"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.929" endtime="20201103 12:26:09.930"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:09.932" endtime="20201103 12:26:09.951"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.931" endtime="20201103 12:26:09.952"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.927" endtime="20201103 12:26:09.952"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:02.440" endtime="20201103 12:26:09.953"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:02.370" endtime="20201103 12:26:09.953" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:09.960" endtime="20201103 12:26:09.979"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.958" endtime="20201103 12:26:09.980"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:09.993" endtime="20201103 12:26:10.007"></status>
</kw>
<msg timestamp="20201103 12:26:10.008" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:09.992" endtime="20201103 12:26:10.008"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.011" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.009" endtime="20201103 12:26:10.011"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:10.014" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:10.012" endtime="20201103 12:26:10.015"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:09.988" endtime="20201103 12:26:10.015"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:09.986" endtime="20201103 12:26:10.016"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.985" endtime="20201103 12:26:10.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:10.020" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:10.019" endtime="20201103 12:26:10.020"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.017" endtime="20201103 12:26:10.020"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.984" endtime="20201103 12:26:10.021"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.983" endtime="20201103 12:26:10.021"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.022" endtime="20201103 12:26:10.023"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.982" endtime="20201103 12:26:10.024"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.980" endtime="20201103 12:26:10.024"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:09.957" endtime="20201103 12:26:10.024"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:10.032" endtime="20201103 12:26:17.054"></status>
</kw>
<msg timestamp="20201103 12:26:17.055" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:10.031" endtime="20201103 12:26:17.056"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.060" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:17.057" endtime="20201103 12:26:17.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.063" endtime="20201103 12:26:17.067"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.028" endtime="20201103 12:26:17.068"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.026" endtime="20201103 12:26:17.069"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:17.074" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 20}</msg>
<status status="PASS" starttime="20201103 12:26:17.070" endtime="20201103 12:26:17.074"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.082" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:17.080" endtime="20201103 12:26:17.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.086" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:17.084" endtime="20201103 12:26:17.087"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.075" endtime="20201103 12:26:17.088"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.096" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:17.094" endtime="20201103 12:26:17.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.100" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:17.098" endtime="20201103 12:26:17.101"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.089" endtime="20201103 12:26:17.102"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.110" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:17.107" endtime="20201103 12:26:17.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.116" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:26:17.112" endtime="20201103 12:26:17.116"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.103" endtime="20201103 12:26:17.117"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.131" endtime="20201103 12:26:17.434"></status>
</kw>
<msg timestamp="20201103 12:26:17.437" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062925528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162932458, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:17.128" endtime="20201103 12:26:17.437"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.445" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062925528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162932458, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:17.438" endtime="20201103 12:26:17.445"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.446" endtime="20201103 12:26:17.447"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.122" endtime="20201103 12:26:17.448"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.119" endtime="20201103 12:26:17.448"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:17.452" level="INFO">${FILTERED} = [{'time': 1.162932458, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000692999999994, 'source_diff': 0.10000692999999994}, {'time': 1.262938819, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:17.449" endtime="20201103 12:26:17.452"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:17.467" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:26:17.453" endtime="20201103 12:26:17.467"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.471" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:17.470" endtime="20201103 12:26:17.471"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.474" level="INFO">VALUE: [0.10000692999999994, 0.10000581899999994, 0.10000679200000007, 0.10000679200000007, 0.10000679099999998, 0.10000677800000002, 0.10000677700000016, 0.10000677800000002, 0.10000679199999984, 0.10000679099999998, 0.10000679200000029, 0.10000680600000011, 0.10000679099999976, 0.10000677800000002, 0.10000679200000029, 0.10000679099999976, 0.10000679200000029, 0.10000680600000011, 0.10000677699999994, 0.10000679199999984, 0.10000680600000011, 0.10000683300000013, 0.10000681899999986, 0.10000676400000019, 0.1000067910000002, 0.10000679199999984, 0.10000680600000011, 0.10000677699999994, 0.10000679199999984, 0.10000679199999984, 0.10000679099999932, 0.1000067919999994, 0.10000679200000029, 0.1000067910000002, 0.10000680599999967, 0.1000067919999994, 0.10000679099999932, 0.10000680499999959, 0.10000679200000029, 0.10000677800000002, 0.1000067919999994, 0.10000680599999967, 0.10000677800000002, 0.10000683300000013, 0.10000683300000013, 0.10000677800000002, 0.10000681899999986, 0.10000677800000002, 0.10000683400000021, 0.10000676399999975]</msg>
<status status="PASS" starttime="20201103 12:26:17.472" endtime="20201103 12:26:17.474"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.468" endtime="20201103 12:26:17.475"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.477" endtime="20201103 12:26:17.478"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:17.480" endtime="20201103 12:26:17.500"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.479" endtime="20201103 12:26:17.500"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.475" endtime="20201103 12:26:17.501"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:10.025" endtime="20201103 12:26:17.501"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:09.955" endtime="20201103 12:26:17.501" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:17.508" endtime="20201103 12:26:17.527"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.506" endtime="20201103 12:26:17.528"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.541" endtime="20201103 12:26:17.555"></status>
</kw>
<msg timestamp="20201103 12:26:17.556" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:17.540" endtime="20201103 12:26:17.556"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.558" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:17.557" endtime="20201103 12:26:17.559"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:26:17.561" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:26:17.559" endtime="20201103 12:26:17.562"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:17.537" endtime="20201103 12:26:17.562"></status>
</kw>
<status status="FAIL" starttime="20201103 12:26:17.534" endtime="20201103 12:26:17.563"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.533" endtime="20201103 12:26:17.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:26:17.567" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:26:17.566" endtime="20201103 12:26:17.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.564" endtime="20201103 12:26:17.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.532" endtime="20201103 12:26:17.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.532" endtime="20201103 12:26:17.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.568" endtime="20201103 12:26:17.570"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.530" endtime="20201103 12:26:17.570"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.528" endtime="20201103 12:26:17.571"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.505" endtime="20201103 12:26:17.571"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:17.580" endtime="20201103 12:26:24.602"></status>
</kw>
<msg timestamp="20201103 12:26:24.603" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:17.578" endtime="20201103 12:26:24.603"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.608" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:26:24.605" endtime="20201103 12:26:24.609"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:24.611" endtime="20201103 12:26:24.614"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.575" endtime="20201103 12:26:24.615"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.573" endtime="20201103 12:26:24.616"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:24.621" level="INFO">${RESULT} = {'bg-timer-interval': 20000, 'main-timer-interval': 100000, 'bg-timer-count': 25}</msg>
<status status="PASS" starttime="20201103 12:26:24.617" endtime="20201103 12:26:24.621"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.629" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:24.627" endtime="20201103 12:26:24.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.634" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:26:24.632" endtime="20201103 12:26:24.634"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.623" endtime="20201103 12:26:24.635"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.643" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:26:24.641" endtime="20201103 12:26:24.644"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.647" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:26:24.645" endtime="20201103 12:26:24.647"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.636" endtime="20201103 12:26:24.648"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.652" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:26:24.651" endtime="20201103 12:26:24.653"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.655" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:26:24.654" endtime="20201103 12:26:24.655"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.648" endtime="20201103 12:26:24.656"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:24.662" endtime="20201103 12:26:24.959"></status>
</kw>
<msg timestamp="20201103 12:26:24.962" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062300972, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162307917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:24.661" endtime="20201103 12:26:24.962"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.969" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062300972, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162307917, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:26:24.963" endtime="20201103 12:26:24.970"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:24.970" endtime="20201103 12:26:24.972"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.658" endtime="20201103 12:26:24.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.656" endtime="20201103 12:26:24.973"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:26:24.977" level="INFO">${FILTERED} = [{'time': 1.162307917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000694499999985, 'source_diff': 0.10000694499999985}, {'time': 1.262314264, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:26:24.974" endtime="20201103 12:26:24.977"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:26:24.990" level="INFO">${RESULT} = {'source': ['DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC', 'DUT_IC'...</msg>
<status status="PASS" starttime="20201103 12:26:24.978" endtime="20201103 12:26:24.990"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.996" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:26:24.994" endtime="20201103 12:26:24.997"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:26:24.999" level="INFO">VALUE: [0.10000694499999985, 0.10000580599999997, 0.10000680500000003, 0.10000677800000002, 0.10000679200000007, 0.10000680500000003, 0.10000679099999998, 0.10000679200000007, 0.10000681999999994, 0.10000677700000016, 0.10000680600000011, 0.10000680600000011, 0.10000679199999984, 0.1000067910000002, 0.10000680599999967, 0.10000679199999984, 0.10000680500000003, 0.10000680500000003, 0.10000680600000011, 0.10000677800000002, 0.10000680500000003, 0.10000679199999984, 0.10000679200000029, 0.10000684699999995, 0.10000676299999967, 0.10000679199999984, 0.10000681999999994, 0.10000677699999994, 0.10000680600000011, 0.10000680600000056, 0.10000679200000029, 0.10000680500000048, 0.10000680600000056, 0.10000679200000029, 0.10000680500000048, 0.1000067910000002, 0.10000683300000013, 0.10000676399999975, 0.10000679099999932, 0.10000683300000013, 0.10000676399999975, 0.10000680599999967, 0.10000680499999959, 0.10000679200000029, 0.10000687500000005, 0.10000681999999994, 0.1000067910000002, 0.10000680499999959, 0.10000680599999967, 0.10000679200000029]</msg>
<status status="PASS" starttime="20201103 12:26:24.998" endtime="20201103 12:26:25.000"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:24.991" endtime="20201103 12:26:25.001"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:26:25.004" endtime="20201103 12:26:25.006"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:26:25.009" endtime="20201103 12:26:25.029"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.007" endtime="20201103 12:26:25.029"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:25.002" endtime="20201103 12:26:25.030"></status>
</kw>
<status status="PASS" starttime="20201103 12:26:17.572" endtime="20201103 12:26:25.030"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:26:17.503" endtime="20201103 12:26:25.031" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:25:38.124" endtime="20201103 12:26:25.038"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f767zi</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:25:35.972" endtime="20201103 12:26:25.063"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f767zi</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
