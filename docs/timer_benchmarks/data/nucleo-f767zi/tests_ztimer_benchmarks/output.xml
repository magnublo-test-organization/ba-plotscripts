<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201103 12:36:55.146" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:55.722" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:55.734" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:56.962" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:55.720" endtime="20201103 12:36:56.964"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:56.970" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:56.966" endtime="20201103 12:36:56.970"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.718" endtime="20201103 12:36:56.972"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:56.976" endtime="20201103 12:36:57.215"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:56.973" endtime="20201103 12:36:57.217"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.233" endtime="20201103 12:36:57.248"></status>
</kw>
<msg timestamp="20201103 12:36:57.248" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.231" endtime="20201103 12:36:57.249"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.251" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.250" endtime="20201103 12:36:57.251"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.254" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:57.252" endtime="20201103 12:36:57.255"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:57.229" endtime="20201103 12:36:57.255"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:57.226" endtime="20201103 12:36:57.256"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.225" endtime="20201103 12:36:57.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:57.260" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:57.260" endtime="20201103 12:36:57.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.257" endtime="20201103 12:36:57.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.224" endtime="20201103 12:36:57.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.223" endtime="20201103 12:36:57.261"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.262" endtime="20201103 12:36:57.264"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.221" endtime="20201103 12:36:57.264"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.265" endtime="20201103 12:36:57.267"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.218" endtime="20201103 12:36:57.267"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:55.716" endtime="20201103 12:36:57.268"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:57.274" endtime="20201103 12:36:57.293"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.272" endtime="20201103 12:36:57.294"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.309" endtime="20201103 12:36:57.323"></status>
</kw>
<msg timestamp="20201103 12:36:57.324" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.307" endtime="20201103 12:36:57.324"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.326" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.325" endtime="20201103 12:36:57.327"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.330" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:57.328" endtime="20201103 12:36:57.330"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:57.304" endtime="20201103 12:36:57.331"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:57.301" endtime="20201103 12:36:57.331"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.299" endtime="20201103 12:36:57.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:57.335" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:57.335" endtime="20201103 12:36:57.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.332" endtime="20201103 12:36:57.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.299" endtime="20201103 12:36:57.336"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.298" endtime="20201103 12:36:57.336"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.337" endtime="20201103 12:36:57.339"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.296" endtime="20201103 12:36:57.339"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.295" endtime="20201103 12:36:57.340"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.271" endtime="20201103 12:36:57.340"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.347" endtime="20201103 12:36:57.357"></status>
</kw>
<msg timestamp="20201103 12:36:57.358" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.345" endtime="20201103 12:36:57.358"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.360" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:57.359" endtime="20201103 12:36:57.360"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:57.361" endtime="20201103 12:36:57.363"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.343" endtime="20201103 12:36:57.364"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.341" endtime="20201103 12:36:57.364"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.368" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201103 12:36:57.367" endtime="20201103 12:36:57.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.370" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201103 12:36:57.369" endtime="20201103 12:36:57.371"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.365" endtime="20201103 12:36:57.371"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:57.268" endtime="20201103 12:36:57.372" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:55.256" endtime="20201103 12:36:57.374"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201103 12:36:57.424" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201103 12:36:57.432" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201103 12:36:58.621" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201103 12:36:57.423" endtime="20201103 12:36:58.622"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201103 12:36:58.625" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201103 12:36:58.623" endtime="20201103 12:36:58.625"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.421" endtime="20201103 12:36:58.626"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:58.628" endtime="20201103 12:36:58.933"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.626" endtime="20201103 12:36:58.934"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.947" endtime="20201103 12:36:58.961"></status>
</kw>
<msg timestamp="20201103 12:36:58.961" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:58.945" endtime="20201103 12:36:58.962"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:58.964" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:58.962" endtime="20201103 12:36:58.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:58.967" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:58.965" endtime="20201103 12:36:58.967"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:58.943" endtime="20201103 12:36:58.968"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:58.940" endtime="20201103 12:36:58.968"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.939" endtime="20201103 12:36:58.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:58.973" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:58.972" endtime="20201103 12:36:58.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.970" endtime="20201103 12:36:58.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.938" endtime="20201103 12:36:58.973"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.937" endtime="20201103 12:36:58.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.974" endtime="20201103 12:36:58.976"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.936" endtime="20201103 12:36:58.976"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:58.977" endtime="20201103 12:36:58.978"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.934" endtime="20201103 12:36:58.979"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:57.420" endtime="20201103 12:36:58.979"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:36:58.986" endtime="20201103 12:36:59.005"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.984" endtime="20201103 12:36:59.006"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:59.019" endtime="20201103 12:36:59.032"></status>
</kw>
<msg timestamp="20201103 12:36:59.032" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:59.017" endtime="20201103 12:36:59.033"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:36:59.035" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:59.034" endtime="20201103 12:36:59.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:36:59.038" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:36:59.036" endtime="20201103 12:36:59.038"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:59.015" endtime="20201103 12:36:59.039"></status>
</kw>
<status status="FAIL" starttime="20201103 12:36:59.012" endtime="20201103 12:36:59.040"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.011" endtime="20201103 12:36:59.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:36:59.044" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:36:59.043" endtime="20201103 12:36:59.044"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.041" endtime="20201103 12:36:59.044"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.010" endtime="20201103 12:36:59.044"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.010" endtime="20201103 12:36:59.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:59.045" endtime="20201103 12:36:59.047"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.008" endtime="20201103 12:36:59.047"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.007" endtime="20201103 12:36:59.048"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:58.982" endtime="20201103 12:36:59.048"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:36:59.056" endtime="20201103 12:37:06.079"></status>
</kw>
<msg timestamp="20201103 12:37:06.080" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:36:59.055" endtime="20201103 12:37:06.081"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.085" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'bg-timer-count': '0'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:06.082" endtime="20201103 12:37:06.086"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.088" endtime="20201103 12:37:06.091"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.052" endtime="20201103 12:37:06.092"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.050" endtime="20201103 12:37:06.093"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:06.098" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 0, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:06.094" endtime="20201103 12:37:06.098"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.106" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:06.104" endtime="20201103 12:37:06.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.111" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:06.109" endtime="20201103 12:37:06.111"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.100" endtime="20201103 12:37:06.113"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.120" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:06.118" endtime="20201103 12:37:06.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.125" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:06.123" endtime="20201103 12:37:06.125"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.114" endtime="20201103 12:37:06.126"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.134" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:06.132" endtime="20201103 12:37:06.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.139" level="INFO">VALUE: 0</msg>
<status status="PASS" starttime="20201103 12:37:06.136" endtime="20201103 12:37:06.140"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.128" endtime="20201103 12:37:06.141"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.155" endtime="20201103 12:37:06.467"></status>
</kw>
<msg timestamp="20201103 12:37:06.470" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061607667, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161614708, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:06.152" endtime="20201103 12:37:06.470"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.478" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061607667, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161614708, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:06.471" endtime="20201103 12:37:06.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.479" endtime="20201103 12:37:06.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.146" endtime="20201103 12:37:06.481"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.143" endtime="20201103 12:37:06.482"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:06.486" level="INFO">${FILTERED} = [{'time': 1.161614708, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000704100000002, 'source_diff': 0.10000704100000002}, {'time': 1.261621917, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:06.482" endtime="20201103 12:37:06.486"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:06.499" level="INFO">${RESULT} = {'time': [1.161614708, 1.261621917, 1.36162925, 1.461636583, 1.561643931, 1.66165125, 1.761658583, 1.861665931, 1.961673264, 2.061680611, 2.161687958, 2.261695278, 2.361702694, 2.461709958, 2.56171730...</msg>
<status status="PASS" starttime="20201103 12:37:06.487" endtime="20201103 12:37:06.499"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.504" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:06.503" endtime="20201103 12:37:06.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.507" level="INFO">VALUE: [0.10000704100000002, 0.1000067360000001, 0.10000679200000007, 0.10000679099999998, 0.10000680600000011, 0.10000677800000002, 0.10000679099999998, 0.10000680600000011, 0.10000679200000007, 0.10000680499999981, 0.10000680500000003, 0.10000677800000002, 0.10000687500000005, 0.1000067910000002, 0.10000680599999967, 0.10000679199999984, 0.10000687500000005, 0.10000680500000003, 0.10000679199999984, 0.10000686100000022, 0.10000680500000003, 0.10000680500000003, 0.10000680599999967, 0.10000680599999967, 0.1000067910000002, 0.10000684699999995, 0.10000676400000019, 0.10000680600000011, 0.10000683299999968, 0.10000675000000037, 0.10000680600000056, 0.10000681999999994, 0.1000067910000002, 0.10000681899999986, 0.10000677800000002, 0.10000680600000056, 0.10000681899999986, 0.1000067910000002, 0.10000680600000056, 0.10000681999999994, 0.10000680599999967, 0.1000067910000002, 0.10000680599999967, 0.10000680599999967, 0.10000679200000029, 0.10000681899999986, 0.10000679200000029, 0.10000683400000021, 0.10000677799999913, 0.10000681899999986]</msg>
<status status="PASS" starttime="20201103 12:37:06.506" endtime="20201103 12:37:06.507"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.500" endtime="20201103 12:37:06.508"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.510" endtime="20201103 12:37:06.511"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:06.514" endtime="20201103 12:37:06.533"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.512" endtime="20201103 12:37:06.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.508" endtime="20201103 12:37:06.534"></status>
</kw>
<status status="PASS" starttime="20201103 12:36:59.049" endtime="20201103 12:37:06.534"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:36:58.980" endtime="20201103 12:37:06.535" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:06.541" endtime="20201103 12:37:06.561"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.540" endtime="20201103 12:37:06.561"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.575" endtime="20201103 12:37:06.589"></status>
</kw>
<msg timestamp="20201103 12:37:06.590" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:06.573" endtime="20201103 12:37:06.590"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.592" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:06.591" endtime="20201103 12:37:06.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:06.595" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:06.593" endtime="20201103 12:37:06.595"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:06.571" endtime="20201103 12:37:06.596"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:06.568" endtime="20201103 12:37:06.597"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.567" endtime="20201103 12:37:06.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:06.601" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:06.600" endtime="20201103 12:37:06.601"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.598" endtime="20201103 12:37:06.601"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.566" endtime="20201103 12:37:06.601"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.565" endtime="20201103 12:37:06.602"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.602" endtime="20201103 12:37:06.604"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.564" endtime="20201103 12:37:06.604"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.562" endtime="20201103 12:37:06.605"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.539" endtime="20201103 12:37:06.605"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:06.615" endtime="20201103 12:37:13.637"></status>
</kw>
<msg timestamp="20201103 12:37:13.638" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:06.613" endtime="20201103 12:37:13.638"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.643" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'bg-timer-count': '5'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:13.640" endtime="20201103 12:37:13.644"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:13.645" endtime="20201103 12:37:13.648"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.610" endtime="20201103 12:37:13.650"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.607" endtime="20201103 12:37:13.651"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:13.656" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 5, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:13.652" endtime="20201103 12:37:13.656"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.664" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:13.662" endtime="20201103 12:37:13.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.668" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:13.666" endtime="20201103 12:37:13.669"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.657" endtime="20201103 12:37:13.670"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.678" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:13.676" endtime="20201103 12:37:13.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.683" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:13.681" endtime="20201103 12:37:13.684"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.671" endtime="20201103 12:37:13.685"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.693" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:13.691" endtime="20201103 12:37:13.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:13.697" level="INFO">VALUE: 5</msg>
<status status="PASS" starttime="20201103 12:37:13.695" endtime="20201103 12:37:13.698"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.686" endtime="20201103 12:37:13.699"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:13.712" endtime="20201103 12:37:14.008"></status>
</kw>
<msg timestamp="20201103 12:37:14.011" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064194208, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164201347, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:13.709" endtime="20201103 12:37:14.011"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:14.018" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.064194208, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.164201347, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:14.012" endtime="20201103 12:37:14.019"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:14.020" endtime="20201103 12:37:14.021"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.704" endtime="20201103 12:37:14.022"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:13.700" endtime="20201103 12:37:14.022"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:14.026" level="INFO">${FILTERED} = [{'time': 1.164201347, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000713900000013, 'source_diff': 0.10000713900000013}, {'time': 1.264207847, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:14.023" endtime="20201103 12:37:14.026"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:14.040" level="INFO">${RESULT} = {'time': [1.164201347, 1.264207847, 1.364214889, 1.464222417, 1.564229542, 1.664237097, 1.764244167, 1.864251708, 1.964258778, 2.064266361, 2.164273417, 2.264281, 2.364288069, 2.464295639, 2.56430275,...</msg>
<status status="PASS" starttime="20201103 12:37:14.027" endtime="20201103 12:37:14.040"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:14.044" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:14.043" endtime="20201103 12:37:14.045"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:14.047" level="INFO">VALUE: [0.10000713900000013, 0.1000059579999999, 0.10000655600000008, 0.10000698599999991, 0.10000658400000018, 0.100007014, 0.10000652799999998, 0.10000699999999996, 0.10000652799999998, 0.1000070420000001, 0.10000651399999994, 0.1000070420000001, 0.10000652700000012, 0.10000702799999983, 0.1000066249999998, 0.10000700000000018, 0.10000657000000013, 0.1000070420000001, 0.10000651399999994, 0.10000697200000008, 0.1000066249999998, 0.100007014, 0.10000652799999976, 0.100007014, 0.10000654200000003, 0.10000697199999964, 0.10000662500000024, 0.10000699999999973, 0.10000659799999978, 0.10000702799999983, 0.10000654200000003, 0.10000697200000008, 0.10000659700000014, 0.1000070700000002, 0.10000654200000003, 0.10000704200000055, 0.10000651400000038, 0.10000698600000035, 0.10000661100000041, 0.10000699999999973, 0.1000065560000003, 0.1000070269999993, 0.10000650000000011, 0.10000700000000062, 0.10000659800000022, 0.10000699999999973, 0.10000656900000049, 0.10000700000000062, 0.10000654099999995, 0.100007014]</msg>
<status status="PASS" starttime="20201103 12:37:14.045" endtime="20201103 12:37:14.047"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.041" endtime="20201103 12:37:14.047"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:14.050" endtime="20201103 12:37:14.051"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:14.053" endtime="20201103 12:37:14.072"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.052" endtime="20201103 12:37:14.073"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.048" endtime="20201103 12:37:14.073"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:06.606" endtime="20201103 12:37:14.074"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:06.536" endtime="20201103 12:37:14.074" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:14.081" endtime="20201103 12:37:14.100"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.080" endtime="20201103 12:37:14.101"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:14.114" endtime="20201103 12:37:14.128"></status>
</kw>
<msg timestamp="20201103 12:37:14.128" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:14.112" endtime="20201103 12:37:14.128"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:14.131" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:14.129" endtime="20201103 12:37:14.131"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:14.134" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:14.132" endtime="20201103 12:37:14.134"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:14.110" endtime="20201103 12:37:14.135"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:14.107" endtime="20201103 12:37:14.135"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.106" endtime="20201103 12:37:14.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:14.140" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:14.138" endtime="20201103 12:37:14.141"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.136" endtime="20201103 12:37:14.141"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.105" endtime="20201103 12:37:14.141"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.105" endtime="20201103 12:37:14.141"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:14.142" endtime="20201103 12:37:14.143"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.103" endtime="20201103 12:37:14.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.102" endtime="20201103 12:37:14.144"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.078" endtime="20201103 12:37:14.145"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:14.153" endtime="20201103 12:37:21.174"></status>
</kw>
<msg timestamp="20201103 12:37:21.175" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:14.151" endtime="20201103 12:37:21.176"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.181" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'bg-timer-count': '10'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:21.178" endtime="20201103 12:37:21.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.183" endtime="20201103 12:37:21.186"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.149" endtime="20201103 12:37:21.187"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.147" endtime="20201103 12:37:21.188"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:21.193" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 10, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:21.190" endtime="20201103 12:37:21.194"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.203" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:21.200" endtime="20201103 12:37:21.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.207" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:21.205" endtime="20201103 12:37:21.207"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.195" endtime="20201103 12:37:21.209"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.216" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:21.214" endtime="20201103 12:37:21.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.221" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:21.219" endtime="20201103 12:37:21.222"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.210" endtime="20201103 12:37:21.223"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.231" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:21.229" endtime="20201103 12:37:21.232"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.235" level="INFO">VALUE: 10</msg>
<status status="PASS" starttime="20201103 12:37:21.233" endtime="20201103 12:37:21.236"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.224" endtime="20201103 12:37:21.237"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.250" endtime="20201103 12:37:21.553"></status>
</kw>
<msg timestamp="20201103 12:37:21.556" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061981917, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161987833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:21.247" endtime="20201103 12:37:21.556"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.563" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.061981917, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.161987833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:21.557" endtime="20201103 12:37:21.564"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.564" endtime="20201103 12:37:21.566"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.242" endtime="20201103 12:37:21.567"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.238" endtime="20201103 12:37:21.567"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:21.571" level="INFO">${FILTERED} = [{'time': 1.161987833, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000591599999997, 'source_diff': 0.10000591599999997}, {'time': 1.261995167, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:21.568" endtime="20201103 12:37:21.571"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:21.584" level="INFO">${RESULT} = {'time': [1.161987833, 1.261995167, 1.362002514, 1.462009708, 1.562017097, 1.662024403, 1.762031708, 1.862039042, 1.962046319, 2.062053583, 2.162060972, 2.262068264, 2.362075583, 2.462082903, 2.562090...</msg>
<status status="PASS" starttime="20201103 12:37:21.572" endtime="20201103 12:37:21.584"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.588" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:21.587" endtime="20201103 12:37:21.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.590" level="INFO">VALUE: [0.10000591599999997, 0.10000679200000007, 0.10000680600000011, 0.100006708, 0.10000684699999995, 0.10000676399999997, 0.10000676400000019, 0.10000679199999984, 0.10000673599999987, 0.10000672200000005, 0.10000684699999995, 0.10000674999999992, 0.10000677700000038, 0.10000677800000002, 0.10000677800000002, 0.100006708, 0.10000683299999968, 0.10000676400000019, 0.10000677800000002, 0.1000068190000003, 0.10000680600000011, 0.10000674999999992, 0.10000684699999995, 0.10000676400000019, 0.10000676399999975, 0.10000677800000002, 0.10000681999999994, 0.10000673700000018, 0.10000684699999995, 0.10000677800000002, 0.10000680500000048, 0.10000677800000002, 0.10000680599999967, 0.10000677800000002, 0.10000686099999978, 0.10000677800000002, 0.10000686099999978, 0.10000680500000048, 0.10000679200000029, 0.10000673700000018, 0.10000687500000005, 0.10000677800000002, 0.10000677800000002, 0.1000067910000002, 0.1000067919999994, 0.10000674999999948, 0.10000686099999978, 0.10000677800000002, 0.10000681999999994, 0.10000676399999975]</msg>
<status status="PASS" starttime="20201103 12:37:21.589" endtime="20201103 12:37:21.591"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.585" endtime="20201103 12:37:21.591"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.593" endtime="20201103 12:37:21.595"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:21.597" endtime="20201103 12:37:21.617"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.596" endtime="20201103 12:37:21.617"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.592" endtime="20201103 12:37:21.618"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:14.145" endtime="20201103 12:37:21.618"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:14.076" endtime="20201103 12:37:21.618" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:21.625" endtime="20201103 12:37:21.644"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.624" endtime="20201103 12:37:21.645"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.658" endtime="20201103 12:37:21.673"></status>
</kw>
<msg timestamp="20201103 12:37:21.673" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:21.656" endtime="20201103 12:37:21.673"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.676" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:21.674" endtime="20201103 12:37:21.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:21.679" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:21.677" endtime="20201103 12:37:21.679"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:21.654" endtime="20201103 12:37:21.680"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:21.651" endtime="20201103 12:37:21.680"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.650" endtime="20201103 12:37:21.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:21.684" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:21.684" endtime="20201103 12:37:21.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.682" endtime="20201103 12:37:21.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.649" endtime="20201103 12:37:21.685"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.649" endtime="20201103 12:37:21.685"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.686" endtime="20201103 12:37:21.687"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.647" endtime="20201103 12:37:21.688"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.646" endtime="20201103 12:37:21.688"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.622" endtime="20201103 12:37:21.689"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:21.697" endtime="20201103 12:37:28.719"></status>
</kw>
<msg timestamp="20201103 12:37:28.720" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:21.695" endtime="20201103 12:37:28.720"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.725" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'bg-timer-count': '15'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:28.722" endtime="20201103 12:37:28.726"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.727" endtime="20201103 12:37:28.731"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.693" endtime="20201103 12:37:28.732"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.691" endtime="20201103 12:37:28.733"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:28.738" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 15, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:28.735" endtime="20201103 12:37:28.739"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.747" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:28.745" endtime="20201103 12:37:28.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.758" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:28.755" endtime="20201103 12:37:28.759"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.740" endtime="20201103 12:37:28.761"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.773" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:28.770" endtime="20201103 12:37:28.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.779" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:28.777" endtime="20201103 12:37:28.780"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.765" endtime="20201103 12:37:28.782"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.792" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:28.789" endtime="20201103 12:37:28.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:28.796" level="INFO">VALUE: 15</msg>
<status status="PASS" starttime="20201103 12:37:28.794" endtime="20201103 12:37:28.797"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.783" endtime="20201103 12:37:28.798"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:28.813" endtime="20201103 12:37:29.113"></status>
</kw>
<msg timestamp="20201103 12:37:29.116" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062028875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162034819, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:28.808" endtime="20201103 12:37:29.116"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:29.124" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.062028875, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.162034819, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:29.117" endtime="20201103 12:37:29.124"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:29.125" endtime="20201103 12:37:29.127"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.803" endtime="20201103 12:37:29.127"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:28.799" endtime="20201103 12:37:29.128"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:29.132" level="INFO">${FILTERED} = [{'time': 1.162034819, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000594400000007, 'source_diff': 0.10000594400000007}, {'time': 1.262042153, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:29.129" endtime="20201103 12:37:29.132"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:29.145" level="INFO">${RESULT} = {'time': [1.162034819, 1.262042153, 1.3620495, 1.462056875, 1.56206425, 1.662070514, 1.762078861, 1.862086208, 1.962092542, 2.062100903, 2.162107236, 2.262115611, 2.362122861, 2.462129208, 2.562137639...</msg>
<status status="PASS" starttime="20201103 12:37:29.133" endtime="20201103 12:37:29.145"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:29.150" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:29.148" endtime="20201103 12:37:29.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:29.152" level="INFO">VALUE: [0.10000594400000007, 0.10000679200000007, 0.10000676399999997, 0.10000683300000013, 0.1000068329999999, 0.10000579200000015, 0.10000780499999995, 0.10000680500000003, 0.10000579199999993, 0.10000782000000008, 0.10000579200000015, 0.10000783299999982, 0.100006708, 0.10000580499999989, 0.10000788900000002, 0.10000677699999994, 0.10000680600000011, 0.10000582000000025, 0.10000672299999991, 0.10000782000000008, 0.10000684800000004, 0.10000680599999967, 0.10000680600000011, 0.1000068190000003, 0.10000574999999978, 0.10000780600000025, 0.10000684699999995, 0.10000580499999989, 0.10000680500000003, 0.10000783299999982, 0.10000672199999983, 0.10000680500000048, 0.10000686099999978, 0.10000681899999986, 0.10000680499999959, 0.10000584700000026, 0.10000669400000017, 0.100007819, 0.10000683299999924, 0.10000679200000029, 0.10000681999999994, 0.10000681999999994, 0.10000573700000004, 0.10000783400000035, 0.1000068470000004, 0.10000579200000015, 0.10000681999999994, 0.100007819, 0.10000675000000037, 0.10000679200000029]</msg>
<status status="PASS" starttime="20201103 12:37:29.151" endtime="20201103 12:37:29.158"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.146" endtime="20201103 12:37:29.159"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:29.161" endtime="20201103 12:37:29.162"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:29.165" endtime="20201103 12:37:29.184"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.163" endtime="20201103 12:37:29.185"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.159" endtime="20201103 12:37:29.185"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:21.689" endtime="20201103 12:37:29.185"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:21.620" endtime="20201103 12:37:29.186" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:29.193" endtime="20201103 12:37:29.212"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.191" endtime="20201103 12:37:29.213"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:29.227" endtime="20201103 12:37:29.241"></status>
</kw>
<msg timestamp="20201103 12:37:29.242" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:29.226" endtime="20201103 12:37:29.242"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:29.245" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:29.243" endtime="20201103 12:37:29.246"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:29.249" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:29.247" endtime="20201103 12:37:29.249"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:29.222" endtime="20201103 12:37:29.250"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:29.220" endtime="20201103 12:37:29.250"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.218" endtime="20201103 12:37:29.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:29.254" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:29.254" endtime="20201103 12:37:29.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.251" endtime="20201103 12:37:29.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.217" endtime="20201103 12:37:29.255"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.217" endtime="20201103 12:37:29.255"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:29.256" endtime="20201103 12:37:29.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.215" endtime="20201103 12:37:29.258"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.214" endtime="20201103 12:37:29.259"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.190" endtime="20201103 12:37:29.259"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:29.267" endtime="20201103 12:37:36.291"></status>
</kw>
<msg timestamp="20201103 12:37:36.292" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:29.266" endtime="20201103 12:37:36.292"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.298" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'bg-timer-count': '20'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:36.294" endtime="20201103 12:37:36.299"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.301" endtime="20201103 12:37:36.304"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.263" endtime="20201103 12:37:36.305"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.261" endtime="20201103 12:37:36.307"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:36.312" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 20, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:36.308" endtime="20201103 12:37:36.313"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.321" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:36.319" endtime="20201103 12:37:36.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.326" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:36.324" endtime="20201103 12:37:36.326"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.314" endtime="20201103 12:37:36.328"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.336" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:36.334" endtime="20201103 12:37:36.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.341" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:36.339" endtime="20201103 12:37:36.342"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.329" endtime="20201103 12:37:36.343"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.351" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:36.349" endtime="20201103 12:37:36.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.358" level="INFO">VALUE: 20</msg>
<status status="PASS" starttime="20201103 12:37:36.354" endtime="20201103 12:37:36.359"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.344" endtime="20201103 12:37:36.360"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.374" endtime="20201103 12:37:36.678"></status>
</kw>
<msg timestamp="20201103 12:37:36.681" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065161417, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165167694, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:36.371" endtime="20201103 12:37:36.681"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.689" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065161417, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165167694, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:36.682" endtime="20201103 12:37:36.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.690" endtime="20201103 12:37:36.692"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.365" endtime="20201103 12:37:36.692"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.361" endtime="20201103 12:37:36.693"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:36.697" level="INFO">${FILTERED} = [{'time': 1.165167694, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000627699999987, 'source_diff': 0.10000627699999987}, {'time': 1.265175653, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:36.694" endtime="20201103 12:37:36.697"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:36.712" level="INFO">${RESULT} = {'time': [1.165167694, 1.265175653, 1.365181972, 1.465189361, 1.565196625, 1.665203972, 1.765211264, 1.865218597, 1.965225931, 2.065233236, 2.165240569, 2.265247889, 2.365255236, 2.465262556, 2.565269...</msg>
<status status="PASS" starttime="20201103 12:37:36.698" endtime="20201103 12:37:36.712"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.716" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:36.715" endtime="20201103 12:37:36.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.719" level="INFO">VALUE: [0.10000627699999987, 0.10000741700000004, 0.1000057780000001, 0.10000684699999995, 0.10000679200000007, 0.10000680500000003, 0.10000674999999992, 0.10000679099999998, 0.10000679200000007, 0.10000676400000019, 0.10000679099999976, 0.10000677800000002, 0.10000680500000003, 0.10000677800000002, 0.10000676400000019, 0.1000067910000002, 0.10000677800000002, 0.10000679099999976, 0.10000679199999984, 0.10000677800000002, 0.10000679099999976, 0.10000676400000019, 0.10000680500000003, 0.10000679099999976, 0.10000676400000019, 0.10000680500000003, 0.10000677800000002, 0.10000677800000002, 0.10000680500000003, 0.10000677799999957, 0.10000677800000002, 0.1000067919999994, 0.10000680599999967, 0.10000677800000002, 0.10000677800000002, 0.10000679200000029, 0.1000067910000002, 0.10000680600000056, 0.10000676400000064, 0.1000067910000002, 0.10000679200000029, 0.10000681999999994, 0.1000067910000002, 0.10000676400000064, 0.10000684800000048, 0.10000677800000002, 0.10000681999999994, 0.10000677800000002, 0.1000067910000002, 0.1000067919999994]</msg>
<status status="PASS" starttime="20201103 12:37:36.718" endtime="20201103 12:37:36.720"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.713" endtime="20201103 12:37:36.720"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.723" endtime="20201103 12:37:36.724"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:36.726" endtime="20201103 12:37:36.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.725" endtime="20201103 12:37:36.746"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.721" endtime="20201103 12:37:36.747"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:29.260" endtime="20201103 12:37:36.747"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:29.188" endtime="20201103 12:37:36.748" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:36.754" endtime="20201103 12:37:36.774"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.753" endtime="20201103 12:37:36.775"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.789" endtime="20201103 12:37:36.803"></status>
</kw>
<msg timestamp="20201103 12:37:36.804" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:36.787" endtime="20201103 12:37:36.804"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.807" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.10', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:36.805" endtime="20201103 12:37:36.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201103 12:37:36.810" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201103 12:37:36.808" endtime="20201103 12:37:36.810"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:36.785" endtime="20201103 12:37:36.811"></status>
</kw>
<status status="FAIL" starttime="20201103 12:37:36.781" endtime="20201103 12:37:36.811"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.780" endtime="20201103 12:37:36.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201103 12:37:36.815" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201103 12:37:36.815" endtime="20201103 12:37:36.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.813" endtime="20201103 12:37:36.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.779" endtime="20201103 12:37:36.816"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.778" endtime="20201103 12:37:36.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.817" endtime="20201103 12:37:36.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.777" endtime="20201103 12:37:36.819"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.775" endtime="20201103 12:37:36.820"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.752" endtime="20201103 12:37:36.820"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:36.829" endtime="20201103 12:37:43.853"></status>
</kw>
<msg timestamp="20201103 12:37:43.854" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:36.827" endtime="20201103 12:37:43.854"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.859" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'bg-timer-count': '25'}, {'main-timer-interval': '100000'}, {'bg-timer-interval': '20000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201103 12:37:43.856" endtime="20201103 12:37:43.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:43.862" endtime="20201103 12:37:43.865"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.824" endtime="20201103 12:37:43.866"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.822" endtime="20201103 12:37:43.867"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:43.873" level="INFO">${RESULT} = {'main-timer-interval': 100000, 'bg-timer-count': 25, 'bg-timer-interval': 20000}</msg>
<status status="PASS" starttime="20201103 12:37:43.869" endtime="20201103 12:37:43.874"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>main-timer-interval</arg>
<arg>${RESULT['main-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.882" level="INFO">NAME: main-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:43.880" endtime="20201103 12:37:43.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.887" level="INFO">VALUE: 100000</msg>
<status status="PASS" starttime="20201103 12:37:43.885" endtime="20201103 12:37:43.888"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:43.875" endtime="20201103 12:37:43.889"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-interval</arg>
<arg>${RESULT['bg-timer-interval']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.897" level="INFO">NAME: bg-timer-interval</msg>
<status status="PASS" starttime="20201103 12:37:43.895" endtime="20201103 12:37:43.898"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.902" level="INFO">VALUE: 20000</msg>
<status status="PASS" starttime="20201103 12:37:43.900" endtime="20201103 12:37:43.903"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:43.890" endtime="20201103 12:37:43.904"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>bg-timer-count</arg>
<arg>${RESULT['bg-timer-count']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.912" level="INFO">NAME: bg-timer-count</msg>
<status status="PASS" starttime="20201103 12:37:43.910" endtime="20201103 12:37:43.916"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:43.920" level="INFO">VALUE: 25</msg>
<status status="PASS" starttime="20201103 12:37:43.917" endtime="20201103 12:37:43.920"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:43.905" endtime="20201103 12:37:43.922"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:43.936" endtime="20201103 12:37:44.244"></status>
</kw>
<msg timestamp="20201103 12:37:44.247" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065017292, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165023167, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:43.933" endtime="20201103 12:37:44.248"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201103 12:37:44.257" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.065017292, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.165023167, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201103 12:37:44.249" endtime="20201103 12:37:44.258"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:44.259" endtime="20201103 12:37:44.261"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:43.927" endtime="20201103 12:37:44.262"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:43.923" endtime="20201103 12:37:44.262"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select=FALLING</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201103 12:37:44.266" level="INFO">${FILTERED} = [{'time': 1.165023167, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0.10000587499999991, 'source_diff': 0.10000587499999991}, {'time': 1.265030514, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0...</msg>
<status status="PASS" starttime="20201103 12:37:44.263" endtime="20201103 12:37:44.266"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201103 12:37:44.280" level="INFO">${RESULT} = {'time': [1.165023167, 1.265030514, 1.365037819, 1.465045139, 1.565052472, 1.665059736, 1.765067139, 1.865074444, 1.965081778, 2.065089111, 2.165096458, 2.26510375, 2.365111139, 2.465118431, 2.5651257...</msg>
<status status="PASS" starttime="20201103 12:37:44.267" endtime="20201103 12:37:44.280"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201103 12:37:44.284" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201103 12:37:44.283" endtime="20201103 12:37:44.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201103 12:37:44.286" level="INFO">VALUE: [0.10000587499999991, 0.10000680599999989, 0.10000676300000011, 0.10000677800000002, 0.10000679099999998, 0.10000672199999983, 0.100006861, 0.10000676299999989, 0.10000677800000002, 0.10000679199999984, 0.10000680500000003, 0.10000675000000037, 0.10000684699999995, 0.10000674999999992, 0.10000679199999984, 0.1000067910000002, 0.10000680500000003, 0.10000672199999983, 0.10000686100000022, 0.10000680500000003, 0.10000676399999975, 0.1000067910000002, 0.10000679199999984, 0.10000674999999992, 0.10000688899999988, 0.10000679200000029, 0.10000680499999959, 0.10000683300000013, 0.10000676400000019, 0.10000676299999967, 0.10000686099999978, 0.1000067919999994, 0.10000680599999967, 0.10000680599999967, 0.10000683300000013, 0.1000067360000001, 0.10000687499999916, 0.10000680599999967, 0.10000679200000029, 0.10000681899999986, 0.10000681899999986, 0.1000067360000001, 0.10000688900000032, 0.10000677800000002, 0.10000683299999924, 0.10000677699999994, 0.10000677800000002, 0.10000675000000037, 0.10000688900000032, 0.1000067919999994]</msg>
<status status="PASS" starttime="20201103 12:37:44.285" endtime="20201103 12:37:44.287"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.281" endtime="20201103 12:37:44.287"></status>
</kw>
<kw name="Test Teardown" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${KEYWORD_STATUS}' != 'PASS'</arg>
<arg>RIOT Reset</arg>
</arguments>
<status status="PASS" starttime="20201103 12:37:44.289" endtime="20201103 12:37:44.291"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201103 12:37:44.293" endtime="20201103 12:37:44.312"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.291" endtime="20201103 12:37:44.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:44.288" endtime="20201103 12:37:44.313"></status>
</kw>
<status status="PASS" starttime="20201103 12:37:36.821" endtime="20201103 12:37:44.314"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201103 12:37:36.749" endtime="20201103 12:37:44.314" critical="yes"></status>
</test>
<status status="PASS" starttime="20201103 12:36:57.379" endtime="20201103 12:37:44.321"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f767zi</item>
<item name="RIOT-Version">2020.10</item>
</metadata>
<status status="PASS" starttime="20201103 12:36:55.149" endtime="20201103 12:37:44.347"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f767zi</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
