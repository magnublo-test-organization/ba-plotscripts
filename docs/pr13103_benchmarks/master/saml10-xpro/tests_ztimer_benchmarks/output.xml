<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201010 14:27:57.009" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/home/pi/.tmp/RobotFW-tests/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/home/pi/.tmp/RobotFW-tests/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201010 14:27:57.599" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201010 14:27:57.607" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201010 14:27:58.784" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201010 14:27:57.597" endtime="20201010 14:27:58.785"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201010 14:27:58.787" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201010 14:27:58.786" endtime="20201010 14:27:58.788"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:57.595" endtime="20201010 14:27:58.788"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:27:58.790" endtime="20201010 14:27:58.985"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:58.789" endtime="20201010 14:27:58.986"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.015" endtime="20201010 14:27:59.035"></status>
</kw>
<msg timestamp="20201010 14:27:59.036" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:27:59.012" endtime="20201010 14:27:59.036"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.041" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:27:59.038" endtime="20201010 14:27:59.042"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.048" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:27:59.044" endtime="20201010 14:27:59.049"></status>
</kw>
<status status="FAIL" starttime="20201010 14:27:59.006" endtime="20201010 14:27:59.050"></status>
</kw>
<status status="FAIL" starttime="20201010 14:27:59.000" endtime="20201010 14:27:59.051"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:58.997" endtime="20201010 14:27:59.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:27:59.058" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:27:59.058" endtime="20201010 14:27:59.059"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.054" endtime="20201010 14:27:59.059"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:58.995" endtime="20201010 14:27:59.059"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:58.994" endtime="20201010 14:27:59.059"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.060" endtime="20201010 14:27:59.062"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:58.991" endtime="20201010 14:27:59.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.063" endtime="20201010 14:27:59.065"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:58.988" endtime="20201010 14:27:59.065"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:57.593" endtime="20201010 14:27:59.066"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:27:59.072" endtime="20201010 14:27:59.091"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.071" endtime="20201010 14:27:59.092"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.107" endtime="20201010 14:27:59.119"></status>
</kw>
<msg timestamp="20201010 14:27:59.119" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:27:59.105" endtime="20201010 14:27:59.120"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.122" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:27:59.120" endtime="20201010 14:27:59.122"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.125" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:27:59.123" endtime="20201010 14:27:59.125"></status>
</kw>
<status status="FAIL" starttime="20201010 14:27:59.103" endtime="20201010 14:27:59.126"></status>
</kw>
<status status="FAIL" starttime="20201010 14:27:59.100" endtime="20201010 14:27:59.126"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.098" endtime="20201010 14:27:59.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:27:59.131" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:27:59.130" endtime="20201010 14:27:59.131"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.128" endtime="20201010 14:27:59.131"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.097" endtime="20201010 14:27:59.131"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.096" endtime="20201010 14:27:59.132"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.132" endtime="20201010 14:27:59.134"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.094" endtime="20201010 14:27:59.134"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.093" endtime="20201010 14:27:59.135"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.069" endtime="20201010 14:27:59.135"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.142" endtime="20201010 14:27:59.150"></status>
</kw>
<msg timestamp="20201010 14:27:59.151" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:27:59.141" endtime="20201010 14:27:59.151"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.153" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:27:59.152" endtime="20201010 14:27:59.154"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:27:59.154" endtime="20201010 14:27:59.156"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.138" endtime="20201010 14:27:59.157"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.136" endtime="20201010 14:27:59.157"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.162" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201010 14:27:59.161" endtime="20201010 14:27:59.162"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.164" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201010 14:27:59.163" endtime="20201010 14:27:59.164"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.158" endtime="20201010 14:27:59.165"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:27:59.066" endtime="20201010 14:27:59.165" critical="yes"></status>
</test>
<status status="PASS" starttime="20201010 14:27:57.121" endtime="20201010 14:27:59.168"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/home/pi/.tmp/RobotFW-tests/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201010 14:27:59.222" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201010 14:27:59.230" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201010 14:28:00.393" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201010 14:27:59.221" endtime="20201010 14:28:00.394"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201010 14:28:00.396" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201010 14:28:00.395" endtime="20201010 14:28:00.396"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.220" endtime="20201010 14:28:00.397"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:00.399" endtime="20201010 14:28:00.646"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.398" endtime="20201010 14:28:00.648"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:00.674" endtime="20201010 14:28:00.690"></status>
</kw>
<msg timestamp="20201010 14:28:00.690" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:00.670" endtime="20201010 14:28:00.690"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:00.693" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:00.691" endtime="20201010 14:28:00.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:00.696" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:00.694" endtime="20201010 14:28:00.697"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:00.665" endtime="20201010 14:28:00.697"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:00.660" endtime="20201010 14:28:00.698"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.658" endtime="20201010 14:28:00.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:00.702" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:00.701" endtime="20201010 14:28:00.702"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.699" endtime="20201010 14:28:00.703"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.656" endtime="20201010 14:28:00.703"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.655" endtime="20201010 14:28:00.703"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:00.704" endtime="20201010 14:28:00.705"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.652" endtime="20201010 14:28:00.706"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:00.706" endtime="20201010 14:28:00.708"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.649" endtime="20201010 14:28:00.708"></status>
</kw>
<status status="PASS" starttime="20201010 14:27:59.218" endtime="20201010 14:28:00.709"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:00.715" endtime="20201010 14:28:00.734"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.713" endtime="20201010 14:28:00.735"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:00.748" endtime="20201010 14:28:00.760"></status>
</kw>
<msg timestamp="20201010 14:28:00.761" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:00.747" endtime="20201010 14:28:00.762"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:00.764" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:00.762" endtime="20201010 14:28:00.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:00.767" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:00.765" endtime="20201010 14:28:00.767"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:00.744" endtime="20201010 14:28:00.768"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:00.742" endtime="20201010 14:28:00.769"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.740" endtime="20201010 14:28:00.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:00.773" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:00.772" endtime="20201010 14:28:00.774"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.770" endtime="20201010 14:28:00.774"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.739" endtime="20201010 14:28:00.774"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.738" endtime="20201010 14:28:00.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:00.775" endtime="20201010 14:28:00.777"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.737" endtime="20201010 14:28:00.777"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.735" endtime="20201010 14:28:00.778"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.712" endtime="20201010 14:28:00.778"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:00.787" endtime="20201010 14:28:06.285"></status>
</kw>
<msg timestamp="20201010 14:28:06.286" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0 1\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:00.786" endtime="20201010 14:28:06.286"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.291" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0 1\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:06.288" endtime="20201010 14:28:06.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:06.293" endtime="20201010 14:28:06.297"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.783" endtime="20201010 14:28:06.298"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.781" endtime="20201010 14:28:06.299"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:06.304" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201010 14:28:06.300" endtime="20201010 14:28:06.304"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 14:28:06.351" level="INFO">${interval} = []</msg>
<status status="PASS" starttime="20201010 14:28:06.306" endtime="20201010 14:28:06.352"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.355" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 14:28:06.354" endtime="20201010 14:28:06.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.357" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201010 14:28:06.356" endtime="20201010 14:28:06.358"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.352" endtime="20201010 14:28:06.358"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.361" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 14:28:06.360" endtime="20201010 14:28:06.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.363" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 14:28:06.362" endtime="20201010 14:28:06.364"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.359" endtime="20201010 14:28:06.364"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:06.371" endtime="20201010 14:28:06.673"></status>
</kw>
<msg timestamp="20201010 14:28:06.676" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.561810278, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.661448194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:06.369" endtime="20201010 14:28:06.676"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.684" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.561810278, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.661448194, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:06.677" endtime="20201010 14:28:06.684"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:06.685" endtime="20201010 14:28:06.687"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.367" endtime="20201010 14:28:06.688"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.365" endtime="20201010 14:28:06.688"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 14:28:06.692" level="INFO">${FILTERED} = [{'diff': 0.09963791599999994}, {'diff': 0.09963863899999992}, {'diff': 0.09964544499999994}, {'diff': 0.09964672200000002}, {'diff': 0.09965238900000006}, {'diff': 0.09965826399999989}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201010 14:28:06.689" endtime="20201010 14:28:06.692"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:06.696" level="INFO">${RESULT} = {'diff': [0.09963791599999994, 0.09963863899999992, 0.09964544499999994, 0.09964672200000002, 0.09965238900000006, 0.09965826399999989, 0.09964012500000008, 0.099646597, 0.0996582909999999, 0.09963670...</msg>
<status status="PASS" starttime="20201010 14:28:06.693" endtime="20201010 14:28:06.697"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.701" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 14:28:06.700" endtime="20201010 14:28:06.701"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.703" level="INFO">VALUE: [0.09963791599999994, 0.09963863899999992, 0.09964544499999994, 0.09964672200000002, 0.09965238900000006, 0.09965826399999989, 0.09964012500000008, 0.099646597, 0.0996582909999999, 0.09963670800000002, 0.09964252799999995, 0.09964122200000003, 0.09963618099999993, 0.09965187499999995, 0.09963975000000014, 0.09963005600000008, 0.09963044399999976, 0.09964499999999976, 0.09964226400000031, 0.0996288329999997, 0.0996336659999999, 0.09963219399999979, 0.0996444030000001, 0.09963073599999994, 0.09962844500000001, 0.09964156999999974, 0.09964326400000001, 0.09963559800000032, 0.09963584700000006, 0.09962652799999994, 0.09963576399999985, 0.09964419400000013, 0.09962224999999991, 0.09964197199999969, 0.09963215199999986, 0.09962993099999995, 0.09962627700000048, 0.0996353610000007, 0.09963180499999957, 0.0996409439999999, 0.09962970900000023, 0.09963137500000041, 0.09963613900000023, 0.0996341799999998, 0.09962495899999979, 0.09962568100000002, 0.0996278049999999, 0.09962844499999957, 0.09962809700000008, 0.09962566599999967]</msg>
<status status="PASS" starttime="20201010 14:28:06.702" endtime="20201010 14:28:06.703"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.697" endtime="20201010 14:28:06.704"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:00.779" endtime="20201010 14:28:06.704"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:28:00.709" endtime="20201010 14:28:06.705" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:06.714" endtime="20201010 14:28:06.733"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.712" endtime="20201010 14:28:06.734"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:06.747" endtime="20201010 14:28:06.759"></status>
</kw>
<msg timestamp="20201010 14:28:06.760" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:06.746" endtime="20201010 14:28:06.760"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.762" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:06.761" endtime="20201010 14:28:06.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:06.766" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:06.764" endtime="20201010 14:28:06.766"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:06.743" endtime="20201010 14:28:06.767"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:06.740" endtime="20201010 14:28:06.768"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.739" endtime="20201010 14:28:06.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:06.772" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:06.771" endtime="20201010 14:28:06.772"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.769" endtime="20201010 14:28:06.772"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.738" endtime="20201010 14:28:06.772"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.738" endtime="20201010 14:28:06.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:06.773" endtime="20201010 14:28:06.775"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.736" endtime="20201010 14:28:06.775"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.735" endtime="20201010 14:28:06.776"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.711" endtime="20201010 14:28:06.776"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:06.786" endtime="20201010 14:28:12.300"></status>
</kw>
<msg timestamp="20201010 14:28:12.301" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '56207'}, {'interval': '42110'}, {'interval': '19271'}, {'interval': '94738'}, {'interval': '34690'}...</msg>
<status status="PASS" starttime="20201010 14:28:06.785" endtime="20201010 14:28:12.302"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.307" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '56207'}, {'interval': '42110'}, {'interval': '19271'}, {'interval': '94738'}, {'interval': '34690'}...</msg>
<status status="PASS" starttime="20201010 14:28:12.304" endtime="20201010 14:28:12.308"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:12.309" endtime="20201010 14:28:12.312"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.782" endtime="20201010 14:28:12.314"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.779" endtime="20201010 14:28:12.315"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:12.320" level="INFO">${RESULT} = {'focus': [100000], 'interval': [56207, 42110, 19271, 94738, 34690]}</msg>
<status status="PASS" starttime="20201010 14:28:12.316" endtime="20201010 14:28:12.320"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 14:28:12.331" level="INFO">${interval} = [56207, 42110, 19271, 94738, 34690]</msg>
<status status="PASS" starttime="20201010 14:28:12.322" endtime="20201010 14:28:12.331"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.338" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 14:28:12.336" endtime="20201010 14:28:12.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.343" level="INFO">VALUE: [56207, 42110, 19271, 94738, 34690]</msg>
<status status="PASS" starttime="20201010 14:28:12.341" endtime="20201010 14:28:12.343"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.332" endtime="20201010 14:28:12.344"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.352" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 14:28:12.350" endtime="20201010 14:28:12.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.356" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 14:28:12.354" endtime="20201010 14:28:12.357"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.346" endtime="20201010 14:28:12.358"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:12.372" endtime="20201010 14:28:12.681"></status>
</kw>
<msg timestamp="20201010 14:28:12.684" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563261944, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.662896417, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:12.368" endtime="20201010 14:28:12.685"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.692" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563261944, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.662896417, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:12.686" endtime="20201010 14:28:12.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:12.693" endtime="20201010 14:28:12.695"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.363" endtime="20201010 14:28:12.696"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.359" endtime="20201010 14:28:12.696"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 14:28:12.700" level="INFO">${FILTERED} = [{'diff': 0.09963447300000006}, {'diff': 0.09964161100000002}, {'diff': 0.09962962500000005}, {'diff': 0.099636375}, {'diff': 0.09963238899999993}, {'diff': 0.09962407000000018}, {'diff': 0.0996356250...</msg>
<status status="PASS" starttime="20201010 14:28:12.697" endtime="20201010 14:28:12.700"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:12.705" level="INFO">${RESULT} = {'diff': [0.09963447300000006, 0.09964161100000002, 0.09962962500000005, 0.099636375, 0.09963238899999993, 0.09962407000000018, 0.09963562500000012, 0.09962458299999999, 0.09962487499999995, 0.0996188...</msg>
<status status="PASS" starttime="20201010 14:28:12.701" endtime="20201010 14:28:12.705"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.709" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 14:28:12.708" endtime="20201010 14:28:12.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.711" level="INFO">VALUE: [0.09963447300000006, 0.09964161100000002, 0.09962962500000005, 0.099636375, 0.09963238899999993, 0.09962407000000018, 0.09963562500000012, 0.09962458299999999, 0.09962487499999995, 0.09961886099999995, 0.09962375000000012, 0.09963445899999979, 0.09962597299999998, 0.0996321389999999, 0.09963530499999984, 0.0996266939999999, 0.09962907000000021, 0.09964083300000004, 0.09962881899999987, 0.0996420269999998, 0.09962105500000007, 0.09962594400000002, 0.09964026400000003, 0.09963559700000024, 0.09962809700000008, 0.09964245799999993, 0.09962907000000021, 0.09966129099999987, 0.09958216699999989, 0.09963169400000016, 0.09961719399999991, 0.09964059700000005, 0.09962565299999993, 0.0996253199999999, 0.09963052700000041, 0.09963618000000007, 0.0996405419999995, 0.09964655599999972, 0.0996349719999996, 0.09963702699999999, 0.09963842999999972, 0.09965218000000053, 0.09963072299999975, 0.09963993099999957, 0.0996265980000004, 0.09963888899999951, 0.09962395799999957, 0.09963380599999994, 0.09962687500000023, 0.09962425000000064]</msg>
<status status="PASS" starttime="20201010 14:28:12.710" endtime="20201010 14:28:12.712"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.706" endtime="20201010 14:28:12.712"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:06.777" endtime="20201010 14:28:12.713"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:28:06.708" endtime="20201010 14:28:12.714" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:12.722" endtime="20201010 14:28:12.742"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.721" endtime="20201010 14:28:12.742"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:12.756" endtime="20201010 14:28:12.769"></status>
</kw>
<msg timestamp="20201010 14:28:12.769" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:12.754" endtime="20201010 14:28:12.769"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.772" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:12.770" endtime="20201010 14:28:12.772"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:12.776" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:12.773" endtime="20201010 14:28:12.776"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:12.751" endtime="20201010 14:28:12.777"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:12.749" endtime="20201010 14:28:12.777"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.748" endtime="20201010 14:28:12.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:12.782" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:12.781" endtime="20201010 14:28:12.782"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.779" endtime="20201010 14:28:12.782"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.747" endtime="20201010 14:28:12.783"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.746" endtime="20201010 14:28:12.783"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:12.784" endtime="20201010 14:28:12.785"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.745" endtime="20201010 14:28:12.786"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.743" endtime="20201010 14:28:12.786"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.719" endtime="20201010 14:28:12.786"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:12.795" endtime="20201010 14:28:18.327"></status>
</kw>
<msg timestamp="20201010 14:28:18.328" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '22114'}, {'interval': '67521'}, {'interval': '17040'}, {'interval': '71822'}, {'interval': '90731'...</msg>
<status status="PASS" starttime="20201010 14:28:12.794" endtime="20201010 14:28:18.328"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.333" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '22114'}, {'interval': '67521'}, {'interval': '17040'}, {'interval': '71822'}, {'interval': '90731'...</msg>
<status status="PASS" starttime="20201010 14:28:18.330" endtime="20201010 14:28:18.334"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:18.336" endtime="20201010 14:28:18.339"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.791" endtime="20201010 14:28:18.340"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.789" endtime="20201010 14:28:18.341"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:18.347" level="INFO">${RESULT} = {'focus': [100000], 'interval': [22114, 67521, 17040, 71822, 90731, 47405, 43294, 43357, 96892, 93113]}</msg>
<status status="PASS" starttime="20201010 14:28:18.343" endtime="20201010 14:28:18.347"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 14:28:18.357" level="INFO">${interval} = [22114, 67521, 17040, 71822, 90731, 47405, 43294, 43357, 96892, 93113]</msg>
<status status="PASS" starttime="20201010 14:28:18.349" endtime="20201010 14:28:18.358"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.365" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 14:28:18.363" endtime="20201010 14:28:18.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.367" level="INFO">VALUE: [22114, 67521, 17040, 71822, 90731, 47405, 43294, 43357, 96892, 93113]</msg>
<status status="PASS" starttime="20201010 14:28:18.366" endtime="20201010 14:28:18.368"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.359" endtime="20201010 14:28:18.368"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.372" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 14:28:18.371" endtime="20201010 14:28:18.372"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.374" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 14:28:18.373" endtime="20201010 14:28:18.374"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.369" endtime="20201010 14:28:18.374"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:18.383" endtime="20201010 14:28:18.681"></status>
</kw>
<msg timestamp="20201010 14:28:18.684" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565962222, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665594111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:18.381" endtime="20201010 14:28:18.684"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.692" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565962222, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665594111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:18.685" endtime="20201010 14:28:18.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:18.693" endtime="20201010 14:28:18.695"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.377" endtime="20201010 14:28:18.696"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.375" endtime="20201010 14:28:18.696"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 14:28:18.700" level="INFO">${FILTERED} = [{'diff': 0.09963188899999997}, {'diff': 0.09962733299999993}, {'diff': 0.09963183399999997}, {'diff': 0.09961873599999993}, {'diff': 0.09963740300000012}, {'diff': 0.09962793100000011}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201010 14:28:18.697" endtime="20201010 14:28:18.700"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:18.704" level="INFO">${RESULT} = {'diff': [0.09963188899999997, 0.09962733299999993, 0.09963183399999997, 0.09961873599999993, 0.09963740300000012, 0.09962793100000011, 0.09963662500000003, 0.09962673600000005, 0.09962713899999986, 0...</msg>
<status status="PASS" starttime="20201010 14:28:18.701" endtime="20201010 14:28:18.704"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.708" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 14:28:18.707" endtime="20201010 14:28:18.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.710" level="INFO">VALUE: [0.09963188899999997, 0.09962733299999993, 0.09963183399999997, 0.09961873599999993, 0.09963740300000012, 0.09962793100000011, 0.09963662500000003, 0.09962673600000005, 0.09962713899999986, 0.09962151400000008, 0.099620861, 0.09963479099999994, 0.09963845900000012, 0.0996294310000001, 0.09962204200000024, 0.09961288899999987, 0.09962012500000039, 0.09962515299999986, 0.09956486099999973, 0.0996332919999996, 0.09963772199999976, 0.09962773599999997, 0.09963413899999995, 0.09964152800000026, 0.09964168100000004, 0.09964165299999994, 0.0996255829999999, 0.09963973600000031, 0.09963452800000017, 0.09963188899999986, 0.09964412499999975, 0.09961816700000004, 0.09963534699999999, 0.09962366699999992, 0.09962123599999995, 0.0996318890000003, 0.09962479200000018, 0.09964427799999953, 0.09963594500000017, 0.0996406529999998, 0.0996698330000001, 0.0995878750000001, 0.0996406529999998, 0.09963255500000034, 0.09964144400000041, 0.09963277800000014, 0.0996324590000004, 0.09963570900000018, 0.09964619399999997, 0.09963256999999981]</msg>
<status status="PASS" starttime="20201010 14:28:18.709" endtime="20201010 14:28:18.711"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.705" endtime="20201010 14:28:18.711"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:12.787" endtime="20201010 14:28:18.712"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:28:12.716" endtime="20201010 14:28:18.712" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:18.720" endtime="20201010 14:28:18.740"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.719" endtime="20201010 14:28:18.740"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:18.757" endtime="20201010 14:28:18.769"></status>
</kw>
<msg timestamp="20201010 14:28:18.770" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:18.755" endtime="20201010 14:28:18.770"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.772" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:18.771" endtime="20201010 14:28:18.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:18.776" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:18.773" endtime="20201010 14:28:18.776"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:18.753" endtime="20201010 14:28:18.777"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:18.751" endtime="20201010 14:28:18.777"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.749" endtime="20201010 14:28:18.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:18.781" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:18.781" endtime="20201010 14:28:18.782"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.779" endtime="20201010 14:28:18.782"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.748" endtime="20201010 14:28:18.782"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.748" endtime="20201010 14:28:18.782"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:18.783" endtime="20201010 14:28:18.785"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.743" endtime="20201010 14:28:18.785"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.741" endtime="20201010 14:28:18.786"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.717" endtime="20201010 14:28:18.786"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:18.798" endtime="20201010 14:28:24.346"></status>
</kw>
<msg timestamp="20201010 14:28:24.347" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '12297'}, {'interval': '68502'}, {'interval': '38802'}, {'interval': '52517'}, {'interval': '69027'...</msg>
<status status="PASS" starttime="20201010 14:28:18.796" endtime="20201010 14:28:24.348"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.353" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '12297'}, {'interval': '68502'}, {'interval': '38802'}, {'interval': '52517'}, {'interval': '69027'...</msg>
<status status="PASS" starttime="20201010 14:28:24.349" endtime="20201010 14:28:24.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:24.355" endtime="20201010 14:28:24.359"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.792" endtime="20201010 14:28:24.360"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.789" endtime="20201010 14:28:24.361"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:24.367" level="INFO">${RESULT} = {'focus': [100000], 'interval': [12297, 68502, 38802, 52517, 69027, 11193, 41947, 12933, 95471, 18328, 45436, 45379, 25434, 48836, 22297]}</msg>
<status status="PASS" starttime="20201010 14:28:24.362" endtime="20201010 14:28:24.367"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 14:28:24.373" level="INFO">${interval} = [12297, 68502, 38802, 52517, 69027, 11193, 41947, 12933, 95471, 18328, 45436, 45379, 25434, 48836, 22297]</msg>
<status status="PASS" starttime="20201010 14:28:24.369" endtime="20201010 14:28:24.373"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.377" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 14:28:24.376" endtime="20201010 14:28:24.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.379" level="INFO">VALUE: [12297, 68502, 38802, 52517, 69027, 11193, 41947, 12933, 95471, 18328, 45436, 45379, 25434, 48836, 22297]</msg>
<status status="PASS" starttime="20201010 14:28:24.378" endtime="20201010 14:28:24.379"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.374" endtime="20201010 14:28:24.380"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.385" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 14:28:24.383" endtime="20201010 14:28:24.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.387" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 14:28:24.386" endtime="20201010 14:28:24.387"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.380" endtime="20201010 14:28:24.387"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:24.394" endtime="20201010 14:28:24.690"></status>
</kw>
<msg timestamp="20201010 14:28:24.693" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.572483694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.672114875, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:24.392" endtime="20201010 14:28:24.694"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.701" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.572483694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.672114875, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:24.694" endtime="20201010 14:28:24.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:24.703" endtime="20201010 14:28:24.704"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.390" endtime="20201010 14:28:24.705"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.388" endtime="20201010 14:28:24.705"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 14:28:24.709" level="INFO">${FILTERED} = [{'diff': 0.09963118100000001}, {'diff': 0.09963350000000004}, {'diff': 0.09963969399999995}, {'diff': 0.09962715299999991}, {'diff': 0.09964320900000001}, {'diff': 0.099639861}, {'diff': 0.0996307499...</msg>
<status status="PASS" starttime="20201010 14:28:24.706" endtime="20201010 14:28:24.709"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:24.713" level="INFO">${RESULT} = {'diff': [0.09963118100000001, 0.09963350000000004, 0.09963969399999995, 0.09962715299999991, 0.09964320900000001, 0.099639861, 0.09963074999999999, 0.099638208, 0.09961812499999989, 0.099714083000000...</msg>
<status status="PASS" starttime="20201010 14:28:24.710" endtime="20201010 14:28:24.713"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.718" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 14:28:24.716" endtime="20201010 14:28:24.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.720" level="INFO">VALUE: [0.09963118100000001, 0.09963350000000004, 0.09963969399999995, 0.09962715299999991, 0.09964320900000001, 0.099639861, 0.09963074999999999, 0.099638208, 0.09961812499999989, 0.09971408300000006, 0.09957448599999985, 0.09965223600000006, 0.09963591699999985, 0.09966158300000005, 0.09963866700000001, 0.09963615300000006, 0.099636222, 0.099634848, 0.09963620800000017, 0.09963422300000024, 0.09967324999999994, 0.09957518100000007, 0.09962809699999964, 0.099639861, 0.0996330000000003, 0.09963906900000019, 0.0996372769999998, 0.09970908300000003, 0.09957349999999998, 0.09963297300000029, 0.09963409700000003, 0.09963416700000005, 0.09962998600000006, 0.09963962500000001, 0.0996251939999997, 0.09963111199999997, 0.09963948599999917, 0.09955742999999995, 0.09955137499999989, 0.09963498600000076, 0.09962849999999968, 0.09963315300000009, 0.09964501400000003, 0.09964395899999978, 0.09964604099999974, 0.09971688899999975, 0.09954156899999944, 0.09963568099999964, 0.09962186199999934, 0.09967519399999958]</msg>
<status status="PASS" starttime="20201010 14:28:24.719" endtime="20201010 14:28:24.721"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.714" endtime="20201010 14:28:24.721"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:18.787" endtime="20201010 14:28:24.722"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:28:18.715" endtime="20201010 14:28:24.726" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:24.735" endtime="20201010 14:28:24.754"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.733" endtime="20201010 14:28:24.755"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:24.768" endtime="20201010 14:28:24.780"></status>
</kw>
<msg timestamp="20201010 14:28:24.781" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:24.767" endtime="20201010 14:28:24.781"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.783" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:24.782" endtime="20201010 14:28:24.784"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:24.787" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:24.784" endtime="20201010 14:28:24.787"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:24.764" endtime="20201010 14:28:24.788"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:24.761" endtime="20201010 14:28:24.788"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.760" endtime="20201010 14:28:24.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:24.792" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:24.792" endtime="20201010 14:28:24.793"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.790" endtime="20201010 14:28:24.793"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.759" endtime="20201010 14:28:24.793"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.759" endtime="20201010 14:28:24.793"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:24.794" endtime="20201010 14:28:24.796"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.757" endtime="20201010 14:28:24.796"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.756" endtime="20201010 14:28:24.797"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.732" endtime="20201010 14:28:24.797"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:24.807" endtime="20201010 14:28:30.373"></status>
</kw>
<msg timestamp="20201010 14:28:30.374" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '57201'}, {'interval': '35189'}, {'interval': '67612'}, {'interval': '60277'}, {'interval': '19991'...</msg>
<status status="PASS" starttime="20201010 14:28:24.805" endtime="20201010 14:28:30.375"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.380" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '57201'}, {'interval': '35189'}, {'interval': '67612'}, {'interval': '60277'}, {'interval': '19991'...</msg>
<status status="PASS" starttime="20201010 14:28:30.377" endtime="20201010 14:28:30.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:30.383" endtime="20201010 14:28:30.386"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.802" endtime="20201010 14:28:30.387"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.800" endtime="20201010 14:28:30.388"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:30.395" level="INFO">${RESULT} = {'focus': [100000], 'interval': [57201, 35189, 67612, 60277, 19991, 17369, 86767, 52921, 53588, 71725, 48572, 16053, 89194, 12744, 71650, 37538, 66374, 81290, 41674, 14414]}</msg>
<status status="PASS" starttime="20201010 14:28:30.390" endtime="20201010 14:28:30.395"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 14:28:30.405" level="INFO">${interval} = [57201, 35189, 67612, 60277, 19991, 17369, 86767, 52921, 53588, 71725, 48572, 16053, 89194, 12744, 71650, 37538, 66374, 81290, 41674, 14414]</msg>
<status status="PASS" starttime="20201010 14:28:30.397" endtime="20201010 14:28:30.406"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.413" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 14:28:30.411" endtime="20201010 14:28:30.414"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.418" level="INFO">VALUE: [57201, 35189, 67612, 60277, 19991, 17369, 86767, 52921, 53588, 71725, 48572, 16053, 89194, 12744, 71650, 37538, 66374, 81290, 41674, 14414]</msg>
<status status="PASS" starttime="20201010 14:28:30.415" endtime="20201010 14:28:30.418"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.407" endtime="20201010 14:28:30.419"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.427" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 14:28:30.424" endtime="20201010 14:28:30.427"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.431" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 14:28:30.429" endtime="20201010 14:28:30.431"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.421" endtime="20201010 14:28:30.432"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:30.439" endtime="20201010 14:28:30.736"></status>
</kw>
<msg timestamp="20201010 14:28:30.739" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.568781833, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.668266444, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:30.437" endtime="20201010 14:28:30.739"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.747" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.568781833, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.668266444, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:30.740" endtime="20201010 14:28:30.748"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:30.748" endtime="20201010 14:28:30.750"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.434" endtime="20201010 14:28:30.751"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.433" endtime="20201010 14:28:30.751"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 14:28:30.755" level="INFO">${FILTERED} = [{'diff': 0.09948461100000006}, {'diff': 0.09962998600000006}, {'diff': 0.09962505600000005}, {'diff': 0.09962737499999996}, {'diff': 0.09971498599999995}, {'diff': 0.09954234700000009}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201010 14:28:30.752" endtime="20201010 14:28:30.755"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:30.760" level="INFO">${RESULT} = {'diff': [0.09948461100000006, 0.09962998600000006, 0.09962505600000005, 0.09962737499999996, 0.09971498599999995, 0.09954234700000009, 0.09963473600000006, 0.09962962499999994, 0.09962023600000003, 0...</msg>
<status status="PASS" starttime="20201010 14:28:30.756" endtime="20201010 14:28:30.760"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.764" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 14:28:30.763" endtime="20201010 14:28:30.764"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.766" level="INFO">VALUE: [0.09948461100000006, 0.09962998600000006, 0.09962505600000005, 0.09962737499999996, 0.09971498599999995, 0.09954234700000009, 0.09963473600000006, 0.09962962499999994, 0.09962023600000003, 0.0996377639999999, 0.09963738899999997, 0.09963349999999993, 0.09962413899999989, 0.099627833, 0.0996345139999999, 0.09961973600000018, 0.09963899999999981, 0.09963768099999992, 0.0996304170000002, 0.09963588899999998, 0.09963527800000005, 0.09966150000000029, 0.09960423700000032, 0.09964466700000019, 0.09964074999999983, 0.09963211100000002, 0.09962686099999996, 0.09963918000000005, 0.09964234700000008, 0.09963152700000011, 0.09964840299999977, 0.09963005600000008, 0.09963056899999989, 0.09962551399999997, 0.09963216599999969, 0.09963643099999953, 0.09963970899999985, 0.09964929100000042, 0.09967536100000007, 0.09958338900000019, 0.09963237500000055, 0.09964595799999998, 0.09963493099999976, 0.09963804200000048, 0.09964120899999962, 0.09962970800000015, 0.09962958400000055, 0.09963444499999952, 0.09954063899999976, 0.09963362500000006]</msg>
<status status="PASS" starttime="20201010 14:28:30.765" endtime="20201010 14:28:30.767"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.760" endtime="20201010 14:28:30.767"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:24.798" endtime="20201010 14:28:30.768"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:28:24.728" endtime="20201010 14:28:30.768" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 14:28:30.777" endtime="20201010 14:28:30.797"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.776" endtime="20201010 14:28:30.797"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:30.810" endtime="20201010 14:28:30.823"></status>
</kw>
<msg timestamp="20201010 14:28:30.824" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:30.809" endtime="20201010 14:28:30.824"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.826" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 14:28:30.825" endtime="20201010 14:28:30.826"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 14:28:30.830" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 14:28:30.828" endtime="20201010 14:28:30.830"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:30.806" endtime="20201010 14:28:30.831"></status>
</kw>
<status status="FAIL" starttime="20201010 14:28:30.804" endtime="20201010 14:28:30.831"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.802" endtime="20201010 14:28:30.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 14:28:30.835" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 14:28:30.835" endtime="20201010 14:28:30.836"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.832" endtime="20201010 14:28:30.836"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.802" endtime="20201010 14:28:30.836"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.801" endtime="20201010 14:28:30.836"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:30.837" endtime="20201010 14:28:30.839"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.800" endtime="20201010 14:28:30.839"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.798" endtime="20201010 14:28:30.839"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.774" endtime="20201010 14:28:30.840"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:30.849" endtime="20201010 14:28:36.430"></status>
</kw>
<msg timestamp="20201010 14:28:36.432" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '79225'}, {'interval': '55022'}, {'interval': '39603'}, {'interval': '27161'}, {'interval': '60142'...</msg>
<status status="PASS" starttime="20201010 14:28:30.847" endtime="20201010 14:28:36.432"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.438" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '79225'}, {'interval': '55022'}, {'interval': '39603'}, {'interval': '27161'}, {'interval': '60142'...</msg>
<status status="PASS" starttime="20201010 14:28:36.434" endtime="20201010 14:28:36.438"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:36.440" endtime="20201010 14:28:36.443"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.845" endtime="20201010 14:28:36.444"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.842" endtime="20201010 14:28:36.444"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:36.448" level="INFO">${RESULT} = {'focus': [100000], 'interval': [79225, 55022, 39603, 27161, 60142, 96753, 67584, 13138, 48976, 81075, 58727, 40937, 10090, 32175, 36540, 29935, 78832, 70964, 72466, 76720, 67250, 29297, 88975, 54631,...</msg>
<status status="PASS" starttime="20201010 14:28:36.445" endtime="20201010 14:28:36.448"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 14:28:36.452" level="INFO">${interval} = [79225, 55022, 39603, 27161, 60142, 96753, 67584, 13138, 48976, 81075, 58727, 40937, 10090, 32175, 36540, 29935, 78832, 70964, 72466, 76720, 67250, 29297, 88975, 54631, 44264]</msg>
<status status="PASS" starttime="20201010 14:28:36.449" endtime="20201010 14:28:36.453"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.456" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 14:28:36.455" endtime="20201010 14:28:36.456"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.458" level="INFO">VALUE: [79225, 55022, 39603, 27161, 60142, 96753, 67584, 13138, 48976, 81075, 58727, 40937, 10090, 32175, 36540, 29935, 78832, 70964, 72466, 76720, 67250, 29297, 88975, 54631, 44264]</msg>
<status status="PASS" starttime="20201010 14:28:36.457" endtime="20201010 14:28:36.459"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:36.453" endtime="20201010 14:28:36.459"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.462" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 14:28:36.461" endtime="20201010 14:28:36.463"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.464" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 14:28:36.463" endtime="20201010 14:28:36.465"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:36.460" endtime="20201010 14:28:36.465"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:36.473" endtime="20201010 14:28:36.771"></status>
</kw>
<msg timestamp="20201010 14:28:36.773" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.569351431, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.668993222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:36.472" endtime="20201010 14:28:36.774"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.781" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.569351431, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.668993222, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 14:28:36.775" endtime="20201010 14:28:36.782"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 14:28:36.783" endtime="20201010 14:28:36.784"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:36.468" endtime="20201010 14:28:36.785"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:36.466" endtime="20201010 14:28:36.785"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 14:28:36.789" level="INFO">${FILTERED} = [{'diff': 0.09964179100000004}, {'diff': 0.09966586099999997}, {'diff': 0.0995956950000001}, {'diff': 0.09962759700000001}, {'diff': 0.09963702800000007}, {'diff': 0.09962815299999983}, {'diff': 0.099...</msg>
<status status="PASS" starttime="20201010 14:28:36.786" endtime="20201010 14:28:36.789"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 14:28:36.793" level="INFO">${RESULT} = {'diff': [0.09964179100000004, 0.09966586099999997, 0.0995956950000001, 0.09962759700000001, 0.09963702800000007, 0.09962815299999983, 0.09963701400000002, 0.09962684799999999, 0.09964504100000005, 0....</msg>
<status status="PASS" starttime="20201010 14:28:36.790" endtime="20201010 14:28:36.793"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.797" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 14:28:36.796" endtime="20201010 14:28:36.798"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 14:28:36.800" level="INFO">VALUE: [0.09964179100000004, 0.09966586099999997, 0.0995956950000001, 0.09962759700000001, 0.09963702800000007, 0.09962815299999983, 0.09963701400000002, 0.09962684799999999, 0.09964504100000005, 0.09964413900000002, 0.09964672199999991, 0.09969170900000002, 0.09957736099999992, 0.09963566700000004, 0.09963056999999997, 0.09962123599999995, 0.099642389, 0.09962912500000032, 0.09962493100000014, 0.09962858299999988, 0.0996301940000004, 0.09964025000000021, 0.09971322300000018, 0.09956606899999976, 0.09963469399999969, 0.09964034700000024, 0.09964763799999998, 0.09964441699999993, 0.09964373599999998, 0.09963298600000003, 0.09962597200000012, 0.09972504100000013, 0.09954574999999988, 0.09949111099999985, 0.09962533399999973, 0.09963729099999963, 0.09963040299999992, 0.09964080499999994, 0.09963556900000015, 0.09962320900000066, 0.0996381520000007, 0.0996320690000001, 0.09963983299999946, 0.09962648600000001, 0.0996368470000002, 0.09964280500000022, 0.09962941599999997, 0.09964133300000011, 0.09970593099999991, 0.0995473889999996]</msg>
<status status="PASS" starttime="20201010 14:28:36.798" endtime="20201010 14:28:36.800"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:36.794" endtime="20201010 14:28:36.800"></status>
</kw>
<status status="PASS" starttime="20201010 14:28:30.841" endtime="20201010 14:28:36.801"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 14:28:30.771" endtime="20201010 14:28:36.802" critical="yes"></status>
</test>
<status status="PASS" starttime="20201010 14:27:59.173" endtime="20201010 14:28:36.809"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">saml10-xpro</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201010 14:27:57.012" endtime="20201010 14:28:36.835"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_saml10-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
