<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201015 13:38:14.318" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:38:14.905" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:38:14.914" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:38:16.049" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:38:14.904" endtime="20201015 13:38:16.049"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.052" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:38:16.050" endtime="20201015 13:38:16.052"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:14.902" endtime="20201015 13:38:16.053"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:16.055" endtime="20201015 13:38:16.239"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.053" endtime="20201015 13:38:16.240"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.253" endtime="20201015 13:38:16.275"></status>
</kw>
<msg timestamp="20201015 13:38:16.276" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.251" endtime="20201015 13:38:16.276"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.278" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.277" endtime="20201015 13:38:16.279"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.282" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:16.280" endtime="20201015 13:38:16.282"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:16.249" endtime="20201015 13:38:16.283"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:16.246" endtime="20201015 13:38:16.283"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.245" endtime="20201015 13:38:16.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:16.287" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:16.286" endtime="20201015 13:38:16.288"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.284" endtime="20201015 13:38:16.288"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.244" endtime="20201015 13:38:16.288"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.244" endtime="20201015 13:38:16.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.289" endtime="20201015 13:38:16.291"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.242" endtime="20201015 13:38:16.291"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.292" endtime="20201015 13:38:16.293"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.241" endtime="20201015 13:38:16.294"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:14.901" endtime="20201015 13:38:16.294"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:16.300" endtime="20201015 13:38:16.320"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.299" endtime="20201015 13:38:16.320"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.335" endtime="20201015 13:38:16.353"></status>
</kw>
<msg timestamp="20201015 13:38:16.355" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.332" endtime="20201015 13:38:16.355"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.357" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.356" endtime="20201015 13:38:16.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.360" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:16.358" endtime="20201015 13:38:16.361"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:16.330" endtime="20201015 13:38:16.361"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:16.327" endtime="20201015 13:38:16.362"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.326" endtime="20201015 13:38:16.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:16.366" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:16.365" endtime="20201015 13:38:16.366"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.363" endtime="20201015 13:38:16.366"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.325" endtime="20201015 13:38:16.367"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.324" endtime="20201015 13:38:16.367"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.368" endtime="20201015 13:38:16.369"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.323" endtime="20201015 13:38:16.370"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.321" endtime="20201015 13:38:16.370"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.297" endtime="20201015 13:38:16.370"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.377" endtime="20201015 13:38:16.389"></status>
</kw>
<msg timestamp="20201015 13:38:16.389" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.375" endtime="20201015 13:38:16.390"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.392" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.390" endtime="20201015 13:38:16.392"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.393" endtime="20201015 13:38:16.394"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.373" endtime="20201015 13:38:16.395"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.371" endtime="20201015 13:38:16.395"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.400" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:38:16.398" endtime="20201015 13:38:16.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.402" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:38:16.401" endtime="20201015 13:38:16.402"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.396" endtime="20201015 13:38:16.403"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:16.295" endtime="20201015 13:38:16.404" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:38:14.442" endtime="20201015 13:38:16.406"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.460" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:38:16.470" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:38:17.477" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:38:16.459" endtime="20201015 13:38:17.478"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.480" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:38:17.479" endtime="20201015 13:38:17.480"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.457" endtime="20201015 13:38:17.481"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:17.484" endtime="20201015 13:38:17.706"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.482" endtime="20201015 13:38:17.706"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.718" endtime="20201015 13:38:17.739"></status>
</kw>
<msg timestamp="20201015 13:38:17.740" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:17.717" endtime="20201015 13:38:17.740"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.742" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:17.741" endtime="20201015 13:38:17.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.746" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:17.744" endtime="20201015 13:38:17.746"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:17.714" endtime="20201015 13:38:17.747"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:17.712" endtime="20201015 13:38:17.747"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.711" endtime="20201015 13:38:17.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:17.751" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:17.751" endtime="20201015 13:38:17.752"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.748" endtime="20201015 13:38:17.752"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.710" endtime="20201015 13:38:17.752"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.710" endtime="20201015 13:38:17.752"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.753" endtime="20201015 13:38:17.755"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.709" endtime="20201015 13:38:17.755"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.756" endtime="20201015 13:38:17.758"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.707" endtime="20201015 13:38:17.758"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.453" endtime="20201015 13:38:17.758"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:17.764" endtime="20201015 13:38:17.784"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.763" endtime="20201015 13:38:17.785"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.798" endtime="20201015 13:38:17.816"></status>
</kw>
<msg timestamp="20201015 13:38:17.817" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:17.796" endtime="20201015 13:38:17.817"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.820" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:17.818" endtime="20201015 13:38:17.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.823" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:17.821" endtime="20201015 13:38:17.823"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:17.794" endtime="20201015 13:38:17.824"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:17.791" endtime="20201015 13:38:17.824"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.790" endtime="20201015 13:38:17.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:17.828" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:17.827" endtime="20201015 13:38:17.829"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.825" endtime="20201015 13:38:17.829"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.789" endtime="20201015 13:38:17.829"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.789" endtime="20201015 13:38:17.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.830" endtime="20201015 13:38:17.831"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.787" endtime="20201015 13:38:17.832"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.786" endtime="20201015 13:38:17.832"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.761" endtime="20201015 13:38:17.832"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.840" endtime="20201015 13:38:23.359"></status>
</kw>
<msg timestamp="20201015 13:38:23.360" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:17.839" endtime="20201015 13:38:23.360"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.365" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:23.362" endtime="20201015 13:38:23.366"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:23.367" endtime="20201015 13:38:23.372"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.836" endtime="20201015 13:38:23.373"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.834" endtime="20201015 13:38:23.374"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:23.379" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:23.376" endtime="20201015 13:38:23.380"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:23.424" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:38:23.381" endtime="20201015 13:38:23.424"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.427" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:23.427" endtime="20201015 13:38:23.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.430" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:38:23.429" endtime="20201015 13:38:23.430"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.425" endtime="20201015 13:38:23.430"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:23.437" endtime="20201015 13:38:23.738"></status>
</kw>
<msg timestamp="20201015 13:38:23.741" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565000639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664975486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:23.435" endtime="20201015 13:38:23.741"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.749" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565000639, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664975486, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:23.742" endtime="20201015 13:38:23.750"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:23.750" endtime="20201015 13:38:23.752"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.433" endtime="20201015 13:38:23.753"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.431" endtime="20201015 13:38:23.753"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:23.757" level="INFO">${FILTERED} = [{'diff': 0.09997484700000003}, {'diff': 0.10000416699999992}, {'diff': 0.10000555499999997}, {'diff': 0.10000551400000002}, {'diff': 0.10000601400000009}, {'diff': 0.10000636100000015}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:38:23.754" endtime="20201015 13:38:23.757"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:23.761" level="INFO">${RESULT} = {'diff': [0.09997484700000003, 0.10000416699999992, 0.10000555499999997, 0.10000551400000002, 0.10000601400000009, 0.10000636100000015, 0.1000035130000001, 0.10000434700000005, 0.10000715299999996, 0....</msg>
<status status="PASS" starttime="20201015 13:38:23.758" endtime="20201015 13:38:23.761"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.766" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:23.765" endtime="20201015 13:38:23.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.768" level="INFO">VALUE: [0.09997484700000003, 0.10000416699999992, 0.10000555499999997, 0.10000551400000002, 0.10000601400000009, 0.10000636100000015, 0.1000035130000001, 0.10000434700000005, 0.10000715299999996, 0.10000427799999989, 0.1000038190000001, 0.10000451300000002, 0.10000362500000004, 0.10000637499999998, 0.10000566700000002, 0.1000034590000003, 0.10000387500000008, 0.10000694500000007, 0.10000623600000003, 0.10000354200000006, 0.10000541699999976, 0.10000474999999964, 0.1000071109999996, 0.10000452800000037, 0.10000479200000001, 0.10000676400000019, 0.10000715299999996, 0.10000548600000014, 0.10000533299999992, 0.10000323600000005, 0.10000523599999989, 0.10000565299999975, 0.10000370800000002, 0.10000705499999984, 0.10000366599999966, 0.10000418, 0.10000354199999961, 0.10000598600000021, 0.10000373600000056, 0.10000648599999984, 0.10000418, 0.10000569500000012, 0.10000604099999943, 0.1000046250000004, 0.10000344400000039, 0.10000381999999952, 0.10000481999999966, 0.10000572299999977, 0.10000549999999997, 0.10000524999999971]</msg>
<status status="PASS" starttime="20201015 13:38:23.767" endtime="20201015 13:38:23.768"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.761" endtime="20201015 13:38:23.769"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.833" endtime="20201015 13:38:23.769"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:17.759" endtime="20201015 13:38:23.770" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:23.776" endtime="20201015 13:38:23.796"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.775" endtime="20201015 13:38:23.796"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:23.809" endtime="20201015 13:38:23.827"></status>
</kw>
<msg timestamp="20201015 13:38:23.828" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:23.807" endtime="20201015 13:38:23.828"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.830" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:23.829" endtime="20201015 13:38:23.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:23.833" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:23.831" endtime="20201015 13:38:23.834"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:23.805" endtime="20201015 13:38:23.834"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:23.802" endtime="20201015 13:38:23.835"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.801" endtime="20201015 13:38:23.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:23.839" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:23.838" endtime="20201015 13:38:23.840"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.836" endtime="20201015 13:38:23.840"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.801" endtime="20201015 13:38:23.840"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.800" endtime="20201015 13:38:23.840"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:23.841" endtime="20201015 13:38:23.842"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.799" endtime="20201015 13:38:23.843"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.797" endtime="20201015 13:38:23.843"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.774" endtime="20201015 13:38:23.844"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:23.853" endtime="20201015 13:38:29.369"></status>
</kw>
<msg timestamp="20201015 13:38:29.370" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:38:23.851" endtime="20201015 13:38:29.371"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.376" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:38:29.372" endtime="20201015 13:38:29.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:29.378" endtime="20201015 13:38:29.381"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.847" endtime="20201015 13:38:29.382"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.845" endtime="20201015 13:38:29.383"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:29.388" level="INFO">${RESULT} = {'interval': [10000, 12250, 14500, 16750, 19000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:29.385" endtime="20201015 13:38:29.389"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:29.398" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:38:29.390" endtime="20201015 13:38:29.399"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.406" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:29.404" endtime="20201015 13:38:29.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.410" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:38:29.408" endtime="20201015 13:38:29.411"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.400" endtime="20201015 13:38:29.412"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:29.426" endtime="20201015 13:38:29.730"></status>
</kw>
<msg timestamp="20201015 13:38:29.733" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565926708, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665931333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:29.422" endtime="20201015 13:38:29.733"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.740" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565926708, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665931333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:29.734" endtime="20201015 13:38:29.741"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:29.742" endtime="20201015 13:38:29.743"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.416" endtime="20201015 13:38:29.744"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.413" endtime="20201015 13:38:29.744"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:29.748" level="INFO">${FILTERED} = [{'diff': 0.10000462499999996}, {'diff': 0.10000333400000005}, {'diff': 0.10000472299999996}, {'diff': 0.10000705599999993}, {'diff': 0.10000504199999993}, {'diff': 0.10000438899999997}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:38:29.745" endtime="20201015 13:38:29.749"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:29.753" level="INFO">${RESULT} = {'diff': [0.10000462499999996, 0.10000333400000005, 0.10000472299999996, 0.10000705599999993, 0.10000504199999993, 0.10000438899999997, 0.10000811099999996, 0.10000552800000007, 0.10000687500000005, 0...</msg>
<status status="PASS" starttime="20201015 13:38:29.749" endtime="20201015 13:38:29.753"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.757" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:29.756" endtime="20201015 13:38:29.757"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.760" level="INFO">VALUE: [0.10000462499999996, 0.10000333400000005, 0.10000472299999996, 0.10000705599999993, 0.10000504199999993, 0.10000438899999997, 0.10000811099999996, 0.10000552800000007, 0.10000687500000005, 0.10000687500000005, 0.10000143099999992, 0.10000648600000006, 0.1000059579999999, 0.10000326400000015, 0.10000565199999989, 0.10000401400000003, 0.10000441599999998, 0.10000433299999978, 0.10000683300000013, 0.10000529199999963, 0.10000684800000004, 0.10000312500000019, 0.10000688899999988, 0.10000379199999987, 0.10000705599999993, 0.10000223599999991, 0.10000423599999975, 0.10000808300000008, 0.10000680500000003, 0.10000238900000014, 0.10000794400000013, 0.10000601400000031, 0.1000038889999999, 0.10000506899999984, 0.10000718000000042, 0.10000402799999986, 0.10000665299999945, 0.1000034310000002, 0.10000327799999997, 0.10000448600000045, 0.10000456900000021, 0.10000562499999965, 0.10000687500000005, 0.10000447200000018, 0.10000469400000078, 0.10000325000000032, 0.100007819, 0.10000351299999988, 0.10000670800000044, 0.10000356900000007]</msg>
<status status="PASS" starttime="20201015 13:38:29.758" endtime="20201015 13:38:29.760"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.754" endtime="20201015 13:38:29.760"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:23.844" endtime="20201015 13:38:29.761"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:23.771" endtime="20201015 13:38:29.761" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:29.768" endtime="20201015 13:38:29.787"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.766" endtime="20201015 13:38:29.788"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:29.801" endtime="20201015 13:38:29.820"></status>
</kw>
<msg timestamp="20201015 13:38:29.820" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:29.800" endtime="20201015 13:38:29.820"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.823" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:29.821" endtime="20201015 13:38:29.823"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:29.826" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:29.824" endtime="20201015 13:38:29.826"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:29.797" endtime="20201015 13:38:29.827"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:29.795" endtime="20201015 13:38:29.827"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.794" endtime="20201015 13:38:29.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:29.831" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:29.831" endtime="20201015 13:38:29.832"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.828" endtime="20201015 13:38:29.832"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.793" endtime="20201015 13:38:29.833"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.792" endtime="20201015 13:38:29.833"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:29.834" endtime="20201015 13:38:29.835"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.790" endtime="20201015 13:38:29.836"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.789" endtime="20201015 13:38:29.837"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.765" endtime="20201015 13:38:29.837"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:29.845" endtime="20201015 13:38:35.370"></status>
</kw>
<msg timestamp="20201015 13:38:35.371" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:38:29.843" endtime="20201015 13:38:35.372"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.376" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:38:35.373" endtime="20201015 13:38:35.377"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:35.379" endtime="20201015 13:38:35.382"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.841" endtime="20201015 13:38:35.383"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.839" endtime="20201015 13:38:35.384"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:35.390" level="INFO">${RESULT} = {'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:35.385" endtime="20201015 13:38:35.390"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:35.400" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:35.392" endtime="20201015 13:38:35.400"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.407" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:35.405" endtime="20201015 13:38:35.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.411" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:35.409" endtime="20201015 13:38:35.412"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.401" endtime="20201015 13:38:35.413"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:35.426" endtime="20201015 13:38:35.728"></status>
</kw>
<msg timestamp="20201015 13:38:35.731" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.579965375, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.679971889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:35.423" endtime="20201015 13:38:35.731"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.739" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.579965375, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.679971889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:35.732" endtime="20201015 13:38:35.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:35.740" endtime="20201015 13:38:35.742"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.418" endtime="20201015 13:38:35.742"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.414" endtime="20201015 13:38:35.742"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:35.746" level="INFO">${FILTERED} = [{'diff': 0.10000651400000005}, {'diff': 0.100004486}, {'diff': 0.10000556900000002}, {'diff': 0.10000426400000006}, {'diff': 0.10000580599999986}, {'diff': 0.10000505599999987}, {'diff': 0.1000060419...</msg>
<status status="PASS" starttime="20201015 13:38:35.743" endtime="20201015 13:38:35.746"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:35.751" level="INFO">${RESULT} = {'diff': [0.10000651400000005, 0.100004486, 0.10000556900000002, 0.10000426400000006, 0.10000580599999986, 0.10000505599999987, 0.10000604199999996, 0.10000413899999994, 0.10000616699999987, 0.1000023...</msg>
<status status="PASS" starttime="20201015 13:38:35.747" endtime="20201015 13:38:35.751"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.756" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:35.755" endtime="20201015 13:38:35.756"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.758" level="INFO">VALUE: [0.10000651400000005, 0.100004486, 0.10000556900000002, 0.10000426400000006, 0.10000580599999986, 0.10000505599999987, 0.10000604199999996, 0.10000413899999994, 0.10000616699999987, 0.10000231999999998, 0.100006445, 0.10000747199999993, 0.1000037359999999, 0.10000440300000002, 0.10000520800000001, 0.10000509699999993, 0.10000536100000001, 0.10000550000000041, 0.10000773600000024, 0.10000341699999993, 0.10000330600000007, 0.100005597, 0.10000515299999968, 0.10000429199999994, 0.10000387500000008, 0.10000348599999986, 0.100005028, 0.10000351399999996, 0.1000058199999998, 0.10000475000000009, 0.1000057769999998, 0.10000468100000015, 0.100003917, 0.10000698599999991, 0.10000713800000005, 0.10000704199999966, 0.10000486199999958, 0.10000225000000018, 0.10000418100000008, 0.10000443100000034, 0.10000586100000053, 0.10000573599999996, 0.10000436099999988, 0.10000366700000018, 0.10000426400000073, 0.10000637499999954, 0.10000704099999957, 0.10000780500000062, 0.10000238900000014, 0.10000650000000011]</msg>
<status status="PASS" starttime="20201015 13:38:35.757" endtime="20201015 13:38:35.758"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.752" endtime="20201015 13:38:35.759"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:29.838" endtime="20201015 13:38:35.759"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:29.763" endtime="20201015 13:38:35.760" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:35.766" endtime="20201015 13:38:35.785"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.765" endtime="20201015 13:38:35.786"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:35.801" endtime="20201015 13:38:35.819"></status>
</kw>
<msg timestamp="20201015 13:38:35.819" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:35.797" endtime="20201015 13:38:35.820"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.822" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:35.820" endtime="20201015 13:38:35.822"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:35.825" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:35.823" endtime="20201015 13:38:35.825"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:35.795" endtime="20201015 13:38:35.826"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:35.792" endtime="20201015 13:38:35.826"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.791" endtime="20201015 13:38:35.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:35.830" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:35.830" endtime="20201015 13:38:35.831"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.827" endtime="20201015 13:38:35.831"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.790" endtime="20201015 13:38:35.831"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.790" endtime="20201015 13:38:35.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:35.832" endtime="20201015 13:38:35.833"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.788" endtime="20201015 13:38:35.834"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.787" endtime="20201015 13:38:35.834"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.763" endtime="20201015 13:38:35.835"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:35.843" endtime="20201015 13:38:41.381"></status>
</kw>
<msg timestamp="20201015 13:38:41.382" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:35.841" endtime="20201015 13:38:41.383"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.388" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:41.385" endtime="20201015 13:38:41.389"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:41.391" endtime="20201015 13:38:41.394"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.839" endtime="20201015 13:38:41.395"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.837" endtime="20201015 13:38:41.396"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:41.402" level="INFO">${RESULT} = {'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:41.397" endtime="20201015 13:38:41.402"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:41.412" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:41.404" endtime="20201015 13:38:41.412"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.419" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:41.417" endtime="20201015 13:38:41.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.424" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:41.422" endtime="20201015 13:38:41.424"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.413" endtime="20201015 13:38:41.425"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:41.438" endtime="20201015 13:38:41.742"></status>
</kw>
<msg timestamp="20201015 13:38:41.745" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.580083264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.680079431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:41.435" endtime="20201015 13:38:41.746"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.753" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.580083264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.680079431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:41.746" endtime="20201015 13:38:41.754"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:41.754" endtime="20201015 13:38:41.756"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.430" endtime="20201015 13:38:41.756"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.426" endtime="20201015 13:38:41.757"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:41.761" level="INFO">${FILTERED} = [{'diff': 0.09999616700000002}, {'diff': 0.10000519400000007}, {'diff': 0.10000530500000004}, {'diff': 0.10000334799999999}, {'diff': 0.10000704199999988}, {'diff': 0.10002599999999995}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:38:41.758" endtime="20201015 13:38:41.761"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:41.764" level="INFO">${RESULT} = {'diff': [0.09999616700000002, 0.10000519400000007, 0.10000530500000004, 0.10000334799999999, 0.10000704199999988, 0.10002599999999995, 0.09998154199999987, 0.10000422199999992, 0.10000329200000002, 0...</msg>
<status status="PASS" starttime="20201015 13:38:41.762" endtime="20201015 13:38:41.765"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.769" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:41.767" endtime="20201015 13:38:41.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.771" level="INFO">VALUE: [0.09999616700000002, 0.10000519400000007, 0.10000530500000004, 0.10000334799999999, 0.10000704199999988, 0.10002599999999995, 0.09998154199999987, 0.10000422199999992, 0.10000329200000002, 0.10000631900000001, 0.100006139, 0.10002884699999992, 0.09998109700000013, 0.10000481900000002, 0.1000066799999999, 0.1000045140000001, 0.1000182780000003, 0.09999255599999968, 0.10000231900000012, 0.10000569400000003, 0.10000545900000013, 0.10000455600000002, 0.1000045420000002, 0.10000363900000009, 0.10000418100000008, 0.10000437500000015, 0.10000780500000017, 0.10000704100000002, 0.1000055139999998, 0.10000584700000026, 0.10000597199999994, 0.1000024719999999, 0.10000661200000005, 0.10000612500000017, 0.10000648599999984, 0.10000543099999959, 0.1000048609999995, 0.10001566700000009, 0.09999320799999989, 0.10000666599999963, 0.10000342999999923, 0.1000069029999997, 0.10000301400000033, 0.10000647199999957, 0.10000443000000026, 0.1000049169999997, 0.10000659800000022, 0.1000040560000004, 0.10000493099999996, 0.10000705499999984]</msg>
<status status="PASS" starttime="20201015 13:38:41.770" endtime="20201015 13:38:41.772"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.765" endtime="20201015 13:38:41.772"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:35.835" endtime="20201015 13:38:41.773"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:35.761" endtime="20201015 13:38:41.773" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:41.780" endtime="20201015 13:38:41.799"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.778" endtime="20201015 13:38:41.799"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:41.813" endtime="20201015 13:38:41.829"></status>
</kw>
<msg timestamp="20201015 13:38:41.830" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:41.812" endtime="20201015 13:38:41.830"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.832" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:41.831" endtime="20201015 13:38:41.832"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:41.835" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:41.833" endtime="20201015 13:38:41.835"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:41.809" endtime="20201015 13:38:41.836"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:41.806" endtime="20201015 13:38:41.836"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.805" endtime="20201015 13:38:41.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:41.840" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:41.840" endtime="20201015 13:38:41.841"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.838" endtime="20201015 13:38:41.841"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.804" endtime="20201015 13:38:41.841"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.803" endtime="20201015 13:38:41.841"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:41.842" endtime="20201015 13:38:41.844"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.802" endtime="20201015 13:38:41.844"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.800" endtime="20201015 13:38:41.845"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.777" endtime="20201015 13:38:41.845"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:41.853" endtime="20201015 13:38:47.400"></status>
</kw>
<msg timestamp="20201015 13:38:47.401" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:41.851" endtime="20201015 13:38:47.402"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.407" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:47.403" endtime="20201015 13:38:47.408"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:47.409" endtime="20201015 13:38:47.412"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.849" endtime="20201015 13:38:47.414"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.847" endtime="20201015 13:38:47.415"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:47.426" level="INFO">${RESULT} = {'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:47.421" endtime="20201015 13:38:47.427"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:47.436" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:47.428" endtime="20201015 13:38:47.437"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.446" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:47.444" endtime="20201015 13:38:47.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.450" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:47.448" endtime="20201015 13:38:47.451"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.438" endtime="20201015 13:38:47.452"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:47.465" endtime="20201015 13:38:47.770"></status>
</kw>
<msg timestamp="20201015 13:38:47.773" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.58731975, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.687324639, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:38:47.462" endtime="20201015 13:38:47.773"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.780" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.58731975, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.687324639, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:38:47.774" endtime="20201015 13:38:47.781"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:47.782" endtime="20201015 13:38:47.783"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.457" endtime="20201015 13:38:47.784"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.453" endtime="20201015 13:38:47.784"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:47.788" level="INFO">${FILTERED} = [{'diff': 0.10000488899999993}, {'diff': 0.10000616699999998}, {'diff': 0.10000551400000002}, {'diff': 0.10000452800000004}, {'diff': 0.10000345799999999}, {'diff': 0.10000918099999989}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:38:47.785" endtime="20201015 13:38:47.788"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:47.792" level="INFO">${RESULT} = {'diff': [0.10000488899999993, 0.10000616699999998, 0.10000551400000002, 0.10000452800000004, 0.10000345799999999, 0.10000918099999989, 0.10000109700000004, 0.10000648599999984, 0.100006139, 0.1000040...</msg>
<status status="PASS" starttime="20201015 13:38:47.789" endtime="20201015 13:38:47.792"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.796" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:47.795" endtime="20201015 13:38:47.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.799" level="INFO">VALUE: [0.10000488899999993, 0.10000616699999998, 0.10000551400000002, 0.10000452800000004, 0.10000345799999999, 0.10000918099999989, 0.10000109700000004, 0.10000648599999984, 0.100006139, 0.10000405599999995, 0.10000679200000007, 0.10000411099999984, 0.10000449999999983, 0.10000516599999987, 0.10000480600000006, 0.10000581900000016, 0.10000598599999977, 0.10000579099999962, 0.10000505500000001, 0.10000383299999971, 0.10000643000000009, 0.10000347200000004, 0.10000531900000009, 0.10000677700000038, 0.10000611199999998, 0.10000788799999993, 0.10002669399999986, 0.0999826119999998, 0.100003375, 0.10000602800000014, 0.10000430599999977, 0.10000447200000018, 0.10000547200000032, 0.10000718100000006, 0.10000473600000026, 0.10000379199999987, 0.1000022920000001, 0.10000602800000014, 0.10000472200000043, 0.10000787500000019, 0.10000555500000008, 0.10000536100000001, 0.10000540199999985, 0.10000481899999958, 0.10000588900000018, 0.10000372300000038, 0.10000561100000027, 0.1000058199999998, 0.10000513899999941, 0.1000048609999995]</msg>
<status status="PASS" starttime="20201015 13:38:47.798" endtime="20201015 13:38:47.800"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.793" endtime="20201015 13:38:47.800"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:41.845" endtime="20201015 13:38:47.801"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:41.775" endtime="20201015 13:38:47.801" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:47.808" endtime="20201015 13:38:47.828"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.807" endtime="20201015 13:38:47.828"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:47.841" endtime="20201015 13:38:47.859"></status>
</kw>
<msg timestamp="20201015 13:38:47.859" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:47.839" endtime="20201015 13:38:47.859"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.861" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['esp32-wroom-32', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:47.860" endtime="20201015 13:38:47.862"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:47.864" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:47.862" endtime="20201015 13:38:47.865"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:47.837" endtime="20201015 13:38:47.865"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:47.834" endtime="20201015 13:38:47.866"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.833" endtime="20201015 13:38:47.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:47.870" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:47.869" endtime="20201015 13:38:47.870"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.867" endtime="20201015 13:38:47.870"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.833" endtime="20201015 13:38:47.871"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.832" endtime="20201015 13:38:47.871"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:47.872" endtime="20201015 13:38:47.873"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.831" endtime="20201015 13:38:47.873"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.829" endtime="20201015 13:38:47.874"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.805" endtime="20201015 13:38:47.874"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:47.883" endtime="20201015 13:38:53.439"></status>
</kw>
<msg timestamp="20201015 13:38:53.440" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:47.881" endtime="20201015 13:38:53.440"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.445" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:53.442" endtime="20201015 13:38:53.446"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:53.448" endtime="20201015 13:38:53.451"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.878" endtime="20201015 13:38:53.452"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.876" endtime="20201015 13:38:53.453"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:53.460" level="INFO">${RESULT} = {'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000], 'focus': ...</msg>
<status status="PASS" starttime="20201015 13:38:53.455" endtime="20201015 13:38:53.460"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:53.471" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:53.462" endtime="20201015 13:38:53.471"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.478" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:53.476" endtime="20201015 13:38:53.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.483" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:53.481" endtime="20201015 13:38:53.483"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.472" endtime="20201015 13:38:53.484"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:53.498" endtime="20201015 13:38:53.800"></status>
</kw>
<msg timestamp="20201015 13:38:53.802" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.600143097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.700174819, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:53.495" endtime="20201015 13:38:53.803"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.810" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.600143097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.700174819, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:53.803" endtime="20201015 13:38:53.810"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:53.811" endtime="20201015 13:38:53.813"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.489" endtime="20201015 13:38:53.813"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.486" endtime="20201015 13:38:53.814"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:53.817" level="INFO">${FILTERED} = [{'diff': 0.10003172199999999}, {'diff': 0.09996522200000002}, {'diff': 0.09999722200000005}, {'diff': 0.1000048750000001}, {'diff': 0.1000334169999999}, {'diff': 0.09997705500000009}, {'diff': 0.1000...</msg>
<status status="PASS" starttime="20201015 13:38:53.815" endtime="20201015 13:38:53.818"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:53.822" level="INFO">${RESULT} = {'diff': [0.10003172199999999, 0.09996522200000002, 0.09999722200000005, 0.1000048750000001, 0.1000334169999999, 0.09997705500000009, 0.10000756899999996, 0.10000590300000001, 0.1000066380000002, 0.10...</msg>
<status status="PASS" starttime="20201015 13:38:53.819" endtime="20201015 13:38:53.822"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.826" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:53.825" endtime="20201015 13:38:53.827"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.829" level="INFO">VALUE: [0.10003172199999999, 0.09996522200000002, 0.09999722200000005, 0.1000048750000001, 0.1000334169999999, 0.09997705500000009, 0.10000756899999996, 0.10000590300000001, 0.1000066380000002, 0.100004223, 0.10000663899999984, 0.10000591700000006, 0.10000437500000015, 0.10000540299999972, 0.10000343099999975, 0.10000587499999991, 0.1000065280000002, 0.10000315300000029, 0.10000470800000016, 0.10000606899999998, 0.10000604100000032, 0.10000279100000009, 0.10000461100000013, 0.10000259700000003, 0.10000331900000026, 0.10000545800000005, 0.10000768000000004, 0.10000327799999997, 0.10000518100000022, 0.10000802799999997, 0.10000223599999991, 0.10000542999999995, 0.10000429099999986, 0.10000336199999982, 0.10000718099999961, 0.10000531999999929, 0.10000761099999966, 0.10000255599999974, 0.10000492999999988, 0.10000704100000046, 0.10000266599999996, 0.10000705499999984, 0.10000595799999967, 0.10000423700000027, 0.10000897299999956, 0.10000675000000037, 0.10000505600000054, 0.10000384699999998, 0.1000067360000001, 0.1000062220000002]</msg>
<status status="PASS" starttime="20201015 13:38:53.827" endtime="20201015 13:38:53.829"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.823" endtime="20201015 13:38:53.830"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:47.875" endtime="20201015 13:38:53.830"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_esp32-wroom-32</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:47.803" endtime="20201015 13:38:53.830" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:38:16.412" endtime="20201015 13:38:53.838"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">esp32-wroom-32</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:38:14.321" endtime="20201015 13:38:53.863"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_esp32-wroom-32</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
