<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201015 13:38:34.650" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:38:38.293" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:38:38.302" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:38:39.476" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:38:38.292" endtime="20201015 13:38:39.478"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:38:42.483" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201015 13:38:39.480" endtime="20201015 13:38:42.484"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:38.291" endtime="20201015 13:38:42.485"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:42.490" endtime="20201015 13:38:42.755"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:42.487" endtime="20201015 13:38:42.755"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:42.768" endtime="20201015 13:38:45.790"></status>
</kw>
<msg timestamp="20201015 13:38:45.791" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:42.767" endtime="20201015 13:38:45.792"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:45.797" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:45.794" endtime="20201015 13:38:45.797"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:45.803" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:45.799" endtime="20201015 13:38:45.804"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:42.764" endtime="20201015 13:38:45.805"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:42.762" endtime="20201015 13:38:45.807"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:42.761" endtime="20201015 13:38:45.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:45.815" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:45.813" endtime="20201015 13:38:45.816"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.809" endtime="20201015 13:38:45.816"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:42.760" endtime="20201015 13:38:45.817"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:42.759" endtime="20201015 13:38:45.817"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:45.818" endtime="20201015 13:38:45.821"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:42.758" endtime="20201015 13:38:45.822"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:45.824" endtime="20201015 13:38:45.828"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:42.756" endtime="20201015 13:38:45.830"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:38.289" endtime="20201015 13:38:45.830"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:45.843" endtime="20201015 13:38:45.864"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.840" endtime="20201015 13:38:45.866"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:45.895" endtime="20201015 13:38:48.919"></status>
</kw>
<msg timestamp="20201015 13:38:48.920" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:45.890" endtime="20201015 13:38:48.920"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:48.925" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:48.922" endtime="20201015 13:38:48.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:48.931" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:48.927" endtime="20201015 13:38:48.931"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:45.885" endtime="20201015 13:38:48.933"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:45.880" endtime="20201015 13:38:48.934"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.876" endtime="20201015 13:38:48.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:48.942" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:48.941" endtime="20201015 13:38:48.943"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:48.936" endtime="20201015 13:38:48.943"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.874" endtime="20201015 13:38:48.944"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.873" endtime="20201015 13:38:48.944"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:48.946" endtime="20201015 13:38:48.949"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.870" endtime="20201015 13:38:48.950"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.867" endtime="20201015 13:38:48.951"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:45.837" endtime="20201015 13:38:48.951"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:48.965" endtime="20201015 13:38:48.980"></status>
</kw>
<msg timestamp="20201015 13:38:48.981" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:48.962" endtime="20201015 13:38:48.981"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:48.984" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:48.982" endtime="20201015 13:38:48.984"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:48.985" endtime="20201015 13:38:48.986"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:48.956" endtime="20201015 13:38:48.987"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:48.953" endtime="20201015 13:38:48.987"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:48.991" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:38:48.990" endtime="20201015 13:38:48.992"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:48.993" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:38:48.992" endtime="20201015 13:38:48.994"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:48.988" endtime="20201015 13:38:48.994"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:45.831" endtime="20201015 13:38:48.995" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:38:34.773" endtime="20201015 13:38:48.998"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:38:49.051" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:38:49.059" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:38:50.178" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:38:49.049" endtime="20201015 13:38:50.178"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:38:53.181" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201015 13:38:50.179" endtime="20201015 13:38:53.182"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:49.048" endtime="20201015 13:38:53.184"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:53.188" endtime="20201015 13:38:53.456"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.185" endtime="20201015 13:38:53.457"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:53.469" endtime="20201015 13:38:56.490"></status>
</kw>
<msg timestamp="20201015 13:38:56.491" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:53.467" endtime="20201015 13:38:56.491"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:56.496" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:56.493" endtime="20201015 13:38:56.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:56.502" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:56.498" endtime="20201015 13:38:56.503"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:53.465" endtime="20201015 13:38:56.504"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:53.463" endtime="20201015 13:38:56.505"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.461" endtime="20201015 13:38:56.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:56.513" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:56.512" endtime="20201015 13:38:56.514"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.508" endtime="20201015 13:38:56.515"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.461" endtime="20201015 13:38:56.515"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.460" endtime="20201015 13:38:56.516"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:56.517" endtime="20201015 13:38:56.520"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.459" endtime="20201015 13:38:56.521"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:56.523" endtime="20201015 13:38:56.526"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:53.457" endtime="20201015 13:38:56.527"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:49.047" endtime="20201015 13:38:56.528"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:56.539" endtime="20201015 13:38:56.562"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.536" endtime="20201015 13:38:56.564"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:56.590" endtime="20201015 13:38:59.614"></status>
</kw>
<msg timestamp="20201015 13:38:59.615" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:56.587" endtime="20201015 13:38:59.616"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:59.621" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:59.618" endtime="20201015 13:38:59.622"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:59.627" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:59.623" endtime="20201015 13:38:59.628"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:56.582" endtime="20201015 13:38:59.629"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:56.577" endtime="20201015 13:38:59.630"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.574" endtime="20201015 13:38:59.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:59.638" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:59.637" endtime="20201015 13:38:59.639"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:59.633" endtime="20201015 13:38:59.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.573" endtime="20201015 13:38:59.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.571" endtime="20201015 13:38:59.640"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:59.642" endtime="20201015 13:38:59.645"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.569" endtime="20201015 13:38:59.646"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.565" endtime="20201015 13:38:59.647"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:56.533" endtime="20201015 13:38:59.648"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:59.665" endtime="20201015 13:39:05.183"></status>
</kw>
<msg timestamp="20201015 13:39:05.184" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:59.661" endtime="20201015 13:39:05.184"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:05.189" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:05.186" endtime="20201015 13:39:05.190"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:05.191" endtime="20201015 13:39:05.196"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:59.656" endtime="20201015 13:39:05.197"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:59.652" endtime="20201015 13:39:05.198"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:05.203" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:39:05.200" endtime="20201015 13:39:05.204"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:39:05.261" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:39:05.205" endtime="20201015 13:39:05.262"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:05.270" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:39:05.267" endtime="20201015 13:39:05.271"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:05.274" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:39:05.272" endtime="20201015 13:39:05.275"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.263" endtime="20201015 13:39:05.276"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:05.290" endtime="20201015 13:39:05.598"></status>
</kw>
<msg timestamp="20201015 13:39:05.601" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.614042194, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.714048889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:05.286" endtime="20201015 13:39:05.601"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:05.609" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.614042194, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.714048889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:05.602" endtime="20201015 13:39:05.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:05.611" endtime="20201015 13:39:05.612"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.281" endtime="20201015 13:39:05.613"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.277" endtime="20201015 13:39:05.613"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:39:05.618" level="INFO">${FILTERED} = [{'diff': 0.10000669499999981}, {'diff': 0.1000058199999998}, {'diff': 0.10000819500000002}, {'diff': 0.1000070980000003}, {'diff': 0.10000659700000014}, {'diff': 0.1000079309999995}, {'diff': 0.10000...</msg>
<status status="PASS" starttime="20201015 13:39:05.614" endtime="20201015 13:39:05.618"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:05.622" level="INFO">${RESULT} = {'diff': [0.10000669499999981, 0.1000058199999998, 0.10000819500000002, 0.1000070980000003, 0.10000659700000014, 0.1000079309999995, 0.10000626400000012, 0.10000499999999946, 0.10000865299999973, 0.10...</msg>
<status status="PASS" starttime="20201015 13:39:05.619" endtime="20201015 13:39:05.622"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:05.627" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:39:05.626" endtime="20201015 13:39:05.627"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:05.629" level="INFO">VALUE: [0.10000669499999981, 0.1000058199999998, 0.10000819500000002, 0.1000070980000003, 0.10000659700000014, 0.1000079309999995, 0.10000626400000012, 0.10000499999999946, 0.10000865299999973, 0.10000504100000018, 0.10000745799999944, 0.10000617999999939, 0.10000536100000001, 0.10000691699999997, 0.10000829200000005, 0.10000520800000068, 0.10000458299999959, 0.10000948600000026, 0.10000683399999932, 0.10000624999999985, 0.10000608300000025, 0.10000742999999979, 0.10000768000000004, 0.10000718000000042, 0.10000647200000046, 0.10000831899999962, 0.1000076950000004, 0.10000809699999991, 0.10000594500000037, 0.10000498700000016, 0.1000059999999996, 0.10000931999999985, 0.10000541700000021, 0.10000759700000028, 0.10000641699999946, 0.10000487499999977, 0.10000623599999958, 0.10000662500000068, 0.10000647199999957, 0.10000808299999964, 0.10000490299999942, 0.1000082640000004, 0.10000665300000033, 0.10000731900000037, 0.10000516699999906, 0.10000554199999989, 0.10000654100000084, 0.10000730600000018, 0.10000715199999988, 0.10000591700000072]</msg>
<status status="PASS" starttime="20201015 13:39:05.628" endtime="20201015 13:39:05.630"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.623" endtime="20201015 13:39:05.630"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:59.649" endtime="20201015 13:39:05.631"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:56.528" endtime="20201015 13:39:05.631" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:39:05.638" endtime="20201015 13:39:05.658"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.637" endtime="20201015 13:39:05.658"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:05.672" endtime="20201015 13:39:08.686"></status>
</kw>
<msg timestamp="20201015 13:39:08.687" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:05.671" endtime="20201015 13:39:08.687"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:08.689" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:08.688" endtime="20201015 13:39:08.690"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:39:08.693" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:39:08.691" endtime="20201015 13:39:08.693"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:05.668" endtime="20201015 13:39:08.694"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:05.665" endtime="20201015 13:39:08.694"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.664" endtime="20201015 13:39:08.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:39:08.699" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:39:08.698" endtime="20201015 13:39:08.699"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:08.696" endtime="20201015 13:39:08.700"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.663" endtime="20201015 13:39:08.700"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.662" endtime="20201015 13:39:08.700"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:08.701" endtime="20201015 13:39:08.702"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.661" endtime="20201015 13:39:08.703"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.659" endtime="20201015 13:39:08.703"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:05.635" endtime="20201015 13:39:08.704"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:08.713" endtime="20201015 13:39:14.243"></status>
</kw>
<msg timestamp="20201015 13:39:14.244" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:39:08.712" endtime="20201015 13:39:14.245"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:14.250" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:39:14.247" endtime="20201015 13:39:14.251"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:14.252" endtime="20201015 13:39:14.256"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:08.708" endtime="20201015 13:39:14.257"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:08.706" endtime="20201015 13:39:14.258"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:14.264" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 12250, 14500, 16750, 19000]}</msg>
<status status="PASS" starttime="20201015 13:39:14.260" endtime="20201015 13:39:14.264"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:39:14.275" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:39:14.266" endtime="20201015 13:39:14.275"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:14.283" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:39:14.281" endtime="20201015 13:39:14.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:14.288" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:39:14.286" endtime="20201015 13:39:14.289"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.277" endtime="20201015 13:39:14.290"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:14.304" endtime="20201015 13:39:14.611"></status>
</kw>
<msg timestamp="20201015 13:39:14.614" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.564961333, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.664965431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:14.301" endtime="20201015 13:39:14.615"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:14.622" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.564961333, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.664965431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:14.615" endtime="20201015 13:39:14.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:14.623" endtime="20201015 13:39:14.625"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.295" endtime="20201015 13:39:14.626"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.291" endtime="20201015 13:39:14.626"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:39:14.631" level="INFO">${FILTERED} = [{'diff': 0.10000409800000032}, {'diff': 0.100007014}, {'diff': 0.10000540199999985}, {'diff': 0.1000085829999997}, {'diff': 0.10000573599999996}, {'diff': 0.10000695799999981}, {'diff': 0.10000966600...</msg>
<status status="PASS" starttime="20201015 13:39:14.627" endtime="20201015 13:39:14.631"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:14.636" level="INFO">${RESULT} = {'diff': [0.10000409800000032, 0.100007014, 0.10000540199999985, 0.1000085829999997, 0.10000573599999996, 0.10000695799999981, 0.10000966600000005, 0.10000512500000003, 0.1000104300000002, 0.100007500...</msg>
<status status="PASS" starttime="20201015 13:39:14.632" endtime="20201015 13:39:14.636"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:14.640" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:39:14.639" endtime="20201015 13:39:14.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:14.643" level="INFO">VALUE: [0.10000409800000032, 0.100007014, 0.10000540199999985, 0.1000085829999997, 0.10000573599999996, 0.10000695799999981, 0.10000966600000005, 0.10000512500000003, 0.1000104300000002, 0.10000750000000025, 0.10000416699999981, 0.10000805600000007, 0.10000762499999993, 0.10000594500000037, 0.10000540299999994, 0.1000057640000005, 0.10000704099999957, 0.10000698700000044, 0.100006402, 0.10000791600000003, 0.10000755499999947, 0.10000580499999945, 0.10000744400000006, 0.10000651400000038, 0.1000086109999998, 0.1000040000000002, 0.10000591699999983, 0.10000966700000014, 0.10000738899999995, 0.10000501399999973, 0.10000950000000053, 0.10000759699999939, 0.10000558300000062, 0.1000056530000002, 0.10000876400000003, 0.10000676399999975, 0.10000726400000026, 0.10000609700000052, 0.1000050700000008, 0.10000419499999946, 0.10000830599999944, 0.10000624999999985, 0.10000944399999945, 0.10000518000000014, 0.10000637499999954, 0.10000594499999949, 0.1000083889999992, 0.10000529200000052, 0.10000931899999976, 0.1000042919999995]</msg>
<status status="PASS" starttime="20201015 13:39:14.641" endtime="20201015 13:39:14.643"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.637" endtime="20201015 13:39:14.644"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:08.704" endtime="20201015 13:39:14.644"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:39:05.633" endtime="20201015 13:39:14.645" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:39:14.651" endtime="20201015 13:39:14.671"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.650" endtime="20201015 13:39:14.671"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:14.685" endtime="20201015 13:39:17.707"></status>
</kw>
<msg timestamp="20201015 13:39:17.708" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:14.683" endtime="20201015 13:39:17.709"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:17.714" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:17.711" endtime="20201015 13:39:17.715"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:39:17.721" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:39:17.716" endtime="20201015 13:39:17.721"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:14.681" endtime="20201015 13:39:17.723"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:14.678" endtime="20201015 13:39:17.724"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.677" endtime="20201015 13:39:17.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:39:17.733" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:39:17.731" endtime="20201015 13:39:17.734"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:17.727" endtime="20201015 13:39:17.734"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.676" endtime="20201015 13:39:17.737"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.676" endtime="20201015 13:39:17.737"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:17.739" endtime="20201015 13:39:17.742"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.674" endtime="20201015 13:39:17.750"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.672" endtime="20201015 13:39:17.751"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:14.649" endtime="20201015 13:39:17.752"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:17.770" endtime="20201015 13:39:23.323"></status>
</kw>
<msg timestamp="20201015 13:39:23.324" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:39:17.767" endtime="20201015 13:39:23.325"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:23.330" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:39:23.327" endtime="20201015 13:39:23.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:23.332" endtime="20201015 13:39:23.336"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:17.761" endtime="20201015 13:39:23.337"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:17.757" endtime="20201015 13:39:23.338"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:23.344" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]}</msg>
<status status="PASS" starttime="20201015 13:39:23.340" endtime="20201015 13:39:23.345"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:39:23.356" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:39:23.346" endtime="20201015 13:39:23.356"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:23.365" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:39:23.363" endtime="20201015 13:39:23.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:23.371" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:39:23.368" endtime="20201015 13:39:23.372"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.358" endtime="20201015 13:39:23.373"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:23.388" endtime="20201015 13:39:23.696"></status>
</kw>
<msg timestamp="20201015 13:39:23.699" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.610781889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.710790764, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:23.385" endtime="20201015 13:39:23.700"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:23.708" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.610781889, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.710790764, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:23.701" endtime="20201015 13:39:23.708"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:23.709" endtime="20201015 13:39:23.711"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.379" endtime="20201015 13:39:23.711"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.375" endtime="20201015 13:39:23.712"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:39:23.716" level="INFO">${FILTERED} = [{'diff': 0.10000887499999989}, {'diff': 0.10000518099999978}, {'diff': 0.10000616600000001}, {'diff': 0.1000088189999997}, {'diff': 0.10000648599999984}, {'diff': 0.10000579200000015}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201015 13:39:23.712" endtime="20201015 13:39:23.716"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:23.721" level="INFO">${RESULT} = {'diff': [0.10000887499999989, 0.10000518099999978, 0.10000616600000001, 0.1000088189999997, 0.10000648599999984, 0.10000579200000015, 0.10000766699999986, 0.1000058190000006, 0.10000776399999989, 0.1...</msg>
<status status="PASS" starttime="20201015 13:39:23.717" endtime="20201015 13:39:23.721"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:23.725" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:39:23.724" endtime="20201015 13:39:23.726"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:23.728" level="INFO">VALUE: [0.10000887499999989, 0.10000518099999978, 0.10000616600000001, 0.1000088189999997, 0.10000648599999984, 0.10000579200000015, 0.10000766699999986, 0.1000058190000006, 0.10000776399999989, 0.10000408400000005, 0.10000798600000049, 0.10000811099999929, 0.10000641700000035, 0.100007014, 0.10000687500000005, 0.10000680599999967, 0.10000787500000019, 0.10000522200000006, 0.10000930500000038, 0.10000512500000003, 0.10000698599999946, 0.10000629200000066, 0.10000684699999951, 0.10000598600000021, 0.10000559800000008, 0.10000423699999939, 0.10000670899999964, 0.10000523599999944, 0.10000840300000036, 0.10000644399999992, 0.10000743099999987, 0.10000534700000063, 0.10000659700000014, 0.10000756999999982, 0.10000868000000018, 0.10000866599999991, 0.10000657000000057, 0.10000402799999986, 0.10000590300000045, 0.10000708399999958, 0.10000747299999979, 0.10000641600000026, 0.10000704200000055, 0.10000540299999905, 0.10000691699999997, 0.1000069589999999, 0.10000766599999977, 0.10000944399999945, 0.10000416699999981, 0.10000713900000058]</msg>
<status status="PASS" starttime="20201015 13:39:23.727" endtime="20201015 13:39:23.728"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.722" endtime="20201015 13:39:23.729"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:17.753" endtime="20201015 13:39:23.729"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:39:14.646" endtime="20201015 13:39:23.730" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:39:23.737" endtime="20201015 13:39:23.756"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.735" endtime="20201015 13:39:23.757"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:23.773" endtime="20201015 13:39:26.795"></status>
</kw>
<msg timestamp="20201015 13:39:26.796" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:23.769" endtime="20201015 13:39:26.797"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:26.802" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:26.799" endtime="20201015 13:39:26.803"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:39:26.809" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:39:26.804" endtime="20201015 13:39:26.809"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:23.766" endtime="20201015 13:39:26.811"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:23.764" endtime="20201015 13:39:26.812"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.762" endtime="20201015 13:39:26.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:39:26.821" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:39:26.819" endtime="20201015 13:39:26.822"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:26.815" endtime="20201015 13:39:26.822"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.762" endtime="20201015 13:39:26.823"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.761" endtime="20201015 13:39:26.823"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:26.825" endtime="20201015 13:39:26.828"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.760" endtime="20201015 13:39:26.829"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.758" endtime="20201015 13:39:26.830"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:23.734" endtime="20201015 13:39:26.831"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:26.850" endtime="20201015 13:39:32.405"></status>
</kw>
<msg timestamp="20201015 13:39:32.406" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:39:26.846" endtime="20201015 13:39:32.407"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:32.412" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:39:32.408" endtime="20201015 13:39:32.413"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:32.415" endtime="20201015 13:39:32.418"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:26.840" endtime="20201015 13:39:32.419"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:26.835" endtime="20201015 13:39:32.421"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:32.427" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]}</msg>
<status status="PASS" starttime="20201015 13:39:32.422" endtime="20201015 13:39:32.427"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:39:32.432" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:39:32.428" endtime="20201015 13:39:32.432"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:32.436" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:39:32.435" endtime="20201015 13:39:32.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:32.438" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:39:32.437" endtime="20201015 13:39:32.439"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.433" endtime="20201015 13:39:32.439"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:32.446" endtime="20201015 13:39:32.747"></status>
</kw>
<msg timestamp="20201015 13:39:32.750" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.605723833, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.705727125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:32.444" endtime="20201015 13:39:32.750"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:32.758" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.605723833, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.705727125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:32.751" endtime="20201015 13:39:32.758"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:32.759" endtime="20201015 13:39:32.761"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.442" endtime="20201015 13:39:32.761"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.440" endtime="20201015 13:39:32.762"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:39:32.766" level="INFO">${FILTERED} = [{'diff': 0.10000329200000024}, {'diff': 0.10000681899999986}, {'diff': 0.10000788900000002}, {'diff': 0.10000408299999997}, {'diff': 0.10001783400000086}, {'diff': 0.09999747200000009}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:39:32.763" endtime="20201015 13:39:32.766"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:32.770" level="INFO">${RESULT} = {'diff': [0.10000329200000024, 0.10000681899999986, 0.10000788900000002, 0.10000408299999997, 0.10001783400000086, 0.09999747200000009, 0.10000424999999957, 0.1000069029999997, 0.10000404200000013, 0....</msg>
<status status="PASS" starttime="20201015 13:39:32.767" endtime="20201015 13:39:32.770"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:32.774" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:39:32.773" endtime="20201015 13:39:32.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:32.777" level="INFO">VALUE: [0.10000329200000024, 0.10000681899999986, 0.10000788900000002, 0.10000408299999997, 0.10001783400000086, 0.09999747200000009, 0.10000424999999957, 0.1000069029999997, 0.10000404200000013, 0.1000089019999999, 0.1000067360000001, 0.10001830599999995, 0.09999497300000026, 0.10000745899999952, 0.10000626400000012, 0.10000616700000009, 0.10000661099999952, 0.10000845899999966, 0.10000402799999986, 0.10000737499999968, 0.10000806900000025, 0.10000529099999955, 0.10000522199999917, 0.1000063330000005, 0.10000588900000018, 0.10000698600000035, 0.10000837499999982, 0.10001892999999917, 0.09999684699999989, 0.10000748599999998, 0.10000759799999948, 0.10000415300000043, 0.1000082769999997, 0.1000077079999997, 0.1000070829999995, 0.10000798600000049, 0.1000065689999996, 0.10000634699999988, 0.10000588900000018, 0.10000733299999975, 0.10000611199999998, 0.10000751299999955, 0.10000563899999992, 0.10000712500000031, 0.10000705600000082, 0.10000663900000006, 0.10000819499999913, 0.1000057769999998, 0.10000654099999906, 0.10000856899999988]</msg>
<status status="PASS" starttime="20201015 13:39:32.775" endtime="20201015 13:39:32.778"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.771" endtime="20201015 13:39:32.778"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:26.832" endtime="20201015 13:39:32.779"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:39:23.731" endtime="20201015 13:39:32.779" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:39:32.786" endtime="20201015 13:39:32.806"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.785" endtime="20201015 13:39:32.806"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:32.821" endtime="20201015 13:39:35.843"></status>
</kw>
<msg timestamp="20201015 13:39:35.844" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:32.819" endtime="20201015 13:39:35.845"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:35.850" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:35.846" endtime="20201015 13:39:35.850"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:39:35.856" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:39:35.852" endtime="20201015 13:39:35.857"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:32.816" endtime="20201015 13:39:35.858"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:32.814" endtime="20201015 13:39:35.860"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.812" endtime="20201015 13:39:35.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:39:35.869" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:39:35.867" endtime="20201015 13:39:35.869"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:35.862" endtime="20201015 13:39:35.870"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.811" endtime="20201015 13:39:35.870"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.810" endtime="20201015 13:39:35.871"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:35.872" endtime="20201015 13:39:35.876"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.809" endtime="20201015 13:39:35.877"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.807" endtime="20201015 13:39:35.878"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:32.783" endtime="20201015 13:39:35.879"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:35.897" endtime="20201015 13:39:41.464"></status>
</kw>
<msg timestamp="20201015 13:39:41.466" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:39:35.893" endtime="20201015 13:39:41.466"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:41.472" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:39:41.468" endtime="20201015 13:39:41.473"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:41.474" endtime="20201015 13:39:41.478"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:35.888" endtime="20201015 13:39:41.479"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:35.883" endtime="20201015 13:39:41.480"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:41.487" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]}</msg>
<status status="PASS" starttime="20201015 13:39:41.482" endtime="20201015 13:39:41.488"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:39:41.498" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:39:41.490" endtime="20201015 13:39:41.498"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:41.503" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:39:41.502" endtime="20201015 13:39:41.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:41.505" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:39:41.504" endtime="20201015 13:39:41.505"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.499" endtime="20201015 13:39:41.506"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:41.513" endtime="20201015 13:39:41.813"></status>
</kw>
<msg timestamp="20201015 13:39:41.816" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.603732903, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.703738333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:41.511" endtime="20201015 13:39:41.816"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:41.824" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.603732903, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.703738333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:39:41.817" endtime="20201015 13:39:41.824"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:41.825" endtime="20201015 13:39:41.827"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.508" endtime="20201015 13:39:41.827"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.506" endtime="20201015 13:39:41.828"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:39:41.832" level="INFO">${FILTERED} = [{'diff': 0.10000542999999995}, {'diff': 0.10000776399999989}, {'diff': 0.10000612500000017}, {'diff': 0.1000062220000002}, {'diff': 0.10000704099999957}, {'diff': 0.10000626400000012}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201015 13:39:41.829" endtime="20201015 13:39:41.832"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:41.836" level="INFO">${RESULT} = {'diff': [0.10000542999999995, 0.10000776399999989, 0.10000612500000017, 0.1000062220000002, 0.10000704099999957, 0.10000626400000012, 0.10000634699999988, 0.1000071379999996, 0.10000959699999967, 0.1...</msg>
<status status="PASS" starttime="20201015 13:39:41.833" endtime="20201015 13:39:41.836"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:41.840" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:39:41.839" endtime="20201015 13:39:41.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:41.844" level="INFO">VALUE: [0.10000542999999995, 0.10000776399999989, 0.10000612500000017, 0.1000062220000002, 0.10000704099999957, 0.10000626400000012, 0.10000634699999988, 0.1000071379999996, 0.10000959699999967, 0.10000577799999988, 0.10000837499999982, 0.1000058199999998, 0.10000518000000014, 0.10000686199999986, 0.1000073609999994, 0.1000074160000004, 0.10000759699999939, 0.10000547200000032, 0.1000077079999997, 0.100005597, 0.10000708399999958, 0.10000612499999928, 0.10000892999999955, 0.10000741599999952, 0.10000773599999935, 0.1000084440000002, 0.10000576399999961, 0.10000688900000032, 0.100007014, 0.10000572300000066, 0.10000791600000003, 0.10000552699999954, 0.10000677799999913, 0.10000773600000024, 0.100006445, 0.10000554199999989, 0.10000409699999935, 0.1000086109999998, 0.10000644399999992, 0.10000842999999993, 0.10000715299999996, 0.10000802799999953, 0.10000712500000031, 0.10000659699999925, 0.10000750000000025, 0.10000547199999943, 0.10000630600000093, 0.10000844500000028, 0.10000673599999921, 0.10000652799999976]</msg>
<status status="PASS" starttime="20201015 13:39:41.842" endtime="20201015 13:39:41.844"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.837" endtime="20201015 13:39:41.845"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:35.880" endtime="20201015 13:39:41.845"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:39:32.781" endtime="20201015 13:39:41.846" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:39:41.853" endtime="20201015 13:39:41.872"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.851" endtime="20201015 13:39:41.873"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:41.887" endtime="20201015 13:39:44.910"></status>
</kw>
<msg timestamp="20201015 13:39:44.911" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:41.885" endtime="20201015 13:39:44.912"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:44.917" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['arduino-due', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:39:44.913" endtime="20201015 13:39:44.917"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:39:44.923" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:39:44.919" endtime="20201015 13:39:44.925"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:41.882" endtime="20201015 13:39:44.927"></status>
</kw>
<status status="FAIL" starttime="20201015 13:39:41.880" endtime="20201015 13:39:44.929"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.879" endtime="20201015 13:39:44.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:39:44.940" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:39:44.938" endtime="20201015 13:39:44.942"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:44.932" endtime="20201015 13:39:44.942"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.878" endtime="20201015 13:39:44.943"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.877" endtime="20201015 13:39:44.943"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:44.945" endtime="20201015 13:39:44.950"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.876" endtime="20201015 13:39:44.952"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.874" endtime="20201015 13:39:44.953"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:41.850" endtime="20201015 13:39:44.954"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:44.967" endtime="20201015 13:39:50.544"></status>
</kw>
<msg timestamp="20201015 13:39:50.546" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:39:44.964" endtime="20201015 13:39:50.546"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:50.552" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:39:50.548" endtime="20201015 13:39:50.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:50.554" endtime="20201015 13:39:50.558"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:44.960" endtime="20201015 13:39:50.559"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:44.957" endtime="20201015 13:39:50.560"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:50.566" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250,...</msg>
<status status="PASS" starttime="20201015 13:39:50.562" endtime="20201015 13:39:50.567"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:39:50.572" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:39:50.567" endtime="20201015 13:39:50.572"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:50.576" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:39:50.575" endtime="20201015 13:39:50.576"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:50.578" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:39:50.577" endtime="20201015 13:39:50.578"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:50.573" endtime="20201015 13:39:50.579"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:50.586" endtime="20201015 13:39:50.888"></status>
</kw>
<msg timestamp="20201015 13:39:50.891" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.605243111, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.70528525, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:39:50.584" endtime="20201015 13:39:50.891"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:39:50.899" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 3.605243111, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 3.70528525, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:39:50.892" endtime="20201015 13:39:50.899"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:39:50.900" endtime="20201015 13:39:50.902"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:50.581" endtime="20201015 13:39:50.902"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:50.579" endtime="20201015 13:39:50.903"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:39:50.907" level="INFO">${FILTERED} = [{'diff': 0.10004213900000014}, {'diff': 0.09997716700000003}, {'diff': 0.10006233299999989}, {'diff': 0.09994901399999989}, {'diff': 0.10001147199999938}, {'diff': 0.1000051949999996}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201015 13:39:50.903" endtime="20201015 13:39:50.907"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:39:50.912" level="INFO">${RESULT} = {'diff': [0.10004213900000014, 0.09997716700000003, 0.10006233299999989, 0.09994901399999989, 0.10001147199999938, 0.1000051949999996, 0.10000532000000018, 0.10000955599999983, 0.10000720800000007, 0....</msg>
<status status="PASS" starttime="20201015 13:39:50.908" endtime="20201015 13:39:50.912"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:39:50.916" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:39:50.915" endtime="20201015 13:39:50.917"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:39:50.919" level="INFO">VALUE: [0.10004213900000014, 0.09997716700000003, 0.10006233299999989, 0.09994901399999989, 0.10001147199999938, 0.1000051949999996, 0.10000532000000018, 0.10000955599999983, 0.10000720800000007, 0.10000691699999997, 0.10000731899999948, 0.10000850000000039, 0.10000702800000028, 0.10000512500000003, 0.10000511100000065, 0.10000851400000066, 0.10000619499999974, 0.10000680599999967, 0.10000440199999971, 0.10000868000000018, 0.1000076950000004, 0.10000558299999973, 0.10000529200000052, 0.10000529100000044, 0.10000408299999997, 0.10000715299999996, 0.10000825000000013, 0.10000791600000003, 0.10000584700000026, 0.10000869400000045, 0.10000595799999967, 0.10000608300000025, 0.10000693100000024, 0.10000419500000035, 0.10000880500000076, 0.10000793100000038, 0.1000051949999996, 0.10000726400000026, 0.10000665299999945, 0.10000768100000013, 0.10000534700000063, 0.10000858400000023, 0.10000654200000003, 0.10000787500000019, 0.10000855499999872, 0.10000836100000043, 0.10000668000000168, 0.1000065560000003, 0.10000836100000043, 0.10000790199999976]</msg>
<status status="PASS" starttime="20201015 13:39:50.917" endtime="20201015 13:39:50.919"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:50.912" endtime="20201015 13:39:50.920"></status>
</kw>
<status status="PASS" starttime="20201015 13:39:44.955" endtime="20201015 13:39:50.920"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_arduino-due</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:39:41.847" endtime="20201015 13:39:50.921" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:38:49.004" endtime="20201015 13:39:50.928"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">arduino-due</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:38:34.653" endtime="20201015 13:39:50.954"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_arduino-due</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
