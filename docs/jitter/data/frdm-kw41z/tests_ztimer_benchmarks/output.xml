<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201015 13:37:15.452" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:19.054" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:19.063" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:33.149" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:19.052" endtime="20201015 13:37:33.150"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.152" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:33.151" endtime="20201015 13:37:33.153"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:19.051" endtime="20201015 13:37:33.153"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:33.156" endtime="20201015 13:37:33.338"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.154" endtime="20201015 13:37:33.338"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.351" endtime="20201015 13:37:33.371"></status>
</kw>
<msg timestamp="20201015 13:37:33.372" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:33.349" endtime="20201015 13:37:33.372"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.374" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:33.373" endtime="20201015 13:37:33.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.377" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:33.375" endtime="20201015 13:37:33.378"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:33.347" endtime="20201015 13:37:33.378"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:33.345" endtime="20201015 13:37:33.379"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.343" endtime="20201015 13:37:33.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:33.383" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:33.382" endtime="20201015 13:37:33.383"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.380" endtime="20201015 13:37:33.383"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.343" endtime="20201015 13:37:33.384"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.342" endtime="20201015 13:37:33.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.385" endtime="20201015 13:37:33.386"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.340" endtime="20201015 13:37:33.387"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.387" endtime="20201015 13:37:33.389"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.339" endtime="20201015 13:37:33.389"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:19.049" endtime="20201015 13:37:33.390"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:38.989" endtime="20201015 13:37:39.011"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.985" endtime="20201015 13:37:39.012"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.174" endtime="20201015 13:37:39.200"></status>
</kw>
<msg timestamp="20201015 13:37:39.201" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.168" endtime="20201015 13:37:39.201"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.206" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.203" endtime="20201015 13:37:39.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.212" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:39.209" endtime="20201015 13:37:39.213"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.163" endtime="20201015 13:37:39.215"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.157" endtime="20201015 13:37:39.216"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.023" endtime="20201015 13:37:39.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:39.224" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:39.223" endtime="20201015 13:37:39.225"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.218" endtime="20201015 13:37:39.225"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.021" endtime="20201015 13:37:39.226"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.020" endtime="20201015 13:37:39.226"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.228" endtime="20201015 13:37:39.231"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.017" endtime="20201015 13:37:39.232"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.014" endtime="20201015 13:37:39.233"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.982" endtime="20201015 13:37:39.233"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.247" endtime="20201015 13:37:39.264"></status>
</kw>
<msg timestamp="20201015 13:37:39.265" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.244" endtime="20201015 13:37:39.265"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.270" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.267" endtime="20201015 13:37:39.271"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.272" endtime="20201015 13:37:39.273"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.238" endtime="20201015 13:37:39.274"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.235" endtime="20201015 13:37:39.274"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.278" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:37:39.277" endtime="20201015 13:37:39.278"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.280" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:37:39.279" endtime="20201015 13:37:39.280"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.275" endtime="20201015 13:37:39.281"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:33.390" endtime="20201015 13:37:39.281" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:18.605" endtime="20201015 13:37:39.284"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.334" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:39.343" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:40.736" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:39.333" endtime="20201015 13:37:40.737"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:40.740" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:40.738" endtime="20201015 13:37:40.740"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.332" endtime="20201015 13:37:40.741"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:40.743" endtime="20201015 13:37:41.013"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:40.741" endtime="20201015 13:37:41.014"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.027" endtime="20201015 13:37:41.043"></status>
</kw>
<msg timestamp="20201015 13:37:41.043" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['is is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.026" endtime="20201015 13:37:41.043"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.046" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['is is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.044" endtime="20201015 13:37:41.046"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.049" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:41.047" endtime="20201015 13:37:41.049"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.023" endtime="20201015 13:37:41.050"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.021" endtime="20201015 13:37:41.050"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.019" endtime="20201015 13:37:41.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:41.054" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:41.054" endtime="20201015 13:37:41.055"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.051" endtime="20201015 13:37:41.055"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.018" endtime="20201015 13:37:41.055"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.018" endtime="20201015 13:37:41.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.056" endtime="20201015 13:37:41.057"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.016" endtime="20201015 13:37:41.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.059" endtime="20201015 13:37:41.060"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.015" endtime="20201015 13:37:41.061"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.331" endtime="20201015 13:37:41.061"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:41.068" endtime="20201015 13:37:41.089"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.066" endtime="20201015 13:37:41.090"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.105" endtime="20201015 13:37:41.125"></status>
</kw>
<msg timestamp="20201015 13:37:41.126" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.103" endtime="20201015 13:37:41.126"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.128" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.127" endtime="20201015 13:37:41.128"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.131" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:41.129" endtime="20201015 13:37:41.132"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.100" endtime="20201015 13:37:41.132"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.096" endtime="20201015 13:37:41.133"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.095" endtime="20201015 13:37:41.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:41.137" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:41.136" endtime="20201015 13:37:41.137"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.134" endtime="20201015 13:37:41.137"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.094" endtime="20201015 13:37:41.137"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.093" endtime="20201015 13:37:41.137"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.138" endtime="20201015 13:37:41.140"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.092" endtime="20201015 13:37:41.140"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.090" endtime="20201015 13:37:41.141"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.064" endtime="20201015 13:37:41.141"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.149" endtime="20201015 13:37:46.650"></status>
</kw>
<msg timestamp="20201015 13:37:46.651" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.147" endtime="20201015 13:37:46.651"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.656" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.653" endtime="20201015 13:37:46.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.658" endtime="20201015 13:37:46.663"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.145" endtime="20201015 13:37:46.665"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.143" endtime="20201015 13:37:46.666"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:46.670" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:46.667" endtime="20201015 13:37:46.671"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:46.728" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:37:46.673" endtime="20201015 13:37:46.728"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.736" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:46.733" endtime="20201015 13:37:46.736"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.738" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:37:46.737" endtime="20201015 13:37:46.738"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.730" endtime="20201015 13:37:46.739"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.745" endtime="20201015 13:37:47.046"></status>
</kw>
<msg timestamp="20201015 13:37:47.049" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.568061264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.667793833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:46.743" endtime="20201015 13:37:47.050"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.057" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.568061264, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.667793833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:47.051" endtime="20201015 13:37:47.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.058" endtime="20201015 13:37:47.060"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.741" endtime="20201015 13:37:47.061"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.739" endtime="20201015 13:37:47.061"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:47.065" level="INFO">${FILTERED} = [{'diff': 0.09973256899999994}, {'diff': 0.099691584}, {'diff': 0.09969776400000008}, {'diff': 0.09971238799999993}, {'diff': 0.0996854439999999}, {'diff': 0.0997233329999998}, {'diff': 0.099729443999...</msg>
<status status="PASS" starttime="20201015 13:37:47.062" endtime="20201015 13:37:47.065"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:47.069" level="INFO">${RESULT} = {'diff': [0.09973256899999994, 0.099691584, 0.09969776400000008, 0.09971238799999993, 0.0996854439999999, 0.0997233329999998, 0.09972944399999983, 0.09973818099999998, 0.09970931900000002, 0.099654249...</msg>
<status status="PASS" starttime="20201015 13:37:47.066" endtime="20201015 13:37:47.069"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.074" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:47.073" endtime="20201015 13:37:47.074"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.076" level="INFO">VALUE: [0.09973256899999994, 0.099691584, 0.09969776400000008, 0.09971238799999993, 0.0996854439999999, 0.0997233329999998, 0.09972944399999983, 0.09973818099999998, 0.09970931900000002, 0.09965424999999994, 0.09968370799999993, 0.09969348599999983, 0.09969147199999995, 0.09969627799999992, 0.09969522299999989, 0.09972430600000015, 0.09969645900000002, 0.09971354199999993, 0.09970563900000018, 0.09970372199999966, 0.09973023699999972, 0.09971719399999968, 0.0997287779999998, 0.09968922199999986, 0.09967465300000011, 0.09969627800000014, 0.09969994399999971, 0.09971356999999959, 0.09968277700000039, 0.09964536099999988, 0.0996971809999998, 0.09969548599999989, 0.09967786099999998, 0.09971220900000022, 0.09969724999999974, 0.0996812079999998, 0.09968425000000014, 0.09968791700000068, 0.09968638900000037, 0.09965345899999978, 0.09968219500000064, 0.09969513900000049, 0.09971127699999993, 0.09972844499999933, 0.09967634699999994, 0.09968602799999982, 0.09971763899999964, 0.0997174300000001, 0.09969002800000037, 0.0996940000000004]</msg>
<status status="PASS" starttime="20201015 13:37:47.075" endtime="20201015 13:37:47.076"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.070" endtime="20201015 13:37:47.077"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.142" endtime="20201015 13:37:47.077"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:41.061" endtime="20201015 13:37:47.078" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:47.084" endtime="20201015 13:37:47.104"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.083" endtime="20201015 13:37:47.104"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.117" endtime="20201015 13:37:47.136"></status>
</kw>
<msg timestamp="20201015 13:37:47.137" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:47.115" endtime="20201015 13:37:47.137"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.139" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:47.138" endtime="20201015 13:37:47.140"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.142" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:47.140" endtime="20201015 13:37:47.142"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:47.113" endtime="20201015 13:37:47.143"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:47.110" endtime="20201015 13:37:47.144"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.109" endtime="20201015 13:37:47.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:47.148" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:47.147" endtime="20201015 13:37:47.148"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.145" endtime="20201015 13:37:47.149"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.108" endtime="20201015 13:37:47.149"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.108" endtime="20201015 13:37:47.149"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.150" endtime="20201015 13:37:47.151"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.107" endtime="20201015 13:37:47.152"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.105" endtime="20201015 13:37:47.152"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.082" endtime="20201015 13:37:47.152"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.161" endtime="20201015 13:37:52.675"></status>
</kw>
<msg timestamp="20201015 13:37:52.676" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:47.160" endtime="20201015 13:37:52.676"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:52.681" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:52.678" endtime="20201015 13:37:52.682"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:52.684" endtime="20201015 13:37:52.687"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.156" endtime="20201015 13:37:52.688"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.154" endtime="20201015 13:37:52.689"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:52.694" level="INFO">${RESULT} = {'interval': [10000, 12250, 14500, 16750, 19000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:52.690" endtime="20201015 13:37:52.694"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:52.704" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:52.696" endtime="20201015 13:37:52.704"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:52.712" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:52.710" endtime="20201015 13:37:52.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:52.716" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:52.714" endtime="20201015 13:37:52.716"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:52.706" endtime="20201015 13:37:52.717"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:52.731" endtime="20201015 13:37:53.031"></status>
</kw>
<msg timestamp="20201015 13:37:53.034" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.567510792, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.667233264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:52.728" endtime="20201015 13:37:53.034"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.042" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.567510792, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.667233264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:53.035" endtime="20201015 13:37:53.042"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.043" endtime="20201015 13:37:53.045"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:52.722" endtime="20201015 13:37:53.045"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:52.719" endtime="20201015 13:37:53.046"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:53.050" level="INFO">${FILTERED} = [{'diff': 0.09972247200000006}, {'diff': 0.09971555600000004}, {'diff': 0.09972112500000008}, {'diff': 0.09966112500000002}, {'diff': 0.09972770899999994}, {'diff': 0.09966416599999994}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:37:53.047" endtime="20201015 13:37:53.050"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:53.055" level="INFO">${RESULT} = {'diff': [0.09972247200000006, 0.09971555600000004, 0.09972112500000008, 0.09966112500000002, 0.09972770899999994, 0.09966416599999994, 0.09969659700000011, 0.09968350000000004, 0.09968919500000006, 0...</msg>
<status status="PASS" starttime="20201015 13:37:53.051" endtime="20201015 13:37:53.055"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.059" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:53.058" endtime="20201015 13:37:53.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.061" level="INFO">VALUE: [0.09972247200000006, 0.09971555600000004, 0.09972112500000008, 0.09966112500000002, 0.09972770899999994, 0.09966416599999994, 0.09969659700000011, 0.09968350000000004, 0.09968919500000006, 0.09965588899999989, 0.09970831999999996, 0.09966879200000012, 0.09983905599999998, 0.09975207000000008, 0.09946811099999997, 0.0996932359999998, 0.09969515299999987, 0.09973388899999991, 0.0996641519999999, 0.09970022200000006, 0.09972770799999964, 0.09971398699999989, 0.09964615300000013, 0.09975097200000027, 0.09963270899999976, 0.09971529199999996, 0.09968669500000038, 0.09967872200000016, 0.0997183060000002, 0.09972929200000014, 0.09969398600000012, 0.09971856899999976, 0.0997385279999996, 0.09996438800000007, 0.09936087500000035, 0.09970909699999986, 0.09964743100000018, 0.09968854199999999, 0.09971143100000024, 0.09967148600000009, 0.09970579199999996, 0.09968801399999982, 0.09969975000000009, 0.09973884700000024, 0.09966093099999984, 0.09969829199999936, 0.09965944500000035, 0.0997134019999999, 0.09965659800000015, 0.09973434700000006]</msg>
<status status="PASS" starttime="20201015 13:37:53.060" endtime="20201015 13:37:53.062"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.056" endtime="20201015 13:37:53.062"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.153" endtime="20201015 13:37:53.063"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:47.079" endtime="20201015 13:37:53.063" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:53.070" endtime="20201015 13:37:53.089"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.068" endtime="20201015 13:37:53.090"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.102" endtime="20201015 13:37:53.126"></status>
</kw>
<msg timestamp="20201015 13:37:53.127" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:53.101" endtime="20201015 13:37:53.127"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.129" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:53.128" endtime="20201015 13:37:53.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.132" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:53.130" endtime="20201015 13:37:53.132"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:53.098" endtime="20201015 13:37:53.133"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:53.096" endtime="20201015 13:37:53.134"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.095" endtime="20201015 13:37:53.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:53.138" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:53.137" endtime="20201015 13:37:53.138"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.135" endtime="20201015 13:37:53.138"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.094" endtime="20201015 13:37:53.139"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.093" endtime="20201015 13:37:53.140"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.140" endtime="20201015 13:37:53.142"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.092" endtime="20201015 13:37:53.143"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.090" endtime="20201015 13:37:53.143"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.067" endtime="20201015 13:37:53.143"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.152" endtime="20201015 13:37:58.676"></status>
</kw>
<msg timestamp="20201015 13:37:58.677" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:53.150" endtime="20201015 13:37:58.677"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.682" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:58.679" endtime="20201015 13:37:58.683"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:58.685" endtime="20201015 13:37:58.688"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.147" endtime="20201015 13:37:58.689"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.145" endtime="20201015 13:37:58.690"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:58.695" level="INFO">${RESULT} = {'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:58.691" endtime="20201015 13:37:58.696"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:58.705" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:58.697" endtime="20201015 13:37:58.706"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.712" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:58.711" endtime="20201015 13:37:58.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.714" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:58.713" endtime="20201015 13:37:58.714"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.707" endtime="20201015 13:37:58.715"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:58.721" endtime="20201015 13:37:59.017"></status>
</kw>
<msg timestamp="20201015 13:37:59.019" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.57141675, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.671119028, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:37:58.720" endtime="20201015 13:37:59.020"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.027" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.57141675, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.671119028, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:37:59.020" endtime="20201015 13:37:59.027"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.028" endtime="20201015 13:37:59.030"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.717" endtime="20201015 13:37:59.030"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.716" endtime="20201015 13:37:59.031"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:59.034" level="INFO">${FILTERED} = [{'diff': 0.09970227799999998}, {'diff': 0.09971829200000004}, {'diff': 0.09971211099999999}, {'diff': 0.09969352799999998}, {'diff': 0.09962866699999995}, {'diff': 0.09974174999999996}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:37:59.031" endtime="20201015 13:37:59.035"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:59.039" level="INFO">${RESULT} = {'diff': [0.09970227799999998, 0.09971829200000004, 0.09971211099999999, 0.09969352799999998, 0.09962866699999995, 0.09974174999999996, 0.09968266600000009, 0.09974111099999994, 0.09970347199999985, 0...</msg>
<status status="PASS" starttime="20201015 13:37:59.035" endtime="20201015 13:37:59.040"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.044" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:59.043" endtime="20201015 13:37:59.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.046" level="INFO">VALUE: [0.09970227799999998, 0.09971829200000004, 0.09971211099999999, 0.09969352799999998, 0.09962866699999995, 0.09974174999999996, 0.09968266600000009, 0.09974111099999994, 0.09970347199999985, 0.09987576399999987, 0.099513666, 0.09971020899999994, 0.09975991700000009, 0.09967756900000002, 0.09966105600000019, 0.09971722200000022, 0.09966723600000016, 0.09975070800000019, 0.09967798600000011, 0.09968749999999993, 0.0996904169999997, 0.09968112500000004, 0.09968802700000001, 0.09972370799999997, 0.09965616600000038, 0.09967509699999999, 0.099676514, 0.09968879099999972, 0.09968434700000017, 0.09965826400000033, 0.09966633400000013, 0.09974779099999997, 0.09974941699999995, 0.09968931999999997, 0.09966465199999952, 0.09972659700000008, 0.09973036099999977, 0.0996922360000001, 0.0997090269999994, 0.09964469399999931, 0.09974083300000025, 0.09969590299999975, 0.0996677909999999, 0.10000148699999922, 0.09940986099999982, 0.09971740300000054, 0.09968730599999986, 0.09968868099999995, 0.09970972200000006, 0.09963090299999955]</msg>
<status status="PASS" starttime="20201015 13:37:59.045" endtime="20201015 13:37:59.047"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.041" endtime="20201015 13:37:59.047"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.144" endtime="20201015 13:37:59.048"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:53.065" endtime="20201015 13:37:59.048" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:59.054" endtime="20201015 13:37:59.074"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.053" endtime="20201015 13:37:59.074"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.089" endtime="20201015 13:37:59.105"></status>
</kw>
<msg timestamp="20201015 13:37:59.106" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:59.086" endtime="20201015 13:37:59.106"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.108" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:59.107" endtime="20201015 13:37:59.109"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.111" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:59.109" endtime="20201015 13:37:59.112"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:59.083" endtime="20201015 13:37:59.112"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:59.081" endtime="20201015 13:37:59.113"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.080" endtime="20201015 13:37:59.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:59.117" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:59.116" endtime="20201015 13:37:59.117"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.114" endtime="20201015 13:37:59.117"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.079" endtime="20201015 13:37:59.117"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.078" endtime="20201015 13:37:59.118"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.118" endtime="20201015 13:37:59.120"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.077" endtime="20201015 13:37:59.120"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.075" endtime="20201015 13:37:59.121"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.052" endtime="20201015 13:37:59.121"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.129" endtime="20201015 13:38:04.668"></status>
</kw>
<msg timestamp="20201015 13:38:04.669" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:37:59.127" endtime="20201015 13:38:04.669"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.674" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:04.671" endtime="20201015 13:38:04.675"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:04.677" endtime="20201015 13:38:04.680"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.125" endtime="20201015 13:38:04.681"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.123" endtime="20201015 13:38:04.682"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:04.688" level="INFO">${RESULT} = {'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:04.684" endtime="20201015 13:38:04.689"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:04.699" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:04.690" endtime="20201015 13:38:04.699"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.707" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:04.705" endtime="20201015 13:38:04.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.711" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:04.709" endtime="20201015 13:38:04.712"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.701" endtime="20201015 13:38:04.713"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:04.725" endtime="20201015 13:38:05.025"></status>
</kw>
<msg timestamp="20201015 13:38:05.028" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565810528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665501986, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:04.724" endtime="20201015 13:38:05.029"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:05.041" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565810528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665501986, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:05.031" endtime="20201015 13:38:05.042"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:05.043" endtime="20201015 13:38:05.045"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.718" endtime="20201015 13:38:05.045"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.715" endtime="20201015 13:38:05.046"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:05.050" level="INFO">${FILTERED} = [{'diff': 0.09969145800000001}, {'diff': 0.09974402800000004}, {'diff': 0.09975199999999995}, {'diff': 0.09971834699999993}, {'diff': 0.09963551399999993}, {'diff': 0.09998843000000002}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:38:05.046" endtime="20201015 13:38:05.050"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:05.053" level="INFO">${RESULT} = {'diff': [0.09969145800000001, 0.09974402800000004, 0.09975199999999995, 0.09971834699999993, 0.09963551399999993, 0.09998843000000002, 0.09943888899999997, 0.09968776400000001, 0.09984738900000001, 0...</msg>
<status status="PASS" starttime="20201015 13:38:05.050" endtime="20201015 13:38:05.054"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:05.057" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:05.056" endtime="20201015 13:38:05.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:05.060" level="INFO">VALUE: [0.09969145800000001, 0.09974402800000004, 0.09975199999999995, 0.09971834699999993, 0.09963551399999993, 0.09998843000000002, 0.09943888899999997, 0.09968776400000001, 0.09984738900000001, 0.09951202799999992, 0.09975386099999994, 0.09969362500000001, 0.09975520900000001, 0.09968136100000002, 0.09963655500000024, 0.09975887500000002, 0.09967836100000005, 0.09975662499999993, 0.09973843100000002, 0.09995219499999974, 0.09962145900000019, 0.09956263899999973, 0.09958952799999965, 0.09967497299999994, 0.09967194399999979, 0.09968226300000005, 0.09970058399999981, 0.09969511099999995, 0.0997030419999998, 0.09969970799999972, 0.09970638900000006, 0.09970886099999987, 0.09994283400000015, 0.09941641599999995, 0.09970713900000039, 0.0996671530000004, 0.09972083300000012, 0.09969569400000022, 0.09965837499999974, 0.09966356899999962, 0.09975293099999938, 0.09972822200000042, 0.09971202699999981, 0.09965963900000041, 0.09969261100000004, 0.09969388900000009, 0.09989133300000042, 0.0995362919999998, 0.09974976400000024, 0.09967930499999955]</msg>
<status status="PASS" starttime="20201015 13:38:05.058" endtime="20201015 13:38:05.061"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.054" endtime="20201015 13:38:05.061"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.122" endtime="20201015 13:38:05.062"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:59.050" endtime="20201015 13:38:05.062" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:05.068" endtime="20201015 13:38:05.088"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.067" endtime="20201015 13:38:05.089"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:05.102" endtime="20201015 13:38:05.118"></status>
</kw>
<msg timestamp="20201015 13:38:05.118" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:05.101" endtime="20201015 13:38:05.119"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:05.121" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:05.120" endtime="20201015 13:38:05.121"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:05.124" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:05.122" endtime="20201015 13:38:05.124"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:05.098" endtime="20201015 13:38:05.125"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:05.096" endtime="20201015 13:38:05.125"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.094" endtime="20201015 13:38:05.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:05.129" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:05.129" endtime="20201015 13:38:05.130"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.127" endtime="20201015 13:38:05.130"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.093" endtime="20201015 13:38:05.130"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.092" endtime="20201015 13:38:05.130"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:05.131" endtime="20201015 13:38:05.133"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.091" endtime="20201015 13:38:05.133"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.089" endtime="20201015 13:38:05.134"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.066" endtime="20201015 13:38:05.134"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:05.142" endtime="20201015 13:38:10.690"></status>
</kw>
<msg timestamp="20201015 13:38:10.692" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:05.140" endtime="20201015 13:38:10.692"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.697" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:10.694" endtime="20201015 13:38:10.698"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:10.700" endtime="20201015 13:38:10.703"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.138" endtime="20201015 13:38:10.704"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.136" endtime="20201015 13:38:10.705"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:10.712" level="INFO">${RESULT} = {'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:38:10.707" endtime="20201015 13:38:10.712"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:10.722" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:10.714" endtime="20201015 13:38:10.723"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.732" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:10.730" endtime="20201015 13:38:10.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.736" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:10.734" endtime="20201015 13:38:10.737"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.724" endtime="20201015 13:38:10.737"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:10.744" endtime="20201015 13:38:11.041"></status>
</kw>
<msg timestamp="20201015 13:38:11.044" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565931722, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665627375, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:10.742" endtime="20201015 13:38:11.044"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:11.052" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565931722, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665627375, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:11.045" endtime="20201015 13:38:11.052"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:11.053" endtime="20201015 13:38:11.055"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.739" endtime="20201015 13:38:11.055"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.738" endtime="20201015 13:38:11.056"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:11.059" level="INFO">${FILTERED} = [{'diff': 0.09969565300000005}, {'diff': 0.09973155499999997}, {'diff': 0.09990951399999992}, {'diff': 0.09979058299999999}, {'diff': 0.09933373700000003}, {'diff': 0.09972070800000021}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:38:11.056" endtime="20201015 13:38:11.060"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:11.063" level="INFO">${RESULT} = {'diff': [0.09969565300000005, 0.09973155499999997, 0.09990951399999992, 0.09979058299999999, 0.09933373700000003, 0.09972070800000021, 0.099738514, 0.09961279099999998, 0.099699875, 0.099720972999999...</msg>
<status status="PASS" starttime="20201015 13:38:11.060" endtime="20201015 13:38:11.064"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:11.067" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:11.066" endtime="20201015 13:38:11.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:11.071" level="INFO">VALUE: [0.09969565300000005, 0.09973155499999997, 0.09990951399999992, 0.09979058299999999, 0.09933373700000003, 0.09972070800000021, 0.099738514, 0.09961279099999998, 0.099699875, 0.09972097299999994, 0.09972052799999997, 0.09968763899999988, 0.09971777800000003, 0.0996512220000001, 0.0996838470000001, 0.0996955690000001, 0.09975787499999988, 0.0997500419999997, 0.0996998050000002, 0.09969047200000025, 0.09988162500000008, 0.0997379030000003, 0.09964868100000013, 0.09951259699999992, 0.09966344399999993, 0.09970051400000024, 0.09972131899999992, 0.09966358399999997, 0.09969770899999997, 0.09972377799999999, 0.0996821109999999, 0.09969625000000004, 0.09973841699999975, 0.09963426399999964, 0.09975479100000051, 0.09989252799999981, 0.09956270900000064, 0.09979027799999951, 0.09961326399999937, 0.09966559799999963, 0.09999416700000019, 0.09941941700000001, 0.09968984800000058, 0.09974394400000008, 0.0996414450000005, 0.09972929100000005, 0.0996926939999998, 0.09966612499999972, 0.09976058300000012, 0.09968904199999962]</msg>
<status status="PASS" starttime="20201015 13:38:11.069" endtime="20201015 13:38:11.071"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.064" endtime="20201015 13:38:11.071"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:05.134" endtime="20201015 13:38:11.072"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:05.064" endtime="20201015 13:38:11.072" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:11.079" endtime="20201015 13:38:11.099"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.078" endtime="20201015 13:38:11.099"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:11.112" endtime="20201015 13:38:11.134"></status>
</kw>
<msg timestamp="20201015 13:38:11.135" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:11.110" endtime="20201015 13:38:11.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:11.137" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['frdm-kw41z', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:11.136" endtime="20201015 13:38:11.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:11.141" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:11.138" endtime="20201015 13:38:11.141"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:11.108" endtime="20201015 13:38:11.144"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:11.106" endtime="20201015 13:38:11.145"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.104" endtime="20201015 13:38:11.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:11.150" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:11.149" endtime="20201015 13:38:11.151"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.147" endtime="20201015 13:38:11.151"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.104" endtime="20201015 13:38:11.151"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.103" endtime="20201015 13:38:11.152"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:11.153" endtime="20201015 13:38:11.154"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.102" endtime="20201015 13:38:11.155"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.100" endtime="20201015 13:38:11.155"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.076" endtime="20201015 13:38:11.155"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:11.168" endtime="20201015 13:38:16.732"></status>
</kw>
<msg timestamp="20201015 13:38:16.736" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:11.165" endtime="20201015 13:38:16.736"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.747" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:16.738" endtime="20201015 13:38:16.748"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.750" endtime="20201015 13:38:16.757"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.162" endtime="20201015 13:38:16.759"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.160" endtime="20201015 13:38:16.760"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:16.767" level="INFO">${RESULT} = {'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000], 'focus': ...</msg>
<status status="PASS" starttime="20201015 13:38:16.762" endtime="20201015 13:38:16.768"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:16.795" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:16.770" endtime="20201015 13:38:16.795"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.802" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:16.801" endtime="20201015 13:38:16.802"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.804" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:16.803" endtime="20201015 13:38:16.804"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.797" endtime="20201015 13:38:16.805"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.811" endtime="20201015 13:38:17.108"></status>
</kw>
<msg timestamp="20201015 13:38:17.111" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.584378097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.684070667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:16.809" endtime="20201015 13:38:17.111"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.119" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.584378097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.684070667, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:17.112" endtime="20201015 13:38:17.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:17.120" endtime="20201015 13:38:17.122"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.807" endtime="20201015 13:38:17.123"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.805" endtime="20201015 13:38:17.123"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:17.127" level="INFO">${FILTERED} = [{'diff': 0.09969256999999998}, {'diff': 0.09966472199999998}, {'diff': 0.09974663900000003}, {'diff': 0.09975674999999995}, {'diff': 0.0996423620000001}, {'diff': 0.09971283399999997}, {'diff': 0.099...</msg>
<status status="PASS" starttime="20201015 13:38:17.124" endtime="20201015 13:38:17.127"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:17.132" level="INFO">${RESULT} = {'diff': [0.09969256999999998, 0.09966472199999998, 0.09974663900000003, 0.09975674999999995, 0.0996423620000001, 0.09971283399999997, 0.09967500000000018, 0.09973372300000016, 0.09969923599999997, 0....</msg>
<status status="PASS" starttime="20201015 13:38:17.128" endtime="20201015 13:38:17.132"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.136" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:17.135" endtime="20201015 13:38:17.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:17.138" level="INFO">VALUE: [0.09969256999999998, 0.09966472199999998, 0.09974663900000003, 0.09975674999999995, 0.0996423620000001, 0.09971283399999997, 0.09967500000000018, 0.09973372300000016, 0.09969923599999997, 0.09994115300000006, 0.09943606900000002, 0.099696805, 0.09974255499999996, 0.09973744399999984, 0.09969074999999994, 0.09965655500000015, 0.09966882000000021, 0.0997491669999997, 0.09967288900000026, 0.09962819400000011, 0.09971330599999995, 0.09975031899999998, 0.099695584, 0.0996939160000001, 0.09976311099999968, 0.09970094399999985, 0.09972069500000025, 0.09970694499999988, 0.09972119499999987, 0.09966833300000033, 0.09971666700000004, 0.09970045900000013, 0.09991207000000024, 0.09957184700000044, 0.09966241700000023, 0.099704236, 0.09970523600000014, 0.09976591700000004, 0.09985393100000017, 0.09962416699999999, 0.09967362500000032, 0.09968343099999988, 0.09964818100000006, 0.09971627700000063, 0.0996669859999999, 0.09968126399999999, 0.09979142999999979, 0.09985373600000003, 0.09954963900000013, 0.099721014]</msg>
<status status="PASS" starttime="20201015 13:38:17.137" endtime="20201015 13:38:17.138"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:17.132" endtime="20201015 13:38:17.139"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:11.156" endtime="20201015 13:38:17.140"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_frdm-kw41z</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:11.074" endtime="20201015 13:38:17.140" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:39.291" endtime="20201015 13:38:17.147"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">frdm-kw41z</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:37:18.456" endtime="20201015 13:38:17.173"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_frdm-kw41z</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
