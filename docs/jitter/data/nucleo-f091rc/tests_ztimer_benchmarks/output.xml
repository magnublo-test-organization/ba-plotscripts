<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201015 13:37:37.692" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.255" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:38.264" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:39.422" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:38.254" endtime="20201015 13:37:39.423"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.426" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:39.424" endtime="20201015 13:37:39.426"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.252" endtime="20201015 13:37:39.427"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:39.429" endtime="20201015 13:37:39.615"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.428" endtime="20201015 13:37:39.616"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.628" endtime="20201015 13:37:39.643"></status>
</kw>
<msg timestamp="20201015 13:37:39.644" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['n(): This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Succ...</msg>
<status status="PASS" starttime="20201015 13:37:39.627" endtime="20201015 13:37:39.644"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.646" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['n(): This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Succ...</msg>
<status status="PASS" starttime="20201015 13:37:39.645" endtime="20201015 13:37:39.647"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.650" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:39.647" endtime="20201015 13:37:39.650"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.624" endtime="20201015 13:37:39.651"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.622" endtime="20201015 13:37:39.651"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.621" endtime="20201015 13:37:39.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:39.655" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:39.655" endtime="20201015 13:37:39.656"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.652" endtime="20201015 13:37:39.656"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.620" endtime="20201015 13:37:39.656"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.619" endtime="20201015 13:37:39.656"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.657" endtime="20201015 13:37:39.659"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.618" endtime="20201015 13:37:39.659"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.660" endtime="20201015 13:37:39.662"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.616" endtime="20201015 13:37:39.662"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.251" endtime="20201015 13:37:39.662"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:39.668" endtime="20201015 13:37:39.688"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.667" endtime="20201015 13:37:39.688"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.703" endtime="20201015 13:37:39.720"></status>
</kw>
<msg timestamp="20201015 13:37:39.721" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.700" endtime="20201015 13:37:39.721"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.726" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.723" endtime="20201015 13:37:39.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.732" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:39.729" endtime="20201015 13:37:39.733"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.698" endtime="20201015 13:37:39.734"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.695" endtime="20201015 13:37:39.736"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.693" endtime="20201015 13:37:39.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:39.744" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:39.743" endtime="20201015 13:37:39.745"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.738" endtime="20201015 13:37:39.745"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.693" endtime="20201015 13:37:39.746"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.692" endtime="20201015 13:37:39.746"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.748" endtime="20201015 13:37:39.751"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.691" endtime="20201015 13:37:39.752"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.689" endtime="20201015 13:37:39.753"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.666" endtime="20201015 13:37:39.753"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.767" endtime="20201015 13:37:39.780"></status>
</kw>
<msg timestamp="20201015 13:37:39.781" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.764" endtime="20201015 13:37:39.781"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.788" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.784" endtime="20201015 13:37:39.789"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.791" endtime="20201015 13:37:39.796"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.758" endtime="20201015 13:37:39.798"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.755" endtime="20201015 13:37:39.800"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.808" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:37:39.806" endtime="20201015 13:37:39.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.811" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:37:39.809" endtime="20201015 13:37:39.811"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.801" endtime="20201015 13:37:39.812"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:39.663" endtime="20201015 13:37:39.813" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:37.802" endtime="20201015 13:37:39.816"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.871" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:39.880" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:41.031" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:39.869" endtime="20201015 13:37:41.032"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.034" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:41.033" endtime="20201015 13:37:41.035"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.868" endtime="20201015 13:37:41.035"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:41.037" endtime="20201015 13:37:41.306"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.036" endtime="20201015 13:37:41.307"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.329" endtime="20201015 13:37:41.343"></status>
</kw>
<msg timestamp="20201015 13:37:41.344" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['in(): This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Suc...</msg>
<status status="PASS" starttime="20201015 13:37:41.328" endtime="20201015 13:37:41.344"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.346" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['in(): This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Suc...</msg>
<status status="PASS" starttime="20201015 13:37:41.345" endtime="20201015 13:37:41.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.350" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:41.348" endtime="20201015 13:37:41.350"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.325" endtime="20201015 13:37:41.351"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.320" endtime="20201015 13:37:41.351"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.317" endtime="20201015 13:37:41.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:41.355" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:41.355" endtime="20201015 13:37:41.356"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.352" endtime="20201015 13:37:41.356"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.315" endtime="20201015 13:37:41.356"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.314" endtime="20201015 13:37:41.356"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.357" endtime="20201015 13:37:41.359"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.311" endtime="20201015 13:37:41.359"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.360" endtime="20201015 13:37:41.362"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.308" endtime="20201015 13:37:41.362"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.867" endtime="20201015 13:37:41.362"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:41.368" endtime="20201015 13:37:41.389"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.367" endtime="20201015 13:37:41.389"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.403" endtime="20201015 13:37:41.418"></status>
</kw>
<msg timestamp="20201015 13:37:41.419" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.401" endtime="20201015 13:37:41.419"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.421" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.420" endtime="20201015 13:37:41.422"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:41.425" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:41.422" endtime="20201015 13:37:41.425"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.399" endtime="20201015 13:37:41.426"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:41.396" endtime="20201015 13:37:41.426"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.395" endtime="20201015 13:37:41.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:41.431" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:41.430" endtime="20201015 13:37:41.431"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.428" endtime="20201015 13:37:41.431"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.394" endtime="20201015 13:37:41.431"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.393" endtime="20201015 13:37:41.432"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.432" endtime="20201015 13:37:41.434"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.392" endtime="20201015 13:37:41.434"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.390" endtime="20201015 13:37:41.435"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.365" endtime="20201015 13:37:41.435"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:41.444" endtime="20201015 13:37:46.960"></status>
</kw>
<msg timestamp="20201015 13:37:46.961" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:41.442" endtime="20201015 13:37:46.961"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.966" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.963" endtime="20201015 13:37:46.967"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.969" endtime="20201015 13:37:46.974"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.439" endtime="20201015 13:37:46.975"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.437" endtime="20201015 13:37:46.976"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:46.982" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:46.978" endtime="20201015 13:37:46.982"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:47.021" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:37:46.984" endtime="20201015 13:37:47.021"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.025" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:47.024" endtime="20201015 13:37:47.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.027" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:37:47.026" endtime="20201015 13:37:47.027"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.022" endtime="20201015 13:37:47.028"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.036" endtime="20201015 13:37:47.337"></status>
</kw>
<msg timestamp="20201015 13:37:47.340" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565089069, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665090722, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:47.034" endtime="20201015 13:37:47.341"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.349" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565089069, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665090722, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:47.342" endtime="20201015 13:37:47.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.350" endtime="20201015 13:37:47.352"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.031" endtime="20201015 13:37:47.353"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.029" endtime="20201015 13:37:47.353"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:47.357" level="INFO">${FILTERED} = [{'diff': 0.10000165299999997}, {'diff': 0.09999908300000004}, {'diff': 0.10000291700000008}, {'diff': 0.10000275000000003}, {'diff': 0.10000408399999994}, {'diff': 0.10000508399999997}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:37:47.354" endtime="20201015 13:37:47.357"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:47.361" level="INFO">${RESULT} = {'diff': [0.10000165299999997, 0.09999908300000004, 0.10000291700000008, 0.10000275000000003, 0.10000408399999994, 0.10000508399999997, 0.09999758299999995, 0.099999583, 0.10000708400000002, 0.0999969...</msg>
<status status="PASS" starttime="20201015 13:37:47.358" endtime="20201015 13:37:47.361"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.366" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:47.365" endtime="20201015 13:37:47.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.369" level="INFO">VALUE: [0.10000165299999997, 0.09999908300000004, 0.10000291700000008, 0.10000275000000003, 0.10000408399999994, 0.10000508399999997, 0.09999758299999995, 0.099999583, 0.10000708400000002, 0.09999690300000008, 0.10000095800000008, 0.10000005600000006, 0.09999766700000001, 0.10000501399999995, 0.10000422199999992, 0.09999736100000023, 0.09999836099999992, 0.100005597, 0.10000470800000016, 0.0999975420000001, 0.10000340199999957, 0.099999736, 0.10000705499999984, 0.10000004200000001, 0.10000088899999993, 0.10000604099999988, 0.10000704199999966, 0.10000268100000032, 0.10000319499999977, 0.0999957079999998, 0.09999955600000021, 0.10000584700000026, 0.09999788899999995, 0.10000686099999978, 0.09999787500000012, 0.10000020900000006, 0.09999734699999951, 0.10000302799999972, 0.09999804200000018, 0.10000637500000042, 0.09999922199999922, 0.10000204199999985, 0.10000518100000022, 0.10000033300000055, 0.09999720799999956, 0.09999820900000067, 0.09999987499999996, 0.10000415299999954, 0.10000170900000072, 0.1000020269999995]</msg>
<status status="PASS" starttime="20201015 13:37:47.367" endtime="20201015 13:37:47.369"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.362" endtime="20201015 13:37:47.370"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:41.436" endtime="20201015 13:37:47.370"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:41.363" endtime="20201015 13:37:47.371" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:47.377" endtime="20201015 13:37:47.397"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.376" endtime="20201015 13:37:47.397"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.411" endtime="20201015 13:37:47.425"></status>
</kw>
<msg timestamp="20201015 13:37:47.426" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:47.409" endtime="20201015 13:37:47.426"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.428" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:47.427" endtime="20201015 13:37:47.429"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:47.431" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:47.429" endtime="20201015 13:37:47.432"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:47.407" endtime="20201015 13:37:47.432"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:47.404" endtime="20201015 13:37:47.433"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.403" endtime="20201015 13:37:47.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:47.438" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:47.437" endtime="20201015 13:37:47.438"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.435" endtime="20201015 13:37:47.438"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.402" endtime="20201015 13:37:47.439"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.401" endtime="20201015 13:37:47.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.439" endtime="20201015 13:37:47.441"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.400" endtime="20201015 13:37:47.442"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.398" endtime="20201015 13:37:47.442"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.375" endtime="20201015 13:37:47.442"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:47.452" endtime="20201015 13:37:52.980"></status>
</kw>
<msg timestamp="20201015 13:37:52.981" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:47.450" endtime="20201015 13:37:52.982"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:52.987" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:52.984" endtime="20201015 13:37:52.988"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:52.990" endtime="20201015 13:37:52.993"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.447" endtime="20201015 13:37:52.995"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.445" endtime="20201015 13:37:52.996"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:53.004" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 12250, 14500, 16750, 19000]}</msg>
<status status="PASS" starttime="20201015 13:37:52.998" endtime="20201015 13:37:53.004"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:53.017" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:53.007" endtime="20201015 13:37:53.017"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.022" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:53.020" endtime="20201015 13:37:53.022"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.025" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:53.023" endtime="20201015 13:37:53.025"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.018" endtime="20201015 13:37:53.026"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.034" endtime="20201015 13:37:53.331"></status>
</kw>
<msg timestamp="20201015 13:37:53.334" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565621778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665618083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:53.032" endtime="20201015 13:37:53.334"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.342" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.565621778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665618083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:53.335" endtime="20201015 13:37:53.342"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.343" endtime="20201015 13:37:53.345"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.029" endtime="20201015 13:37:53.345"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.027" endtime="20201015 13:37:53.346"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:53.405" level="INFO">${FILTERED} = [{'diff': 0.09999630500000001}, {'diff': 0.09999955599999999}, {'diff': 0.09999802700000004}, {'diff': 0.1000078889999999}, {'diff': 0.09999888800000001}, {'diff': 0.10000405599999995}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201015 13:37:53.402" endtime="20201015 13:37:53.406"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:53.410" level="INFO">${RESULT} = {'diff': [0.09999630500000001, 0.09999955599999999, 0.09999802700000004, 0.1000078889999999, 0.09999888800000001, 0.10000405599999995, 0.10000712499999986, 0.1000037359999999, 0.10000534700000019, 0.1...</msg>
<status status="PASS" starttime="20201015 13:37:53.406" endtime="20201015 13:37:53.410"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.415" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:53.413" endtime="20201015 13:37:53.415"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.418" level="INFO">VALUE: [0.09999630500000001, 0.09999955599999999, 0.09999802700000004, 0.1000078889999999, 0.09999888800000001, 0.10000405599999995, 0.10000712499999986, 0.1000037359999999, 0.10000534700000019, 0.10000469499999998, 0.0999960139999998, 0.10000541699999999, 0.10000122199999995, 0.0999993480000001, 0.09999886100000022, 0.09999884700000017, 0.10000416600000017, 0.09999952800000012, 0.10000349999999969, 0.10000586100000008, 0.10000017999999988, 0.09999904200000032, 0.10000634699999988, 0.09999818100000013, 0.10000786099999992, 0.09999662500000017, 0.09999833399999991, 0.10000784800000018, 0.10000518000000014, 0.09999791700000005, 0.10000552799999962, 0.10000401400000003, 0.09999829199999999, 0.1000013329999998, 0.10000719500000033, 0.09999977799999993, 0.10000579200000015, 0.09999984800000039, 0.09999684699999989, 0.09999634700000026, 0.1000003610000002, 0.10000294400000076, 0.10000634699999988, 0.10000005600000073, 0.10000059700000019, 0.09999941700000026, 0.10000629199999977, 0.09999743100000025, 0.10000609700000052, 0.10001200000000043]</msg>
<status status="PASS" starttime="20201015 13:37:53.416" endtime="20201015 13:37:53.418"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.411" endtime="20201015 13:37:53.419"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:47.443" endtime="20201015 13:37:53.419"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:47.372" endtime="20201015 13:37:53.420" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:53.427" endtime="20201015 13:37:53.447"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.426" endtime="20201015 13:37:53.447"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.461" endtime="20201015 13:37:53.475"></status>
</kw>
<msg timestamp="20201015 13:37:53.475" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:53.459" endtime="20201015 13:37:53.476"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.478" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:53.477" endtime="20201015 13:37:53.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:53.481" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:53.479" endtime="20201015 13:37:53.482"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:53.457" endtime="20201015 13:37:53.482"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:53.454" endtime="20201015 13:37:53.483"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.453" endtime="20201015 13:37:53.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:53.487" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:53.486" endtime="20201015 13:37:53.488"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.484" endtime="20201015 13:37:53.488"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.452" endtime="20201015 13:37:53.489"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.451" endtime="20201015 13:37:53.489"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.490" endtime="20201015 13:37:53.492"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.450" endtime="20201015 13:37:53.492"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.448" endtime="20201015 13:37:53.493"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.424" endtime="20201015 13:37:53.493"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:53.502" endtime="20201015 13:37:59.043"></status>
</kw>
<msg timestamp="20201015 13:37:59.044" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:53.500" endtime="20201015 13:37:59.044"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.050" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:59.046" endtime="20201015 13:37:59.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.052" endtime="20201015 13:37:59.056"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.497" endtime="20201015 13:37:59.057"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.495" endtime="20201015 13:37:59.058"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:59.064" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]}</msg>
<status status="PASS" starttime="20201015 13:37:59.059" endtime="20201015 13:37:59.064"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:59.075" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:59.066" endtime="20201015 13:37:59.075"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.083" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:59.081" endtime="20201015 13:37:59.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.086" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:59.085" endtime="20201015 13:37:59.086"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.076" endtime="20201015 13:37:59.087"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.093" endtime="20201015 13:37:59.389"></status>
</kw>
<msg timestamp="20201015 13:37:59.392" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.566317528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.666241014, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:59.092" endtime="20201015 13:37:59.392"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:59.400" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.566317528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.666241014, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:59.393" endtime="20201015 13:37:59.400"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:59.401" endtime="20201015 13:37:59.402"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.089" endtime="20201015 13:37:59.403"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:59.087" endtime="20201015 13:37:59.404"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:59.408" level="INFO">${FILTERED} = [{'diff': 0.099923486}, {'diff': 0.10000020800000009}, {'diff': 0.10000384700000009}, {'diff': 0.10000113900000007}, {'diff': 0.10000194500000004}, {'diff': 0.09999990299999983}, {'diff': 0.1000022500...</msg>
<status status="PASS" starttime="20201015 13:37:59.404" endtime="20201015 13:37:59.408"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:59.412" level="INFO">${RESULT} = {'diff': [0.099923486, 0.10000020800000009, 0.10000384700000009, 0.10000113900000007, 0.10000194500000004, 0.09999990299999983, 0.10000225000000018, 0.10000002800000019, 0.1000062639999999, 0.09999794...</msg>
<status status="PASS" starttime="20201015 13:37:59.409" endtime="20201015 13:38:03.140"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.151" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:03.148" endtime="20201015 13:38:03.151"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.156" level="INFO">VALUE: [0.099923486, 0.10000020800000009, 0.10000384700000009, 0.10000113900000007, 0.10000194500000004, 0.09999990299999983, 0.10000225000000018, 0.10000002800000019, 0.1000062639999999, 0.09999794400000006, 0.1000043049999999, 0.10000480600000006, 0.09999608299999996, 0.10000344399999994, 0.10000493100000019, 0.09999809699999984, 0.10000506899999984, 0.10000108299999999, 0.1000051110000002, 0.10000193099999999, 0.09999758299999995, 0.10000040300000013, 0.10000290300000003, 0.09999959700000005, 0.09999740200000007, 0.09999843099999994, 0.10000061100000002, 0.09999756900000012, 0.10000343000000012, 0.10000194399999973, 0.10000256899999993, 0.09999975000000028, 0.0999992500000002, 0.10000774999999962, 0.10000612499999972, 0.10000526399999998, 0.10000008399999949, 0.09999891700000063, 0.09999725000000037, 0.10000259700000047, 0.1000010549999999, 0.10000279099999965, 0.10000044500000005, 0.09999890299999947, 0.10000106900000016, 0.10000508400000019, 0.10000422199999992, 0.10000744400000006, 0.0999960410000007, 0.10000476399999947]</msg>
<status status="PASS" starttime="20201015 13:38:03.153" endtime="20201015 13:38:03.157"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.142" endtime="20201015 13:38:03.158"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:53.494" endtime="20201015 13:38:03.159"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:53.421" endtime="20201015 13:38:03.160" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:03.176" endtime="20201015 13:38:03.198"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.172" endtime="20201015 13:38:03.200"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:03.232" endtime="20201015 13:38:03.252"></status>
</kw>
<msg timestamp="20201015 13:38:03.253" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:03.225" endtime="20201015 13:38:03.253"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.259" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:03.255" endtime="20201015 13:38:03.259"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.265" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:03.261" endtime="20201015 13:38:03.266"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:03.219" endtime="20201015 13:38:03.267"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:03.214" endtime="20201015 13:38:03.269"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.211" endtime="20201015 13:38:03.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:03.278" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:03.276" endtime="20201015 13:38:03.279"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.271" endtime="20201015 13:38:03.279"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.209" endtime="20201015 13:38:03.279"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.208" endtime="20201015 13:38:03.280"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:03.281" endtime="20201015 13:38:03.285"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.205" endtime="20201015 13:38:03.286"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.201" endtime="20201015 13:38:03.287"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.169" endtime="20201015 13:38:03.288"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:03.299" endtime="20201015 13:38:08.853"></status>
</kw>
<msg timestamp="20201015 13:38:08.854" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:03.297" endtime="20201015 13:38:08.855"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:08.860" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:08.857" endtime="20201015 13:38:08.861"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:08.863" endtime="20201015 13:38:08.866"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.294" endtime="20201015 13:38:08.868"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.292" endtime="20201015 13:38:08.869"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:08.875" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]}</msg>
<status status="PASS" starttime="20201015 13:38:08.870" endtime="20201015 13:38:08.875"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:08.886" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:08.877" endtime="20201015 13:38:08.886"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:08.894" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:08.892" endtime="20201015 13:38:08.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:08.899" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:08.896" endtime="20201015 13:38:08.899"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:08.888" endtime="20201015 13:38:08.901"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:08.915" endtime="20201015 13:38:09.223"></status>
</kw>
<msg timestamp="20201015 13:38:09.226" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.615002528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.714990389, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:08.912" endtime="20201015 13:38:09.227"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.234" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.615002528, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.714990389, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:09.227" endtime="20201015 13:38:09.235"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:09.236" endtime="20201015 13:38:09.237"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:08.906" endtime="20201015 13:38:09.238"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:08.902" endtime="20201015 13:38:09.238"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:09.242" level="INFO">${FILTERED} = [{'diff': 0.09998786100000001}, {'diff': 0.10000094399999993}, {'diff': 0.10000492999999999}, {'diff': 0.09999613900000015}, {'diff': 0.10000426299999998}, {'diff': 0.10000076400000002}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:38:09.239" endtime="20201015 13:38:09.242"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:09.246" level="INFO">${RESULT} = {'diff': [0.09998786100000001, 0.10000094399999993, 0.10000492999999999, 0.09999613900000015, 0.10000426299999998, 0.10000076400000002, 0.09999794499999992, 0.10000077799999985, 0.09999695799999997, 0...</msg>
<status status="PASS" starttime="20201015 13:38:09.243" endtime="20201015 13:38:09.247"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.251" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:09.250" endtime="20201015 13:38:09.251"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.253" level="INFO">VALUE: [0.09998786100000001, 0.10000094399999993, 0.10000492999999999, 0.09999613900000015, 0.10000426299999998, 0.10000076400000002, 0.09999794499999992, 0.10000077799999985, 0.09999695799999997, 0.10000494399999993, 0.10000175000000011, 0.10000498600000007, 0.09999770899999993, 0.10000088899999993, 0.10000590300000001, 0.09999906899999988, 0.10000677699999994, 0.09999822200000041, 0.09999790300000022, 0.09999955499999968, 0.10000537499999984, 0.09999854099999972, 0.09999922200000011, 0.09999870899999985, 0.0999982359999998, 0.10000238899999969, 0.10000615299999982, 0.10000787500000019, 0.10000294499999995, 0.10000370900000011, 0.10000308300000027, 0.09999722299999991, 0.10000036099999976, 0.1000070700000002, 0.10000540299999994, 0.10000522200000006, 0.09999838899999958, 0.09999873599999987, 0.10000105599999998, 0.10000686199999986, 0.0999999589999998, 0.10000006900000002, 0.09999972199999974, 0.10000456900000021, 0.10000257000000001, 0.09999856900000026, 0.10000674999999948, 0.09999887499999982, 0.10000023599999963, 0.10000776399999989]</msg>
<status status="PASS" starttime="20201015 13:38:09.252" endtime="20201015 13:38:09.254"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.247" endtime="20201015 13:38:09.255"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.289" endtime="20201015 13:38:09.255"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:03.164" endtime="20201015 13:38:09.256" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:09.262" endtime="20201015 13:38:09.282"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.261" endtime="20201015 13:38:09.282"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:09.297" endtime="20201015 13:38:09.310"></status>
</kw>
<msg timestamp="20201015 13:38:09.311" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:09.295" endtime="20201015 13:38:09.311"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.313" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:09.312" endtime="20201015 13:38:09.314"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.317" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:09.315" endtime="20201015 13:38:09.317"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:09.293" endtime="20201015 13:38:09.318"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:09.290" endtime="20201015 13:38:09.318"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.288" endtime="20201015 13:38:09.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:09.322" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:09.322" endtime="20201015 13:38:09.323"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.319" endtime="20201015 13:38:09.323"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.287" endtime="20201015 13:38:09.323"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.286" endtime="20201015 13:38:09.323"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:09.324" endtime="20201015 13:38:09.326"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.285" endtime="20201015 13:38:09.326"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.283" endtime="20201015 13:38:09.327"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.260" endtime="20201015 13:38:09.327"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:09.342" endtime="20201015 13:38:14.909"></status>
</kw>
<msg timestamp="20201015 13:38:14.910" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:09.339" endtime="20201015 13:38:14.911"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:14.916" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:14.912" endtime="20201015 13:38:14.917"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:14.919" endtime="20201015 13:38:14.922"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.334" endtime="20201015 13:38:14.923"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.330" endtime="20201015 13:38:14.925"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:14.935" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]}</msg>
<status status="PASS" starttime="20201015 13:38:14.928" endtime="20201015 13:38:14.936"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:14.949" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:14.938" endtime="20201015 13:38:14.950"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:14.963" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:14.959" endtime="20201015 13:38:14.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:14.969" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:14.966" endtime="20201015 13:38:14.970"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:14.951" endtime="20201015 13:38:14.971"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:14.986" endtime="20201015 13:38:15.285"></status>
</kw>
<msg timestamp="20201015 13:38:15.288" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.574532375, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.674529514, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:14.982" endtime="20201015 13:38:15.289"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.296" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.574532375, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.674529514, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:15.290" endtime="20201015 13:38:15.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:15.298" endtime="20201015 13:38:15.299"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:14.977" endtime="20201015 13:38:15.300"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:14.973" endtime="20201015 13:38:15.300"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:15.304" level="INFO">${FILTERED} = [{'diff': 0.09999713900000007}, {'diff': 0.10000458300000004}, {'diff': 0.10000369399999998}, {'diff': 0.09999930499999998}, {'diff': 0.10000258299999998}, {'diff': 0.0999975689999999}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201015 13:38:15.301" endtime="20201015 13:38:15.305"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:15.308" level="INFO">${RESULT} = {'diff': [0.09999713900000007, 0.10000458300000004, 0.10000369399999998, 0.09999930499999998, 0.10000258299999998, 0.0999975689999999, 0.100000584, 0.10000541699999999, 0.10000708299999994, 0.09999993...</msg>
<status status="PASS" starttime="20201015 13:38:15.305" endtime="20201015 13:38:15.309"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.313" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:15.312" endtime="20201015 13:38:15.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.316" level="INFO">VALUE: [0.09999713900000007, 0.10000458300000004, 0.10000369399999998, 0.09999930499999998, 0.10000258299999998, 0.0999975689999999, 0.100000584, 0.10000541699999999, 0.10000708299999994, 0.09999993100000015, 0.10000516699999995, 0.099999014, 0.1000000270000001, 0.09999917999999997, 0.10000333299999986, 0.10003552799999982, 0.0999719859999999, 0.10000184700000014, 0.10000052800000025, 0.09999836099999992, 0.10000537500000029, 0.10000083299999973, 0.10000486099999994, 0.10000252799999965, 0.10000436099999988, 0.10002134699999976, 0.09998487500000008, 0.10000102799999988, 0.10000236100000004, 0.09999986099999969, 0.10000486099999994, 0.09999720900000009, 0.10000267999999979, 0.1000035269999997, 0.10000168100000018, 0.09999718099999999, 0.0999978619999995, 0.10000302699999963, 0.10000172200000002, 0.10000536100000001, 0.10000549999999997, 0.10000524999999971, 0.10000368099999957, 0.09999720899999964, 0.1000046939999999, 0.09999702799999977, 0.10000034700000082, 0.10000637499999954, 0.1000026940000005, 0.10000004199999957]</msg>
<status status="PASS" starttime="20201015 13:38:15.315" endtime="20201015 13:38:15.316"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.309" endtime="20201015 13:38:15.317"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.328" endtime="20201015 13:38:15.317"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:09.257" endtime="20201015 13:38:15.318" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:15.325" endtime="20201015 13:38:15.345"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.324" endtime="20201015 13:38:15.345"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:15.359" endtime="20201015 13:38:15.373"></status>
</kw>
<msg timestamp="20201015 13:38:15.373" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:15.357" endtime="20201015 13:38:15.374"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.376" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f091rc', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:15.374" endtime="20201015 13:38:15.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.379" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:15.377" endtime="20201015 13:38:15.379"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:15.355" endtime="20201015 13:38:15.380"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:15.352" endtime="20201015 13:38:15.381"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.351" endtime="20201015 13:38:15.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:15.385" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:15.384" endtime="20201015 13:38:15.385"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.382" endtime="20201015 13:38:15.386"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.350" endtime="20201015 13:38:15.386"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.349" endtime="20201015 13:38:15.386"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:15.387" endtime="20201015 13:38:15.388"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.348" endtime="20201015 13:38:15.389"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.346" endtime="20201015 13:38:15.389"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.322" endtime="20201015 13:38:15.389"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:15.399" endtime="20201015 13:38:20.977"></status>
</kw>
<msg timestamp="20201015 13:38:20.978" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:15.396" endtime="20201015 13:38:20.979"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:20.984" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:20.980" endtime="20201015 13:38:20.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:20.987" endtime="20201015 13:38:20.991"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.394" endtime="20201015 13:38:20.992"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.392" endtime="20201015 13:38:20.993"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:21.001" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250,...</msg>
<status status="PASS" starttime="20201015 13:38:20.995" endtime="20201015 13:38:21.001"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:21.009" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:21.003" endtime="20201015 13:38:21.009"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.013" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:21.012" endtime="20201015 13:38:21.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.016" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:21.015" endtime="20201015 13:38:21.016"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.010" endtime="20201015 13:38:21.017"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:21.023" endtime="20201015 13:38:21.318"></status>
</kw>
<msg timestamp="20201015 13:38:21.321" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.567331597, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.667404347, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:21.022" endtime="20201015 13:38:21.321"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.329" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.567331597, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.667404347, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:21.322" endtime="20201015 13:38:21.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:21.330" endtime="20201015 13:38:21.332"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.019" endtime="20201015 13:38:21.332"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.017" endtime="20201015 13:38:21.333"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:21.337" level="INFO">${FILTERED} = [{'diff': 0.10007274999999993}, {'diff': 0.10001527799999999}, {'diff': 0.09993343099999996}, {'diff': 0.10006108299999994}, {'diff': 0.0999099859999999}, {'diff': 0.100001695}, {'diff': 0.10000457000...</msg>
<status status="PASS" starttime="20201015 13:38:21.334" endtime="20201015 13:38:21.337"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:21.341" level="INFO">${RESULT} = {'diff': [0.10007274999999993, 0.10001527799999999, 0.09993343099999996, 0.10006108299999994, 0.0999099859999999, 0.100001695, 0.10000457000000007, 0.10000775000000006, 0.10000570899999994, 0.10000106...</msg>
<status status="PASS" starttime="20201015 13:38:21.338" endtime="20201015 13:38:21.342"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.346" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:21.345" endtime="20201015 13:38:21.346"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.348" level="INFO">VALUE: [0.10007274999999993, 0.10001527799999999, 0.09993343099999996, 0.10006108299999994, 0.0999099859999999, 0.100001695, 0.10000457000000007, 0.10000775000000006, 0.10000570899999994, 0.10000106899999994, 0.10000031899999984, 0.10000649999999989, 0.10000233299999994, 0.10000083299999996, 0.09999984700000009, 0.09999999999999964, 0.1000038609999998, 0.09999805499999992, 0.09999881999999971, 0.10000318099999994, 0.10000419400000027, 0.09999818000000005, 0.09999751299999993, 0.09999745799999982, 0.09999786099999985, 0.10000262500000012, 0.10000583299999999, 0.10000116699999984, 0.09999915300000017, 0.1000078470000001, 0.0999983470000001, 0.10000244499999988, 0.09999936100000006, 0.09999719400000018, 0.10000451300000046, 0.10000590300000045, 0.10000202799999958, 0.09999751400000001, 0.10000134700000007, 0.10002594499999962, 0.09997708399999983, 0.1000068470000004, 0.10000384800000006, 0.10000093100000029, 0.1000076519999995, 0.10000601399999987, 0.10000052799999981, 0.1000018469999997, 0.10000518100000022, 0.10000568100000073]</msg>
<status status="PASS" starttime="20201015 13:38:21.347" endtime="20201015 13:38:21.348"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.342" endtime="20201015 13:38:21.349"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.390" endtime="20201015 13:38:21.349"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f091rc</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:15.320" endtime="20201015 13:38:21.350" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:39.822" endtime="20201015 13:38:21.357"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f091rc</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:37:37.695" endtime="20201015 13:38:21.382"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f091rc</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
