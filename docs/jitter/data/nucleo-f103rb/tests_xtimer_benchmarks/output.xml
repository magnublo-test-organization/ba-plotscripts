<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201010 12:24:54.092" rpa="false">
<suite id="s1" name="tests_xtimer_benchmarks" source="/home/pi/.tmp/RobotFW-tests/tests/xtimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/home/pi/.tmp/RobotFW-tests/tests/xtimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201010 12:24:55.310" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201010 12:24:55.318" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201010 12:24:57.193" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201010 12:24:55.308" endtime="20201010 12:24:57.195"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.200" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201010 12:24:57.197" endtime="20201010 12:24:57.201"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:55.306" endtime="20201010 12:24:57.203"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:24:57.208" endtime="20201010 12:24:57.538"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.205" endtime="20201010 12:24:57.540"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.570" endtime="20201010 12:24:57.592"></status>
</kw>
<msg timestamp="20201010 12:24:57.593" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': [' This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'...</msg>
<status status="PASS" starttime="20201010 12:24:57.567" endtime="20201010 12:24:57.594"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.600" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': [' This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'...</msg>
<status status="PASS" starttime="20201010 12:24:57.596" endtime="20201010 12:24:57.601"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.607" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:24:57.602" endtime="20201010 12:24:57.608"></status>
</kw>
<status status="FAIL" starttime="20201010 12:24:57.560" endtime="20201010 12:24:57.610"></status>
</kw>
<status status="FAIL" starttime="20201010 12:24:57.555" endtime="20201010 12:24:57.611"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.552" endtime="20201010 12:24:57.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:24:57.620" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:24:57.618" endtime="20201010 12:24:57.622"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.614" endtime="20201010 12:24:57.623"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.550" endtime="20201010 12:24:57.623"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.548" endtime="20201010 12:24:57.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.625" endtime="20201010 12:24:57.628"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.545" endtime="20201010 12:24:57.630"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.632" endtime="20201010 12:24:57.635"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.541" endtime="20201010 12:24:57.637"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:55.304" endtime="20201010 12:24:57.638"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:24:57.653" endtime="20201010 12:24:57.674"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.649" endtime="20201010 12:24:57.676"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.712" endtime="20201010 12:24:57.730"></status>
</kw>
<msg timestamp="20201010 12:24:57.731" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:24:57.708" endtime="20201010 12:24:57.732"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.738" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:24:57.733" endtime="20201010 12:24:57.738"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.744" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:24:57.740" endtime="20201010 12:24:57.745"></status>
</kw>
<status status="FAIL" starttime="20201010 12:24:57.701" endtime="20201010 12:24:57.747"></status>
</kw>
<status status="FAIL" starttime="20201010 12:24:57.694" endtime="20201010 12:24:57.749"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.690" endtime="20201010 12:24:57.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:24:57.757" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:24:57.756" endtime="20201010 12:24:57.758"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.751" endtime="20201010 12:24:57.758"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.688" endtime="20201010 12:24:57.759"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.686" endtime="20201010 12:24:57.759"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.761" endtime="20201010 12:24:57.764"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.682" endtime="20201010 12:24:57.766"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.678" endtime="20201010 12:24:57.767"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.646" endtime="20201010 12:24:57.768"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.788" endtime="20201010 12:24:57.802"></status>
</kw>
<msg timestamp="20201010 12:24:57.803" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:24:57.783" endtime="20201010 12:24:57.803"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.809" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['xtimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:24:57.805" endtime="20201010 12:24:57.810"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:24:57.812" endtime="20201010 12:24:57.815"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.776" endtime="20201010 12:24:57.817"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.770" endtime="20201010 12:24:57.818"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.830" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201010 12:24:57.827" endtime="20201010 12:24:57.830"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.834" level="INFO">VALUE: xtimer</msg>
<status status="PASS" starttime="20201010 12:24:57.832" endtime="20201010 12:24:57.835"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.821" endtime="20201010 12:24:57.836"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:24:57.639" endtime="20201010 12:24:57.839" critical="yes"></status>
</test>
<status status="PASS" starttime="20201010 12:24:54.361" endtime="20201010 12:24:57.847"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/home/pi/.tmp/RobotFW-tests/tests/xtimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201010 12:24:57.976" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201010 12:24:57.992" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201010 12:24:59.946" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201010 12:24:57.973" endtime="20201010 12:24:59.948"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201010 12:24:59.953" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201010 12:24:59.950" endtime="20201010 12:24:59.954"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.970" endtime="20201010 12:24:59.956"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:24:59.960" endtime="20201010 12:25:00.292"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:59.957" endtime="20201010 12:25:00.293"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:00.323" endtime="20201010 12:25:00.345"></status>
</kw>
<msg timestamp="20201010 12:25:00.346" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:00.320" endtime="20201010 12:25:00.347"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:00.353" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:00.349" endtime="20201010 12:25:00.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:00.360" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:00.355" endtime="20201010 12:25:00.360"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:00.313" endtime="20201010 12:25:00.362"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:00.308" endtime="20201010 12:25:00.364"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.305" endtime="20201010 12:25:00.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:00.372" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:00.371" endtime="20201010 12:25:00.373"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.366" endtime="20201010 12:25:00.374"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.303" endtime="20201010 12:25:00.374"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.302" endtime="20201010 12:25:00.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:00.376" endtime="20201010 12:25:00.379"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.298" endtime="20201010 12:25:00.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:00.383" endtime="20201010 12:25:00.386"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.295" endtime="20201010 12:25:00.388"></status>
</kw>
<status status="PASS" starttime="20201010 12:24:57.967" endtime="20201010 12:25:00.389"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:00.405" endtime="20201010 12:25:00.427"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.401" endtime="20201010 12:25:00.428"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:00.462" endtime="20201010 12:25:00.482"></status>
</kw>
<msg timestamp="20201010 12:25:00.483" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:00.458" endtime="20201010 12:25:00.483"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:00.489" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:00.485" endtime="20201010 12:25:00.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:00.496" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:00.492" endtime="20201010 12:25:00.497"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:00.451" endtime="20201010 12:25:00.498"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:00.445" endtime="20201010 12:25:00.500"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.442" endtime="20201010 12:25:00.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:00.509" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:00.507" endtime="20201010 12:25:00.509"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.503" endtime="20201010 12:25:00.510"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.440" endtime="20201010 12:25:00.510"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.438" endtime="20201010 12:25:00.511"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:00.512" endtime="20201010 12:25:00.516"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.434" endtime="20201010 12:25:00.517"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.430" endtime="20201010 12:25:00.519"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.396" endtime="20201010 12:25:00.519"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:00.543" endtime="20201010 12:25:06.561"></status>
</kw>
<msg timestamp="20201010 12:25:06.562" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0 1\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:00.539" endtime="20201010 12:25:06.562"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:06.568" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0 1\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:06.564" endtime="20201010 12:25:06.569"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:06.571" endtime="20201010 12:25:06.575"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.532" endtime="20201010 12:25:06.576"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.526" endtime="20201010 12:25:06.578"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:06.583" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201010 12:25:06.579" endtime="20201010 12:25:06.583"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:06.638" level="INFO">${interval} = []</msg>
<status status="PASS" starttime="20201010 12:25:06.585" endtime="20201010 12:25:06.638"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:06.647" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:06.645" endtime="20201010 12:25:06.648"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:06.652" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201010 12:25:06.650" endtime="20201010 12:25:06.652"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:06.640" endtime="20201010 12:25:06.654"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:06.663" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:06.660" endtime="20201010 12:25:06.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:06.667" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:06.665" endtime="20201010 12:25:06.668"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:06.655" endtime="20201010 12:25:06.670"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:06.687" endtime="20201010 12:25:06.996"></status>
</kw>
<msg timestamp="20201010 12:25:07.001" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.230522042, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0, 'source_diff': 0}, {'time': 1.230522583, 'source': 'DUT_IC', 'event': 'RI...</msg>
<status status="PASS" starttime="20201010 12:25:06.684" endtime="20201010 12:25:07.002"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:07.017" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.230522042, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0, 'source_diff': 0}, {'time': 1.230522583, 'source': 'DUT_IC', 'event': 'RI...</msg>
<status status="PASS" starttime="20201010 12:25:07.004" endtime="20201010 12:25:07.017"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:07.019" endtime="20201010 12:25:07.023"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:06.676" endtime="20201010 12:25:07.025"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:06.671" endtime="20201010 12:25:07.026"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:07.036" level="INFO">${FILTERED} = [{'diff': 0}, {'diff': 0.10000937499999996}, {'diff': 0.10001040300000019}, {'diff': 0.10001090200000018}, {'diff': 5.419999999922709e-07}, {'diff': 0.10001090199999996}, {'diff': 0.10001036099999983}...</msg>
<status status="PASS" starttime="20201010 12:25:07.028" endtime="20201010 12:25:07.036"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:07.044" level="INFO">${RESULT} = {'diff': [0, 0.10000937499999996, 0.10001040300000019, 0.10001090200000018, 5.419999999922709e-07, 0.10001090199999996, 0.10001036099999983, 0.1000103750000001, 0.10001038800000028, 0.1000109030000002...</msg>
<status status="PASS" starttime="20201010 12:25:07.038" endtime="20201010 12:25:07.045"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:07.056" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:07.053" endtime="20201010 12:25:07.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:07.061" level="INFO">VALUE: [0, 0.10000937499999996, 0.10001040300000019, 0.10001090200000018, 5.419999999922709e-07, 0.10001090199999996, 0.10001036099999983, 0.1000103750000001, 0.10001038800000028, 0.10001090300000026, 0.10001036099999983, 0.10001045900000038, 0.10001088899999999, 0.10001037499999965, 0.1000103750000001, 0.10001038899999992, 0.10001091700000009, 5.419999999922709e-07, 5.409999999095305e-07, 5.419999999922709e-07, 0.10001095799999993, 5.419999999922709e-07, 5.419999995481817e-07, 5.410000003536197e-07, 5.419999995481817e-07, 0.10001090300000026, 0.10001038900000037, 5.419999995481817e-07, 5.420000004363601e-07, 0.10001087499999972, 0.10001040299999975, 5.410000003536197e-07, 5.419999995481817e-07, 0.10001090299999937, 5.420000004363601e-07, 5.419999995481817e-07, 5.420000004363601e-07, 5.409999994654413e-07, 0.10001086099999945]</msg>
<status status="PASS" starttime="20201010 12:25:07.058" endtime="20201010 12:25:07.062"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.046" endtime="20201010 12:25:07.063"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:00.521" endtime="20201010 12:25:07.065"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:00.390" endtime="20201010 12:25:07.067" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:07.085" endtime="20201010 12:25:07.106"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.081" endtime="20201010 12:25:07.108"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:07.142" endtime="20201010 12:25:07.161"></status>
</kw>
<msg timestamp="20201010 12:25:07.162" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:07.138" endtime="20201010 12:25:07.162"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:07.169" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:07.164" endtime="20201010 12:25:07.170"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:07.176" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:07.172" endtime="20201010 12:25:07.177"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:07.131" endtime="20201010 12:25:07.178"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:07.125" endtime="20201010 12:25:07.180"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.122" endtime="20201010 12:25:07.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:07.189" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:07.187" endtime="20201010 12:25:07.189"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.183" endtime="20201010 12:25:07.190"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.120" endtime="20201010 12:25:07.190"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.118" endtime="20201010 12:25:07.191"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:07.192" endtime="20201010 12:25:07.196"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.114" endtime="20201010 12:25:07.197"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.110" endtime="20201010 12:25:07.199"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.078" endtime="20201010 12:25:07.199"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:07.225" endtime="20201010 12:25:13.253"></status>
</kw>
<msg timestamp="20201010 12:25:13.255" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '10741'}, {'interval': '84225'}, {'interval': '46186'}, {'interval': '37795'}, {'interval': '34698'}...</msg>
<status status="PASS" starttime="20201010 12:25:07.221" endtime="20201010 12:25:13.255"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.261" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '10741'}, {'interval': '84225'}, {'interval': '46186'}, {'interval': '37795'}, {'interval': '34698'}...</msg>
<status status="PASS" starttime="20201010 12:25:13.257" endtime="20201010 12:25:13.262"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:13.263" endtime="20201010 12:25:13.267"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.212" endtime="20201010 12:25:13.269"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.206" endtime="20201010 12:25:13.270"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:13.276" level="INFO">${RESULT} = {'interval': [10741, 84225, 46186, 37795, 34698], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201010 12:25:13.272" endtime="20201010 12:25:13.277"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:13.282" level="INFO">${interval} = [10741, 84225, 46186, 37795, 34698]</msg>
<status status="PASS" starttime="20201010 12:25:13.278" endtime="20201010 12:25:13.283"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.291" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:13.289" endtime="20201010 12:25:13.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.296" level="INFO">VALUE: [10741, 84225, 46186, 37795, 34698]</msg>
<status status="PASS" starttime="20201010 12:25:13.294" endtime="20201010 12:25:13.297"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.284" endtime="20201010 12:25:13.298"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.307" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:13.305" endtime="20201010 12:25:13.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.311" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:13.309" endtime="20201010 12:25:13.312"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.300" endtime="20201010 12:25:13.312"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:13.321" endtime="20201010 12:25:13.636"></status>
</kw>
<msg timestamp="20201010 12:25:13.642" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.132588569, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.232600264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:13.318" endtime="20201010 12:25:13.642"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.657" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.132588569, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.232600264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:13.644" endtime="20201010 12:25:13.658"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:13.660" endtime="20201010 12:25:13.664"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.315" endtime="20201010 12:25:13.665"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.313" endtime="20201010 12:25:13.667"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:13.677" level="INFO">${FILTERED} = [{'diff': 0.10001169500000007}, {'diff': 0.10001084699999985}, {'diff': 0.10001034799999986}, {'diff': 0.10001036100000005}, {'diff': 0.10001084700000007}, {'diff': 0.100010347}, {'diff': 0.100010347}...</msg>
<status status="PASS" starttime="20201010 12:25:13.668" endtime="20201010 12:25:13.677"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:13.687" level="INFO">${RESULT} = {'diff': [0.10001169500000007, 0.10001084699999985, 0.10001034799999986, 0.10001036100000005, 0.10001084700000007, 0.100010347, 0.100010347, 0.1000103750000001, 0.10001087500000017, 5.419999999922709e...</msg>
<status status="PASS" starttime="20201010 12:25:13.679" endtime="20201010 12:25:13.687"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.697" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:13.695" endtime="20201010 12:25:13.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.702" level="INFO">VALUE: [0.10001169500000007, 0.10001084699999985, 0.10001034799999986, 0.10001036100000005, 0.10001084700000007, 0.100010347, 0.100010347, 0.1000103750000001, 0.10001087500000017, 5.419999999922709e-07, 0.10001084699999963, 0.10001036199999991, 5.410000003536197e-07, 5.419999999922709e-07, 0.10001087500000017, 0.10001038899999992, 5.419999999922709e-07, 0.1000108609999999, 0.100010347, 0.10001034799999964, 0.10001036099999983, 5.419999999922709e-07, 5.419999995481817e-07, 0.10001086099999945, 0.10001034699999956, 0.10001034699999956, 0.10001034699999956, 0.10001036099999983, 5.410000003536197e-07, 0.10001086099999945, 0.10001034699999956, 0.10001034699999956, 0.10001034699999956, 0.10001033300000017, 0.10001034700000044, 0.10001034700000044, 0.10001034700000044, 0.10001034800000053, 0.1000103750000001, 5.419999995481817e-07, 0.10001095800000037]</msg>
<status status="PASS" starttime="20201010 12:25:13.699" endtime="20201010 12:25:13.703"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.688" endtime="20201010 12:25:13.705"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:07.201" endtime="20201010 12:25:13.706"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:07.072" endtime="20201010 12:25:13.708" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:13.726" endtime="20201010 12:25:13.748"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.722" endtime="20201010 12:25:13.749"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:13.783" endtime="20201010 12:25:13.802"></status>
</kw>
<msg timestamp="20201010 12:25:13.803" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:13.780" endtime="20201010 12:25:13.803"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.810" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:13.805" endtime="20201010 12:25:13.810"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:13.817" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:13.812" endtime="20201010 12:25:13.818"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:13.772" endtime="20201010 12:25:13.820"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:13.766" endtime="20201010 12:25:13.821"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.763" endtime="20201010 12:25:13.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:13.830" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:13.828" endtime="20201010 12:25:13.831"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.824" endtime="20201010 12:25:13.831"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.761" endtime="20201010 12:25:13.831"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.760" endtime="20201010 12:25:13.832"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:13.833" endtime="20201010 12:25:13.837"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.755" endtime="20201010 12:25:13.838"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.751" endtime="20201010 12:25:13.840"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.719" endtime="20201010 12:25:13.841"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:13.866" endtime="20201010 12:25:19.907"></status>
</kw>
<msg timestamp="20201010 12:25:19.908" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '37694'}, {'interval': '23825'}, {'interval': '30414'}, {'interval': '39030'}, {'interval': '45533'...</msg>
<status status="PASS" starttime="20201010 12:25:13.863" endtime="20201010 12:25:19.909"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:19.915" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '37694'}, {'interval': '23825'}, {'interval': '30414'}, {'interval': '39030'}, {'interval': '45533'...</msg>
<status status="PASS" starttime="20201010 12:25:19.911" endtime="20201010 12:25:19.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:19.917" endtime="20201010 12:25:19.921"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.853" endtime="20201010 12:25:19.923"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.847" endtime="20201010 12:25:19.924"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:19.930" level="INFO">${RESULT} = {'interval': [37694, 23825, 30414, 39030, 45533, 29992, 36619, 57620, 20383, 26570], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201010 12:25:19.926" endtime="20201010 12:25:19.931"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:19.937" level="INFO">${interval} = [37694, 23825, 30414, 39030, 45533, 29992, 36619, 57620, 20383, 26570]</msg>
<status status="PASS" starttime="20201010 12:25:19.933" endtime="20201010 12:25:19.937"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:19.946" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:19.944" endtime="20201010 12:25:19.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:19.950" level="INFO">VALUE: [37694, 23825, 30414, 39030, 45533, 29992, 36619, 57620, 20383, 26570]</msg>
<status status="PASS" starttime="20201010 12:25:19.948" endtime="20201010 12:25:19.951"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:19.938" endtime="20201010 12:25:19.953"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:19.961" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:19.959" endtime="20201010 12:25:19.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:19.966" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:19.964" endtime="20201010 12:25:19.967"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:19.954" endtime="20201010 12:25:19.968"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:19.985" endtime="20201010 12:25:20.289"></status>
</kw>
<msg timestamp="20201010 12:25:20.294" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133511542, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233522264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:19.982" endtime="20201010 12:25:20.295"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:20.310" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133511542, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233522264, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:20.297" endtime="20201010 12:25:20.311"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:20.312" endtime="20201010 12:25:20.316"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:19.974" endtime="20201010 12:25:20.318"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:19.970" endtime="20201010 12:25:20.319"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:20.329" level="INFO">${FILTERED} = [{'diff': 0.10001072200000016}, {'diff': 0.10001037499999987}, {'diff': 0.10001084700000007}, {'diff': 0.10001088899999999}, {'diff': 5.419999999922709e-07}, {'diff': 0.10001088899999999}, {'diff': 0....</msg>
<status status="PASS" starttime="20201010 12:25:20.321" endtime="20201010 12:25:20.330"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:20.339" level="INFO">${RESULT} = {'diff': [0.10001072200000016, 0.10001037499999987, 0.10001084700000007, 0.10001088899999999, 5.419999999922709e-07, 0.10001088899999999, 0.10001036100000027, 0.10001037499999965, 0.1000104300000002, ...</msg>
<status status="PASS" starttime="20201010 12:25:20.331" endtime="20201010 12:25:20.340"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:20.349" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:20.347" endtime="20201010 12:25:20.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:20.355" level="INFO">VALUE: [0.10001072200000016, 0.10001037499999987, 0.10001084700000007, 0.10001088899999999, 5.419999999922709e-07, 0.10001088899999999, 0.10001036100000027, 0.10001037499999965, 0.1000104300000002, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 0.10001088899999999, 0.1000103750000001, 0.10001038899999992, 5.419999999922709e-07, 0.10001090299999982, 0.1000103750000001, 5.419999999922709e-07, 5.419999999922709e-07, 5.409999999095305e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.410000003536197e-07, 5.420000004363601e-07, 0.10001090300000026, 0.1000103750000001, 0.10001036099999983, 0.10001040300000064, 5.409999994654413e-07, 5.420000004363601e-07, 0.10001090299999937, 0.10001036099999983, 0.10001038899999948, 5.420000004363601e-07, 5.409999994654413e-07, 5.410000003536197e-07, 0.10001076399999942, 5.420000004363601e-07, 5.410000003536197e-07, 0.10001080600000023]</msg>
<status status="PASS" starttime="20201010 12:25:20.352" endtime="20201010 12:25:20.356"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.341" endtime="20201010 12:25:20.357"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:13.842" endtime="20201010 12:25:20.359"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:13.713" endtime="20201010 12:25:20.361" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:20.379" endtime="20201010 12:25:20.400"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.375" endtime="20201010 12:25:20.402"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:20.436" endtime="20201010 12:25:20.455"></status>
</kw>
<msg timestamp="20201010 12:25:20.456" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:20.432" endtime="20201010 12:25:20.456"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:20.462" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:20.458" endtime="20201010 12:25:20.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:20.469" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:20.465" endtime="20201010 12:25:20.470"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:20.425" endtime="20201010 12:25:20.472"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:20.419" endtime="20201010 12:25:20.474"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.416" endtime="20201010 12:25:20.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:20.482" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:20.481" endtime="20201010 12:25:20.483"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.476" endtime="20201010 12:25:20.484"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.414" endtime="20201010 12:25:20.484"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.412" endtime="20201010 12:25:20.485"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:20.486" endtime="20201010 12:25:20.489"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.408" endtime="20201010 12:25:20.491"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.403" endtime="20201010 12:25:20.493"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.372" endtime="20201010 12:25:20.493"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:20.519" endtime="20201010 12:25:26.570"></status>
</kw>
<msg timestamp="20201010 12:25:26.572" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '52653'}, {'interval': '31223'}, {'interval': '17873'}, {'interval': '99702'}, {'interval': '86231'...</msg>
<status status="PASS" starttime="20201010 12:25:20.515" endtime="20201010 12:25:26.572"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:26.578" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '52653'}, {'interval': '31223'}, {'interval': '17873'}, {'interval': '99702'}, {'interval': '86231'...</msg>
<status status="PASS" starttime="20201010 12:25:26.574" endtime="20201010 12:25:26.579"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:26.581" endtime="20201010 12:25:26.584"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.508" endtime="20201010 12:25:26.586"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.500" endtime="20201010 12:25:26.588"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:26.594" level="INFO">${RESULT} = {'interval': [52653, 31223, 17873, 99702, 86231, 11070, 36056, 95112, 44690, 11784, 81024, 32519, 12251, 21504, 58361], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201010 12:25:26.589" endtime="20201010 12:25:26.595"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:26.600" level="INFO">${interval} = [52653, 31223, 17873, 99702, 86231, 11070, 36056, 95112, 44690, 11784, 81024, 32519, 12251, 21504, 58361]</msg>
<status status="PASS" starttime="20201010 12:25:26.596" endtime="20201010 12:25:26.601"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:26.610" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:26.607" endtime="20201010 12:25:26.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:26.614" level="INFO">VALUE: [52653, 31223, 17873, 99702, 86231, 11070, 36056, 95112, 44690, 11784, 81024, 32519, 12251, 21504, 58361]</msg>
<status status="PASS" starttime="20201010 12:25:26.612" endtime="20201010 12:25:26.615"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:26.602" endtime="20201010 12:25:26.617"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:26.625" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:26.623" endtime="20201010 12:25:26.626"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:26.628" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:26.627" endtime="20201010 12:25:26.628"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:26.618" endtime="20201010 12:25:26.629"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:26.637" endtime="20201010 12:25:26.947"></status>
</kw>
<msg timestamp="20201010 12:25:26.953" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133303292, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233312986, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:26.635" endtime="20201010 12:25:26.954"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:26.969" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133303292, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233312986, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:26.956" endtime="20201010 12:25:26.969"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:26.971" endtime="20201010 12:25:26.975"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:26.632" endtime="20201010 12:25:26.977"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:26.630" endtime="20201010 12:25:26.978"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:26.988" level="INFO">${FILTERED} = [{'diff': 0.10000969400000015}, {'diff': 0.100010347}, {'diff': 5.419999999922709e-07}, {'diff': 5.419999999922709e-07}, {'diff': 5.419999999922709e-07}, {'diff': 5.419999999922709e-07}, {'diff': 5.41...</msg>
<status status="PASS" starttime="20201010 12:25:26.980" endtime="20201010 12:25:26.989"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:26.998" level="INFO">${RESULT} = {'diff': [0.10000969400000015, 0.100010347, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 0.10000829200000005, 0.10005612500000005,...</msg>
<status status="PASS" starttime="20201010 12:25:26.990" endtime="20201010 12:25:26.999"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:27.009" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:27.007" endtime="20201010 12:25:27.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:27.015" level="INFO">VALUE: [0.10000969400000015, 0.100010347, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 0.10000829200000005, 0.10005612500000005, 0.10000987500000003, 0.10001090299999982, 5.409999999095305e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 0.10001087500000017, 0.10001033300000017, 0.10000927699999984, 5.419999999922709e-07, 0.10001086100000034, 5.410000003536197e-07, 0.10001086199999953, 5.420000004363601e-07, 5.419999995481817e-07, 5.409999994654413e-07, 5.420000004363601e-07, 5.410000003536197e-07, 0.10001094399999921, 0.10001087500000061, 0.10001041700000002, 0.10001090299999937, 0.10001038800000028, 0.10001038900000037, 0.10001041599999994, 0.10001095800000037]</msg>
<status status="PASS" starttime="20201010 12:25:27.012" endtime="20201010 12:25:27.016"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.000" endtime="20201010 12:25:27.018"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:20.495" endtime="20201010 12:25:27.019"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:20.366" endtime="20201010 12:25:27.022" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timer">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:27.040" endtime="20201010 12:25:27.061"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.036" endtime="20201010 12:25:27.063"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:27.097" endtime="20201010 12:25:27.116"></status>
</kw>
<msg timestamp="20201010 12:25:27.117" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:27.093" endtime="20201010 12:25:27.117"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:27.123" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:27.119" endtime="20201010 12:25:27.124"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:27.130" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:27.126" endtime="20201010 12:25:27.130"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:27.086" endtime="20201010 12:25:27.133"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:27.079" endtime="20201010 12:25:27.135"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.077" endtime="20201010 12:25:27.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:27.145" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:27.142" endtime="20201010 12:25:27.146"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.137" endtime="20201010 12:25:27.146"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.075" endtime="20201010 12:25:27.147"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.073" endtime="20201010 12:25:27.147"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:27.149" endtime="20201010 12:25:27.152"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.069" endtime="20201010 12:25:27.154"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.065" endtime="20201010 12:25:27.155"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.033" endtime="20201010 12:25:27.156"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:27.179" endtime="20201010 12:25:33.243"></status>
</kw>
<msg timestamp="20201010 12:25:33.244" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '27660'}, {'interval': '24774'}, {'interval': '50283'}, {'interval': '17455'}, {'interval': '56207'...</msg>
<status status="PASS" starttime="20201010 12:25:27.176" endtime="20201010 12:25:33.245"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.251" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '27660'}, {'interval': '24774'}, {'interval': '50283'}, {'interval': '17455'}, {'interval': '56207'...</msg>
<status status="PASS" starttime="20201010 12:25:33.246" endtime="20201010 12:25:33.251"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:33.252" endtime="20201010 12:25:33.254"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.169" endtime="20201010 12:25:33.255"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.163" endtime="20201010 12:25:33.255"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:33.259" level="INFO">${RESULT} = {'interval': [27660, 24774, 50283, 17455, 56207, 42110, 19271, 94738, 34690, 56733, 40981, 20315, 16642, 96348, 16606, 25972, 89473, 17734, 29823, 58196], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201010 12:25:33.256" endtime="20201010 12:25:33.259"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:33.262" level="INFO">${interval} = [27660, 24774, 50283, 17455, 56207, 42110, 19271, 94738, 34690, 56733, 40981, 20315, 16642, 96348, 16606, 25972, 89473, 17734, 29823, 58196]</msg>
<status status="PASS" starttime="20201010 12:25:33.260" endtime="20201010 12:25:33.262"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.266" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:33.265" endtime="20201010 12:25:33.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.268" level="INFO">VALUE: [27660, 24774, 50283, 17455, 56207, 42110, 19271, 94738, 34690, 56733, 40981, 20315, 16642, 96348, 16606, 25972, 89473, 17734, 29823, 58196]</msg>
<status status="PASS" starttime="20201010 12:25:33.267" endtime="20201010 12:25:33.269"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.263" endtime="20201010 12:25:33.269"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.273" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:33.272" endtime="20201010 12:25:33.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.276" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:33.275" endtime="20201010 12:25:33.276"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.270" endtime="20201010 12:25:33.277"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:33.285" endtime="20201010 12:25:33.593"></status>
</kw>
<msg timestamp="20201010 12:25:33.600" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13362725, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233638958, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201010 12:25:33.283" endtime="20201010 12:25:33.600"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.616" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13362725, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233638958, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201010 12:25:33.602" endtime="20201010 12:25:33.616"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:33.618" endtime="20201010 12:25:33.622"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.280" endtime="20201010 12:25:33.623"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.277" endtime="20201010 12:25:33.625"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:33.635" level="INFO">${FILTERED} = [{'diff': 0.10001170800000003}, {'diff': 0.1000103750000001}, {'diff': 0.10001036099999983}, {'diff': 0.10001037499999987}, {'diff': 0.10001040300000019}, {'diff': 5.419999999922709e-07}, {'diff': 0.1...</msg>
<status status="PASS" starttime="20201010 12:25:33.627" endtime="20201010 12:25:33.635"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:33.643" level="INFO">${RESULT} = {'diff': [0.10001170800000003, 0.1000103750000001, 0.10001036099999983, 0.10001037499999987, 0.10001040300000019, 5.419999999922709e-07, 0.10001090299999982, 0.10001037499999987, 0.10001038799999984, ...</msg>
<status status="PASS" starttime="20201010 12:25:33.637" endtime="20201010 12:25:33.644"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.653" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:33.651" endtime="20201010 12:25:33.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.658" level="INFO">VALUE: [0.10001170800000003, 0.1000103750000001, 0.10001036099999983, 0.10001037499999987, 0.10001040300000019, 5.419999999922709e-07, 0.10001090299999982, 0.10001037499999987, 0.10001038799999984, 5.419999999922709e-07, 5.419999999922709e-07, 5.410000003536197e-07, 5.419999999922709e-07, 0.10001088899999999, 0.1000103750000001, 0.10001036099999983, 0.1000103750000001, 0.1000103750000001, 0.1000103750000001, 0.10001036099999983, 0.10003405500000007, 0.10001090300000026, 0.10001036099999983, 0.1000103750000001, 0.1000103750000001, 0.1000103750000001, 0.10001038900000037, 0.10001088899999999, 5.409999994654413e-07, 5.420000004363601e-07, 5.419999995481817e-07, 0.10001087499999972, 0.1000103750000001, 0.10001034699999956, 5.419999995481817e-07, 0.10001084700000007, 5.419999995481817e-07, 0.10001083400000077, 0.1000103750000001, 0.1000108329999998, 0.10001030499999963, 0.1000103060000006]</msg>
<status status="PASS" starttime="20201010 12:25:33.656" endtime="20201010 12:25:33.659"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.645" endtime="20201010 12:25:33.661"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:27.158" endtime="20201010 12:25:33.662"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:27.027" endtime="20201010 12:25:33.664" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:33.682" endtime="20201010 12:25:33.704"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.679" endtime="20201010 12:25:33.706"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:33.743" endtime="20201010 12:25:33.762"></status>
</kw>
<msg timestamp="20201010 12:25:33.763" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:33.740" endtime="20201010 12:25:33.763"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.770" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:33.765" endtime="20201010 12:25:33.770"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:33.776" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:33.772" endtime="20201010 12:25:33.777"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:33.729" endtime="20201010 12:25:33.779"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:33.722" endtime="20201010 12:25:33.781"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.719" endtime="20201010 12:25:33.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:33.790" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:33.788" endtime="20201010 12:25:33.791"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.784" endtime="20201010 12:25:33.791"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.718" endtime="20201010 12:25:33.791"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.716" endtime="20201010 12:25:33.792"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:33.793" endtime="20201010 12:25:33.797"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.712" endtime="20201010 12:25:33.798"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.707" endtime="20201010 12:25:33.800"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.676" endtime="20201010 12:25:33.800"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:33.824" endtime="20201010 12:25:39.898"></status>
</kw>
<msg timestamp="20201010 12:25:39.900" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '16291'}, {'interval': '74117'}, {'interval': '74576'}, {'interval': '31746'}, {'interval': '33340'...</msg>
<status status="PASS" starttime="20201010 12:25:33.820" endtime="20201010 12:25:39.900"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:39.907" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '16291'}, {'interval': '74117'}, {'interval': '74576'}, {'interval': '31746'}, {'interval': '33340'...</msg>
<status status="PASS" starttime="20201010 12:25:39.902" endtime="20201010 12:25:39.907"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:39.909" endtime="20201010 12:25:39.913"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.813" endtime="20201010 12:25:39.915"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.807" endtime="20201010 12:25:39.916"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:39.919" level="INFO">${RESULT} = {'interval': [16291, 74117, 74576, 31746, 33340, 26891, 80681, 81877, 53051, 21311, 91926, 16715, 44971, 49078, 22114, 67521, 17040, 71822, 90731, 47405, 43294, 43357, 96892, 93113, 91248], 'focus': [...</msg>
<status status="PASS" starttime="20201010 12:25:39.917" endtime="20201010 12:25:39.919"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:39.922" level="INFO">${interval} = [16291, 74117, 74576, 31746, 33340, 26891, 80681, 81877, 53051, 21311, 91926, 16715, 44971, 49078, 22114, 67521, 17040, 71822, 90731, 47405, 43294, 43357, 96892, 93113, 91248]</msg>
<status status="PASS" starttime="20201010 12:25:39.920" endtime="20201010 12:25:39.923"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:39.927" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:39.926" endtime="20201010 12:25:39.927"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:39.929" level="INFO">VALUE: [16291, 74117, 74576, 31746, 33340, 26891, 80681, 81877, 53051, 21311, 91926, 16715, 44971, 49078, 22114, 67521, 17040, 71822, 90731, 47405, 43294, 43357, 96892, 93113, 91248]</msg>
<status status="PASS" starttime="20201010 12:25:39.928" endtime="20201010 12:25:39.929"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:39.923" endtime="20201010 12:25:39.930"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:39.934" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:39.933" endtime="20201010 12:25:39.934"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:39.936" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:39.935" endtime="20201010 12:25:39.937"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:39.931" endtime="20201010 12:25:39.937"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:39.946" endtime="20201010 12:25:40.270"></status>
</kw>
<msg timestamp="20201010 12:25:40.276" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13605175, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.236062458, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201010 12:25:39.945" endtime="20201010 12:25:40.276"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:40.291" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13605175, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.236062458, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201010 12:25:40.278" endtime="20201010 12:25:40.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:40.293" endtime="20201010 12:25:40.297"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:39.940" endtime="20201010 12:25:40.299"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:39.938" endtime="20201010 12:25:40.300"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:40.310" level="INFO">${FILTERED} = [{'diff': 0.10001070799999989}, {'diff': 5.419999999922709e-07}, {'diff': 5.419999999922709e-07}, {'diff': 0.10001247300000005}, {'diff': 5.419999999922709e-07}, {'diff': 5.409999999095305e-07}, {'dif...</msg>
<status status="PASS" starttime="20201010 12:25:40.302" endtime="20201010 12:25:40.310"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:40.318" level="INFO">${RESULT} = {'diff': [0.10001070799999989, 5.419999999922709e-07, 5.419999999922709e-07, 0.10001247300000005, 5.419999999922709e-07, 5.409999999095305e-07, 5.409999999095305e-07, 5.410000003536197e-07, 5.41999999...</msg>
<status status="PASS" starttime="20201010 12:25:40.312" endtime="20201010 12:25:40.319"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:40.328" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:40.326" endtime="20201010 12:25:40.329"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:40.333" level="INFO">VALUE: [0.10001070799999989, 5.419999999922709e-07, 5.419999999922709e-07, 0.10001247300000005, 5.419999999922709e-07, 5.409999999095305e-07, 5.409999999095305e-07, 5.410000003536197e-07, 5.419999999922709e-07, 0.10001088899999999, 5.409999999095305e-07, 0.10001082000000006, 0.100010347, 0.10001041700000002, 0.10001087500000017, 0.100010347, 0.10001036099999983, 0.10000822200000004, 5.409999999095305e-07, 5.410000003536197e-07, 0.10001087500000017, 0.10001087500000017, 0.10001034699999956, 0.10001034699999956, 0.10001034699999956, 0.10001030499999963, 0.10001081899999953, 0.10001027800000006, 0.1000103060000006, 0.1000108329999998, 0.10001086099999945, 5.410000003536197e-07, 5.420000004363601e-07, 5.419999995481817e-07, 5.409999994654413e-07, 5.420000004363601e-07, 0.10001079199999996, 0.1000103060000006, 5.420000004363601e-07]</msg>
<status status="PASS" starttime="20201010 12:25:40.330" endtime="20201010 12:25:40.334"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.320" endtime="20201010 12:25:40.336"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:33.802" endtime="20201010 12:25:40.337"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:33.670" endtime="20201010 12:25:40.339" critical="yes"></status>
</test>
<test id="s1-s2-t7" name="30 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:40.357" endtime="20201010 12:25:40.379"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.353" endtime="20201010 12:25:40.381"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:40.416" endtime="20201010 12:25:40.435"></status>
</kw>
<msg timestamp="20201010 12:25:40.436" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:40.413" endtime="20201010 12:25:40.437"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:40.443" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:40.439" endtime="20201010 12:25:40.443"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:40.449" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:40.445" endtime="20201010 12:25:40.450"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:40.405" endtime="20201010 12:25:40.453"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:40.399" endtime="20201010 12:25:40.455"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.395" endtime="20201010 12:25:40.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:40.464" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:40.463" endtime="20201010 12:25:40.465"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.458" endtime="20201010 12:25:40.466"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.393" endtime="20201010 12:25:40.466"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.391" endtime="20201010 12:25:40.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:40.468" endtime="20201010 12:25:40.472"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.387" endtime="20201010 12:25:40.474"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.382" endtime="20201010 12:25:40.475"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.351" endtime="20201010 12:25:40.476"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>30</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:40.500" endtime="20201010 12:25:46.583"></status>
</kw>
<msg timestamp="20201010 12:25:46.583" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 30 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '74757'}, {'interval': '70347'}, {'interval': '33034'}, {'interval': '80423'}, {'interval': '79926'...</msg>
<status status="PASS" starttime="20201010 12:25:40.497" endtime="20201010 12:25:46.583"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:46.586" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 30 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '74757'}, {'interval': '70347'}, {'interval': '33034'}, {'interval': '80423'}, {'interval': '79926'...</msg>
<status status="PASS" starttime="20201010 12:25:46.584" endtime="20201010 12:25:46.587"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:46.588" endtime="20201010 12:25:46.589"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.489" endtime="20201010 12:25:46.590"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.483" endtime="20201010 12:25:46.591"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:46.594" level="INFO">${RESULT} = {'interval': [74757, 70347, 33034, 80423, 79926, 83558, 93385, 97460, 37843, 11089, 92002, 47989, 74190, 35584, 30828, 91573, 78327, 58989, 84130, 86357, 41677, 56043, 89595, 14320, 22622, 62029, 5814...</msg>
<status status="PASS" starttime="20201010 12:25:46.591" endtime="20201010 12:25:46.595"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:46.598" level="INFO">${interval} = [74757, 70347, 33034, 80423, 79926, 83558, 93385, 97460, 37843, 11089, 92002, 47989, 74190, 35584, 30828, 91573, 78327, 58989, 84130, 86357, 41677, 56043, 89595, 14320, 22622, 62029, 58146, 28867, 669...</msg>
<status status="PASS" starttime="20201010 12:25:46.595" endtime="20201010 12:25:46.599"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:46.603" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:46.602" endtime="20201010 12:25:46.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:46.605" level="INFO">VALUE: [74757, 70347, 33034, 80423, 79926, 83558, 93385, 97460, 37843, 11089, 92002, 47989, 74190, 35584, 30828, 91573, 78327, 58989, 84130, 86357, 41677, 56043, 89595, 14320, 22622, 62029, 58146, 28867, 66958, 17521]</msg>
<status status="PASS" starttime="20201010 12:25:46.604" endtime="20201010 12:25:46.605"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:46.599" endtime="20201010 12:25:46.606"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:46.610" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:46.609" endtime="20201010 12:25:46.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:46.612" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:46.611" endtime="20201010 12:25:46.613"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:46.607" endtime="20201010 12:25:46.613"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:46.621" endtime="20201010 12:25:46.963"></status>
</kw>
<msg timestamp="20201010 12:25:46.968" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13771725, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.237728, 'source': 'DUT_IC', 'event': 'FALLING...</msg>
<status status="PASS" starttime="20201010 12:25:46.620" endtime="20201010 12:25:46.968"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:46.983" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.13771725, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.237728, 'source': 'DUT_IC', 'event': 'FALLING...</msg>
<status status="PASS" starttime="20201010 12:25:46.970" endtime="20201010 12:25:46.983"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:46.985" endtime="20201010 12:25:46.989"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:46.616" endtime="20201010 12:25:46.991"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:46.614" endtime="20201010 12:25:46.992"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:47.002" level="INFO">${FILTERED} = [{'diff': 0.10001075000000004}, {'diff': 0.10001093000000005}, {'diff': 5.419999999922709e-07}, {'diff': 0.10001094499999996}, {'diff': 0.1000108609999999}, {'diff': 5.419999999922709e-07}, {'diff': 5...</msg>
<status status="PASS" starttime="20201010 12:25:46.994" endtime="20201010 12:25:47.002"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:47.010" level="INFO">${RESULT} = {'diff': [0.10001075000000004, 0.10001093000000005, 5.419999999922709e-07, 0.10001094499999996, 0.1000108609999999, 5.419999999922709e-07, 5.409999999095305e-07, 5.419999999922709e-07, 5.4199999999227...</msg>
<status status="PASS" starttime="20201010 12:25:47.004" endtime="20201010 12:25:47.010"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:47.020" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:47.018" endtime="20201010 12:25:47.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:47.025" level="INFO">VALUE: [0.10001075000000004, 0.10001093000000005, 5.419999999922709e-07, 0.10001094499999996, 0.1000108609999999, 5.419999999922709e-07, 5.409999999095305e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.409999999095305e-07, 5.419999999922709e-07, 0.10001087500000017, 0.10001036100000027, 0.10001037499999965, 0.10001038900000037, 0.10001087499999972, 0.10001090299999982, 0.1000103750000001, 0.1000103750000001, 0.10001038799999984, 5.419999999922709e-07, 0.10001088899999999, 0.10001038899999948, 0.10001088899999999, 0.10003352799999998, 5.420000004363601e-07, 0.1000109440000001, 0.10001088899999999, 0.10001038800000028, 5.420000004363601e-07, 0.10001088899999999, 0.1000622360000003, 0.09995852800000016, 0.10001086100000034, 0.1000103750000001, 0.10001042999999932, 0.10001090299999937]</msg>
<status status="PASS" starttime="20201010 12:25:47.022" endtime="20201010 12:25:47.026"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.012" endtime="20201010 12:25:47.028"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:40.478" endtime="20201010 12:25:47.029"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:40.345" endtime="20201010 12:25:47.031" critical="yes"></status>
</test>
<test id="s1-s2-t8" name="35 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:47.051" endtime="20201010 12:25:47.073"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.046" endtime="20201010 12:25:47.075"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:47.108" endtime="20201010 12:25:47.127"></status>
</kw>
<msg timestamp="20201010 12:25:47.128" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:47.105" endtime="20201010 12:25:47.129"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:47.135" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:47.131" endtime="20201010 12:25:47.136"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:47.142" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:47.137" endtime="20201010 12:25:47.143"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:47.097" endtime="20201010 12:25:47.145"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:47.091" endtime="20201010 12:25:47.147"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.088" endtime="20201010 12:25:47.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:47.155" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:47.154" endtime="20201010 12:25:47.156"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.149" endtime="20201010 12:25:47.156"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.086" endtime="20201010 12:25:47.157"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.085" endtime="20201010 12:25:47.157"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:47.159" endtime="20201010 12:25:47.162"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.081" endtime="20201010 12:25:47.164"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.076" endtime="20201010 12:25:47.165"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.043" endtime="20201010 12:25:47.166"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>35</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:47.189" endtime="20201010 12:25:53.287"></status>
</kw>
<msg timestamp="20201010 12:25:53.288" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 35 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '54295'}, {'interval': '37199'}, {'interval': '39990'}, {'interval': '20568'}, {'interval': '10171'...</msg>
<status status="PASS" starttime="20201010 12:25:47.186" endtime="20201010 12:25:53.289"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.295" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 35 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '54295'}, {'interval': '37199'}, {'interval': '39990'}, {'interval': '20568'}, {'interval': '10171'...</msg>
<status status="PASS" starttime="20201010 12:25:53.290" endtime="20201010 12:25:53.296"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:53.298" endtime="20201010 12:25:53.301"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.178" endtime="20201010 12:25:53.303"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.172" endtime="20201010 12:25:53.304"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:53.314" level="INFO">${RESULT} = {'interval': [54295, 37199, 39990, 20568, 10171, 83353, 66702, 62264, 83163, 58826, 12297, 68502, 38802, 52517, 69027, 11193, 41947, 12933, 95471, 18328, 45436, 45379, 25434, 48836, 22297, 74036, 4353...</msg>
<status status="PASS" starttime="20201010 12:25:53.306" endtime="20201010 12:25:53.315"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:25:53.321" level="INFO">${interval} = [54295, 37199, 39990, 20568, 10171, 83353, 66702, 62264, 83163, 58826, 12297, 68502, 38802, 52517, 69027, 11193, 41947, 12933, 95471, 18328, 45436, 45379, 25434, 48836, 22297, 74036, 43539, 68459, 281...</msg>
<status status="PASS" starttime="20201010 12:25:53.316" endtime="20201010 12:25:53.321"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.330" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:25:53.327" endtime="20201010 12:25:53.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.334" level="INFO">VALUE: [54295, 37199, 39990, 20568, 10171, 83353, 66702, 62264, 83163, 58826, 12297, 68502, 38802, 52517, 69027, 11193, 41947, 12933, 95471, 18328, 45436, 45379, 25434, 48836, 22297, 74036, 43539, 68459, 28154, 76170, 13496, 73105, 63810, 92352, 47335]</msg>
<status status="PASS" starttime="20201010 12:25:53.332" endtime="20201010 12:25:53.335"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.322" endtime="20201010 12:25:53.337"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.344" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:25:53.343" endtime="20201010 12:25:53.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.347" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:25:53.345" endtime="20201010 12:25:53.347"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.338" endtime="20201010 12:25:53.348"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:53.356" endtime="20201010 12:25:53.671"></status>
</kw>
<msg timestamp="20201010 12:25:53.676" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133551153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233561903, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:53.354" endtime="20201010 12:25:53.677"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.691" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.133551153, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.233561903, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:25:53.678" endtime="20201010 12:25:53.692"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:53.694" endtime="20201010 12:25:53.698"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.350" endtime="20201010 12:25:53.699"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.348" endtime="20201010 12:25:53.701"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:25:53.711" level="INFO">${FILTERED} = [{'diff': 0.10001075000000004}, {'diff': 5.419999999922709e-07}, {'diff': 5.419999999922709e-07}, {'diff': 0.10002719399999993}, {'diff': 0.09999301400000005}, {'diff': 0.10001136200000005}, {'diff': ...</msg>
<status status="PASS" starttime="20201010 12:25:53.702" endtime="20201010 12:25:53.711"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:25:53.721" level="INFO">${RESULT} = {'diff': [0.10001075000000004, 5.419999999922709e-07, 5.419999999922709e-07, 0.10002719399999993, 0.09999301400000005, 0.10001136200000005, 5.410000001315751e-07, 5.409999999095305e-07, 0.100010875000...</msg>
<status status="PASS" starttime="20201010 12:25:53.713" endtime="20201010 12:25:53.721"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.731" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:25:53.729" endtime="20201010 12:25:53.732"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.736" level="INFO">VALUE: [0.10001075000000004, 5.419999999922709e-07, 5.419999999922709e-07, 0.10002719399999993, 0.09999301400000005, 0.10001136200000005, 5.410000001315751e-07, 5.409999999095305e-07, 0.10001087500000017, 0.10001041700000002, 5.419999999922709e-07, 0.10001087500000017, 0.10000808300000008, 0.10001261099999992, 0.10001723600000023, 0.10000300000000006, 5.419999999922709e-07, 0.09998195799999987, 0.10001036099999983, 5.419999999922709e-07, 5.409999999095305e-07, 5.409999999095305e-07, 5.409999999095305e-07, 5.409999994654413e-07, 5.419999995481817e-07, 5.419999995481817e-07, 0.0999587919999998, 0.10001041599999994, 0.10001088899999999, 0.10001088899999999, 0.10001087499999972, 0.10001044399999959, 5.420000004363601e-07, 5.419999995481817e-07, 0.1000109440000001, 0.10001041599999994, 0.10001040299999975, 0.10001040299999975, 0.10001040299999975, 0.10000826399999951]</msg>
<status status="PASS" starttime="20201010 12:25:53.733" endtime="20201010 12:25:53.737"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.722" endtime="20201010 12:25:53.739"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:47.168" endtime="20201010 12:25:53.740"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:47.037" endtime="20201010 12:25:53.742" critical="yes"></status>
</test>
<test id="s1-s2-t9" name="40 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:25:53.760" endtime="20201010 12:25:53.782"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.756" endtime="20201010 12:25:53.783"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:53.817" endtime="20201010 12:25:53.836"></status>
</kw>
<msg timestamp="20201010 12:25:53.837" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:53.814" endtime="20201010 12:25:53.838"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.844" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:25:53.839" endtime="20201010 12:25:53.844"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:25:53.851" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:25:53.846" endtime="20201010 12:25:53.852"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:53.807" endtime="20201010 12:25:53.854"></status>
</kw>
<status status="FAIL" starttime="20201010 12:25:53.800" endtime="20201010 12:25:53.855"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.797" endtime="20201010 12:25:53.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:25:53.864" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:25:53.862" endtime="20201010 12:25:53.865"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.858" endtime="20201010 12:25:53.865"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.796" endtime="20201010 12:25:53.866"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.794" endtime="20201010 12:25:53.866"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:53.868" endtime="20201010 12:25:53.871"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.790" endtime="20201010 12:25:53.873"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.785" endtime="20201010 12:25:53.874"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.753" endtime="20201010 12:25:53.875"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>40</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:25:53.900" endtime="20201010 12:26:00.008"></status>
</kw>
<msg timestamp="20201010 12:26:00.009" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 40 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '63910'}, {'interval': '51619'}, {'interval': '66290'}, {'interval': '40380'}, {'interval': '35046'...</msg>
<status status="PASS" starttime="20201010 12:25:53.897" endtime="20201010 12:26:00.009"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.012" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 40 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '63910'}, {'interval': '51619'}, {'interval': '66290'}, {'interval': '40380'}, {'interval': '35046'...</msg>
<status status="PASS" starttime="20201010 12:26:00.010" endtime="20201010 12:26:00.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:00.013" endtime="20201010 12:26:00.015"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.889" endtime="20201010 12:26:00.016"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.881" endtime="20201010 12:26:00.016"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:00.020" level="INFO">${RESULT} = {'interval': [63910, 51619, 66290, 40380, 35046, 32609, 70101, 80450, 75245, 30814, 28038, 34161, 30647, 63118, 71523, 71223, 28890, 12380, 50731, 77029, 95431, 57201, 35189, 67612, 60277, 19991, 1736...</msg>
<status status="PASS" starttime="20201010 12:26:00.017" endtime="20201010 12:26:00.020"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:26:00.023" level="INFO">${interval} = [63910, 51619, 66290, 40380, 35046, 32609, 70101, 80450, 75245, 30814, 28038, 34161, 30647, 63118, 71523, 71223, 28890, 12380, 50731, 77029, 95431, 57201, 35189, 67612, 60277, 19991, 17369, 86767, 529...</msg>
<status status="PASS" starttime="20201010 12:26:00.021" endtime="20201010 12:26:00.023"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.028" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:26:00.026" endtime="20201010 12:26:00.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.030" level="INFO">VALUE: [63910, 51619, 66290, 40380, 35046, 32609, 70101, 80450, 75245, 30814, 28038, 34161, 30647, 63118, 71523, 71223, 28890, 12380, 50731, 77029, 95431, 57201, 35189, 67612, 60277, 19991, 17369, 86767, 52921, 53588, 71725, 48572, 16053, 89194, 12744, 71650, 37538, 66374, 81290, 41674]</msg>
<status status="PASS" starttime="20201010 12:26:00.029" endtime="20201010 12:26:00.030"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.024" endtime="20201010 12:26:00.031"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.035" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:26:00.034" endtime="20201010 12:26:00.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.037" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:26:00.036" endtime="20201010 12:26:00.037"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.031" endtime="20201010 12:26:00.038"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:00.047" endtime="20201010 12:26:00.369"></status>
</kw>
<msg timestamp="20201010 12:26:00.375" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.135746097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.235756806, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:00.045" endtime="20201010 12:26:00.375"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.391" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.135746097, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.235756806, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:00.377" endtime="20201010 12:26:00.391"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:00.393" endtime="20201010 12:26:00.397"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.041" endtime="20201010 12:26:00.398"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.039" endtime="20201010 12:26:00.400"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:26:00.410" level="INFO">${FILTERED} = [{'diff': 0.10001070899999998}, {'diff': 0.10000937499999996}, {'diff': 0.1000103750000001}, {'diff': 0.10000859699999998}, {'diff': 0.10001082000000006}, {'diff': 0.10001270799999995}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201010 12:26:00.401" endtime="20201010 12:26:00.410"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:00.418" level="INFO">${RESULT} = {'diff': [0.10001070899999998, 0.10000937499999996, 0.1000103750000001, 0.10000859699999998, 0.10001082000000006, 0.10001270799999995, 0.10000938799999992, 0.10001037499999987, 0.10001041599999994, 0....</msg>
<status status="PASS" starttime="20201010 12:26:00.412" endtime="20201010 12:26:00.419"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.428" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:26:00.426" endtime="20201010 12:26:00.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.433" level="INFO">VALUE: [0.10001070899999998, 0.10000937499999996, 0.1000103750000001, 0.10000859699999998, 0.10001082000000006, 0.10001270799999995, 0.10000938799999992, 0.10001037499999987, 0.10001041599999994, 0.10001090300000026, 0.10001040299999975, 5.419999999922709e-07, 0.10001084799999971, 0.10001037499999965, 0.10002472200000012, 0.099955778, 5.419999999922709e-07, 0.10001087500000017, 0.1000103750000001, 0.10001038799999984, 0.10001088899999999, 0.1000103750000001, 0.10001038900000037, 0.1000103750000001, 0.10006351400000035, 0.09995823599999998, 0.10000944400000034, 0.10001477800000025, 0.10000984699999993, 0.1000081530000001, 0.10007286100000012, 5.409999994654413e-07, 0.10004623599999984, 0.099946278, 0.1000080419999998, 0.1000127079999995, 0.10000937499999996, 0.1000103750000001, 0.1000103750000001, 0.10001041599999994, 5.409999994654413e-07]</msg>
<status status="PASS" starttime="20201010 12:26:00.431" endtime="20201010 12:26:00.434"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.420" endtime="20201010 12:26:00.436"></status>
</kw>
<status status="PASS" starttime="20201010 12:25:53.876" endtime="20201010 12:26:00.437"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:25:53.747" endtime="20201010 12:26:00.440" critical="yes"></status>
</test>
<test id="s1-s2-t10" name="50 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:26:00.457" endtime="20201010 12:26:00.479"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.454" endtime="20201010 12:26:00.481"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:00.516" endtime="20201010 12:26:00.535"></status>
</kw>
<msg timestamp="20201010 12:26:00.536" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:26:00.513" endtime="20201010 12:26:00.536"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.543" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:26:00.538" endtime="20201010 12:26:00.544"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:26:00.550" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:26:00.546" endtime="20201010 12:26:00.551"></status>
</kw>
<status status="FAIL" starttime="20201010 12:26:00.504" endtime="20201010 12:26:00.552"></status>
</kw>
<status status="FAIL" starttime="20201010 12:26:00.497" endtime="20201010 12:26:00.554"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.495" endtime="20201010 12:26:00.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:26:00.563" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:26:00.561" endtime="20201010 12:26:00.563"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.557" endtime="20201010 12:26:00.564"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.493" endtime="20201010 12:26:00.564"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.491" endtime="20201010 12:26:00.565"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:00.566" endtime="20201010 12:26:00.570"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.487" endtime="20201010 12:26:00.571"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.482" endtime="20201010 12:26:00.573"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.451" endtime="20201010 12:26:00.573"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>50</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:00.597" endtime="20201010 12:26:06.710"></status>
</kw>
<msg timestamp="20201010 12:26:06.712" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 50 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '14414'}, {'interval': '55147'}, {'interval': '70168'}, {'interval': '61294'}, {'interval': '86720'...</msg>
<status status="PASS" starttime="20201010 12:26:00.593" endtime="20201010 12:26:06.712"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:06.719" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 50 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '14414'}, {'interval': '55147'}, {'interval': '70168'}, {'interval': '61294'}, {'interval': '86720'...</msg>
<status status="PASS" starttime="20201010 12:26:06.714" endtime="20201010 12:26:06.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:06.721" endtime="20201010 12:26:06.725"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.586" endtime="20201010 12:26:06.726"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.580" endtime="20201010 12:26:06.728"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:06.738" level="INFO">${RESULT} = {'interval': [14414, 55147, 70168, 61294, 86720, 61970, 78463, 74220, 47692, 84256, 16926, 78697, 18378, 47475, 44104, 66002, 66404, 63407, 97171, 39255, 62962, 67103, 89999, 32491, 21539, 66813, 1023...</msg>
<status status="PASS" starttime="20201010 12:26:06.729" endtime="20201010 12:26:06.739"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:26:06.744" level="INFO">${interval} = [14414, 55147, 70168, 61294, 86720, 61970, 78463, 74220, 47692, 84256, 16926, 78697, 18378, 47475, 44104, 66002, 66404, 63407, 97171, 39255, 62962, 67103, 89999, 32491, 21539, 66813, 10238, 70515, 408...</msg>
<status status="PASS" starttime="20201010 12:26:06.740" endtime="20201010 12:26:06.745"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:06.753" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:26:06.751" endtime="20201010 12:26:06.754"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:06.758" level="INFO">VALUE: [14414, 55147, 70168, 61294, 86720, 61970, 78463, 74220, 47692, 84256, 16926, 78697, 18378, 47475, 44104, 66002, 66404, 63407, 97171, 39255, 62962, 67103, 89999, 32491, 21539, 66813, 10238, 70515, 40828, 48500, 94435, 94098, 48103, 90303, 97856, 52511, 42830, 96777, 16054, 65477, 49396, 79225, 55022, 39603, 27161, 60142, 96753, 67584, 13138, 48976]</msg>
<status status="PASS" starttime="20201010 12:26:06.756" endtime="20201010 12:26:06.759"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:06.746" endtime="20201010 12:26:06.760"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:06.769" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:26:06.767" endtime="20201010 12:26:06.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:06.772" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:26:06.771" endtime="20201010 12:26:06.772"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:06.761" endtime="20201010 12:26:06.773"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:06.781" endtime="20201010 12:26:07.083"></status>
</kw>
<msg timestamp="20201010 12:26:07.089" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.224683986, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.324694681, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:06.780" endtime="20201010 12:26:07.090"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:07.105" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.224683986, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.324694681, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:07.092" endtime="20201010 12:26:07.106"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:07.108" endtime="20201010 12:26:07.112"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:06.777" endtime="20201010 12:26:07.114"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:06.774" endtime="20201010 12:26:07.115"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:26:07.126" level="INFO">${FILTERED} = [{'diff': 0.10001069499999993}, {'diff': 0.10001036100000005}, {'diff': 0.10001036100000005}, {'diff': 0.100010347}, {'diff': 0.10001044400000003}, {'diff': 5.409999999095305e-07}, {'diff': 5.41999999...</msg>
<status status="PASS" starttime="20201010 12:26:07.117" endtime="20201010 12:26:07.126"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:07.135" level="INFO">${RESULT} = {'diff': [0.10001069499999993, 0.10001036100000005, 0.10001036100000005, 0.100010347, 0.10001044400000003, 5.409999999095305e-07, 5.419999999922709e-07, 0.10001091700000009, 0.10003048600000009, 5.410...</msg>
<status status="PASS" starttime="20201010 12:26:07.128" endtime="20201010 12:26:07.135"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:07.147" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:26:07.143" endtime="20201010 12:26:07.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:07.152" level="INFO">VALUE: [0.10001069499999993, 0.10001036100000005, 0.10001036100000005, 0.100010347, 0.10001044400000003, 5.409999999095305e-07, 5.419999999922709e-07, 0.10001091700000009, 0.10003048600000009, 5.410000003536197e-07, 5.409999999095305e-07, 0.10001084699999963, 0.10001084700000007, 5.419999999922709e-07, 0.10001082000000006, 0.10001029200000033, 0.10001030499999963, 0.10001029200000033, 0.10001030600000016, 0.10003520799999999, 0.10001080599999979, 0.10001031999999999, 5.419999995481817e-07, 5.409999994654413e-07, 5.419999995481817e-07, 5.419999995481817e-07, 5.419999995481817e-07, 0.10001083300000069, 0.10001030500000052, 5.419999995481817e-07, 5.410000003536197e-07, 5.419999995481817e-07, 5.420000004363601e-07, 0.10001080600000023, 0.10001030499999963, 5.420000004363601e-07, 0.10001238899999976, 0.10001030499999963, 5.410000003536197e-07, 5.419999995481817e-07]</msg>
<status status="PASS" starttime="20201010 12:26:07.149" endtime="20201010 12:26:07.153"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.136" endtime="20201010 12:26:07.155"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:00.575" endtime="20201010 12:26:07.157"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:26:00.445" endtime="20201010 12:26:07.159" critical="yes"></status>
</test>
<test id="s1-s2-t11" name="75 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:26:07.179" endtime="20201010 12:26:07.201"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.175" endtime="20201010 12:26:07.203"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:07.239" endtime="20201010 12:26:07.258"></status>
</kw>
<msg timestamp="20201010 12:26:07.259" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:26:07.235" endtime="20201010 12:26:07.259"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:07.267" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:26:07.261" endtime="20201010 12:26:07.268"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:26:07.274" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:26:07.269" endtime="20201010 12:26:07.275"></status>
</kw>
<status status="FAIL" starttime="20201010 12:26:07.227" endtime="20201010 12:26:07.277"></status>
</kw>
<status status="FAIL" starttime="20201010 12:26:07.220" endtime="20201010 12:26:07.278"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.218" endtime="20201010 12:26:07.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:26:07.287" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:26:07.286" endtime="20201010 12:26:07.288"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.281" endtime="20201010 12:26:07.289"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.216" endtime="20201010 12:26:07.289"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.214" endtime="20201010 12:26:07.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:07.291" endtime="20201010 12:26:07.295"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.210" endtime="20201010 12:26:07.297"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.205" endtime="20201010 12:26:07.298"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.172" endtime="20201010 12:26:07.299"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>75</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:07.329" endtime="20201010 12:26:13.501"></status>
</kw>
<msg timestamp="20201010 12:26:13.503" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 75 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '81075'}, {'interval': '58727'}, {'interval': '40937'}, {'interval': '10090'}, {'interval': '32175'...</msg>
<status status="PASS" starttime="20201010 12:26:07.326" endtime="20201010 12:26:13.503"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.510" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 75 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '81075'}, {'interval': '58727'}, {'interval': '40937'}, {'interval': '10090'}, {'interval': '32175'...</msg>
<status status="PASS" starttime="20201010 12:26:13.505" endtime="20201010 12:26:13.511"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:13.513" endtime="20201010 12:26:13.516"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.312" endtime="20201010 12:26:13.518"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.306" endtime="20201010 12:26:13.519"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:13.530" level="INFO">${RESULT} = {'interval': [81075, 58727, 40937, 10090, 32175, 36540, 29935, 78832, 70964, 72466, 76720, 67250, 29297, 88975, 54631, 44264, 61075, 11767, 17485, 68846, 85476, 84558, 97500, 28118, 68312, 54751, 8016...</msg>
<status status="PASS" starttime="20201010 12:26:13.521" endtime="20201010 12:26:13.530"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:26:13.536" level="INFO">${interval} = [81075, 58727, 40937, 10090, 32175, 36540, 29935, 78832, 70964, 72466, 76720, 67250, 29297, 88975, 54631, 44264, 61075, 11767, 17485, 68846, 85476, 84558, 97500, 28118, 68312, 54751, 80163, 54227, 583...</msg>
<status status="PASS" starttime="20201010 12:26:13.532" endtime="20201010 12:26:13.536"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.540" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:26:13.539" endtime="20201010 12:26:13.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.542" level="INFO">VALUE: [81075, 58727, 40937, 10090, 32175, 36540, 29935, 78832, 70964, 72466, 76720, 67250, 29297, 88975, 54631, 44264, 61075, 11767, 17485, 68846, 85476, 84558, 97500, 28118, 68312, 54751, 80163, 54227, 58312, 43968, 57316, 22291, 26892, 71562, 69729, 10869, 16200, 53697, 30276, 60725, 22110, 59120, 24460, 36665, 10677, 44111, 16864, 64627, 87787, 52486, 10571, 13830, 59376, 68287, 10851, 19328, 95360, 64761, 16060, 56217, 52889, 38375, 35488, 20496, 81475, 86486, 44426, 74127, 62725, 66508, 29656, 17750, 43477, 47133, 75567]</msg>
<status status="PASS" starttime="20201010 12:26:13.541" endtime="20201010 12:26:13.542"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:13.536" endtime="20201010 12:26:13.543"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.548" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:26:13.547" endtime="20201010 12:26:13.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.550" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:26:13.549" endtime="20201010 12:26:13.551"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:13.544" endtime="20201010 12:26:13.552"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:13.559" endtime="20201010 12:26:13.916"></status>
</kw>
<msg timestamp="20201010 12:26:13.921" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.238771903, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.338780569, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:13.558" endtime="20201010 12:26:13.922"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.937" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.238771903, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.338780569, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:13.924" endtime="20201010 12:26:13.938"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:13.939" endtime="20201010 12:26:13.943"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:13.554" endtime="20201010 12:26:13.945"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:13.552" endtime="20201010 12:26:13.946"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:26:13.956" level="INFO">${FILTERED} = [{'diff': 0.10000866600000013}, {'diff': 0.10001240300000003}, {'diff': 0.10001037499999987}, {'diff': 0.10001040299999997}, {'diff': 5.410000001315751e-07}, {'diff': 5.409999999095305e-07}, {'diff': ...</msg>
<status status="PASS" starttime="20201010 12:26:13.948" endtime="20201010 12:26:13.956"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:13.965" level="INFO">${RESULT} = {'diff': [0.10000866600000013, 0.10001240300000003, 0.10001037499999987, 0.10001040299999997, 5.410000001315751e-07, 5.409999999095305e-07, 0.10001093099999991, 5.409999999095305e-07, 0.10001090299999...</msg>
<status status="PASS" starttime="20201010 12:26:13.958" endtime="20201010 12:26:13.965"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.975" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:26:13.972" endtime="20201010 12:26:13.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:13.980" level="INFO">VALUE: [0.10000866600000013, 0.10001240300000003, 0.10001037499999987, 0.10001040299999997, 5.410000001315751e-07, 5.409999999095305e-07, 0.10001093099999991, 5.409999999095305e-07, 0.10001090299999982, 0.1000103750000001, 0.1000103750000001, 0.1000103750000001, 0.10001038899999992, 5.409999999095305e-07, 5.409999999095305e-07, 5.419999999922709e-07, 0.10001088899999999, 0.1000103750000001, 0.10010838899999985, 0.09991237499999972, 0.10001090299999982, 0.10001037499999965, 0.10001036100000027, 0.10000848599999967, 0.10001226299999999, 0.1000103750000001, 0.10009438899999967, 0.10000916700000051, 5.420000004363601e-07, 5.419999995481817e-07, 5.420000004363601e-07, 5.419999995481817e-07, 0.1000108329999998, 5.410000003536197e-07, 5.420000004363601e-07, 0.10000869400000045, 0.1000499450000003, 0.09994640299999968, 0.10001030499999963, 0.10000891699999936, 0.1000365280000004, 0.09998426399999971]</msg>
<status status="PASS" starttime="20201010 12:26:13.977" endtime="20201010 12:26:13.981"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:13.967" endtime="20201010 12:26:13.982"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:07.301" endtime="20201010 12:26:13.984"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:26:07.165" endtime="20201010 12:26:13.987" critical="yes"></status>
</test>
<test id="s1-s2-t12" name="100 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201010 12:26:14.012" endtime="20201010 12:26:14.035"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.008" endtime="20201010 12:26:14.037"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:14.069" endtime="20201010 12:26:14.089"></status>
</kw>
<msg timestamp="20201010 12:26:14.092" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:26:14.066" endtime="20201010 12:26:14.093"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:14.103" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_xtimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201010 12:26:14.097" endtime="20201010 12:26:14.104"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201010 12:26:14.110" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201010 12:26:14.106" endtime="20201010 12:26:14.111"></status>
</kw>
<status status="FAIL" starttime="20201010 12:26:14.059" endtime="20201010 12:26:14.112"></status>
</kw>
<status status="FAIL" starttime="20201010 12:26:14.053" endtime="20201010 12:26:14.114"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.050" endtime="20201010 12:26:14.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201010 12:26:14.122" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201010 12:26:14.121" endtime="20201010 12:26:14.123"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.117" endtime="20201010 12:26:14.124"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.048" endtime="20201010 12:26:14.124"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.047" endtime="20201010 12:26:14.125"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:14.126" endtime="20201010 12:26:14.129"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.042" endtime="20201010 12:26:14.131"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.038" endtime="20201010 12:26:14.132"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.004" endtime="20201010 12:26:14.133"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>100</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timers}</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:14.157" endtime="20201010 12:26:20.372"></status>
</kw>
<msg timestamp="20201010 12:26:20.375" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 100 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '25479'}, {'interval': '99747'}, {'interval': '10545'}, {'interval': '53347'}, {'interval': '97917...</msg>
<status status="PASS" starttime="20201010 12:26:14.153" endtime="20201010 12:26:20.375"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.382" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 100 1\r\n'], 'data': [{'focus': '100000'}, {'interval': '25479'}, {'interval': '99747'}, {'interval': '10545'}, {'interval': '53347'}, {'interval': '97917...</msg>
<status status="PASS" starttime="20201010 12:26:20.377" endtime="20201010 12:26:20.383"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:20.385" endtime="20201010 12:26:20.390"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.146" endtime="20201010 12:26:20.392"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.140" endtime="20201010 12:26:20.393"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:20.406" level="INFO">${RESULT} = {'interval': [25479, 99747, 10545, 53347, 97917, 38054, 70551, 35772, 88227, 19571, 67663, 91542, 18100, 88215, 89329, 96784, 82846, 90281, 24559, 61375, 29972, 73860, 65399, 82946, 34329, 54047, 2127...</msg>
<status status="PASS" starttime="20201010 12:26:20.395" endtime="20201010 12:26:20.407"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${interval}</var>
</assign>
<msg timestamp="20201010 12:26:20.414" level="INFO">${interval} = [25479, 99747, 10545, 53347, 97917, 38054, 70551, 35772, 88227, 19571, 67663, 91542, 18100, 88215, 89329, 96784, 82846, 90281, 24559, 61375, 29972, 73860, 65399, 82946, 34329, 54047, 21276, 78931, 960...</msg>
<status status="PASS" starttime="20201010 12:26:20.409" endtime="20201010 12:26:20.414"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${interval}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.423" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201010 12:26:20.421" endtime="20201010 12:26:20.424"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.428" level="INFO">VALUE: [25479, 99747, 10545, 53347, 97917, 38054, 70551, 35772, 88227, 19571, 67663, 91542, 18100, 88215, 89329, 96784, 82846, 90281, 24559, 61375, 29972, 73860, 65399, 82946, 34329, 54047, 21276, 78931, 96011, 66721, 98428, 10018, 21350, 57891, 44237, 47888, 49872, 48763, 80263, 93240, 65542, 69880, 49052, 60186, 16103, 70949, 81316, 74540, 78692, 31251, 92771, 27327, 95171, 73283, 44316, 50344, 95943, 37655, 81039, 11783, 32679, 42216, 57297, 47170, 32344, 72256, 48132, 42552, 45395, 13114, 21516, 47276, 37671, 70189, 59386, 64123, 49679, 14446, 29154, 60416, 52975, 46707, 30305, 37643, 98500, 39715, 31020, 98902, 61399, 58345, 20890, 33209, 90081, 27893, 71353, 26989, 20846, 78625, 56472, 100987]</msg>
<status status="PASS" starttime="20201010 12:26:20.425" endtime="20201010 12:26:20.428"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:20.416" endtime="20201010 12:26:20.430"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>divisor</arg>
<arg>${divisor}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.439" level="INFO">NAME: divisor</msg>
<status status="PASS" starttime="20201010 12:26:20.437" endtime="20201010 12:26:20.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.444" level="INFO">VALUE: 1</msg>
<status status="PASS" starttime="20201010 12:26:20.442" endtime="20201010 12:26:20.444"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:20.432" endtime="20201010 12:26:20.446"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:20.462" endtime="20201010 12:26:20.760"></status>
</kw>
<msg timestamp="20201010 12:26:20.762" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.327492403, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.427491292, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:20.459" endtime="20201010 12:26:20.763"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.769" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 1.327492403, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 1.427491292, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201010 12:26:20.763" endtime="20201010 12:26:20.770"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201010 12:26:20.771" endtime="20201010 12:26:20.772"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:20.452" endtime="20201010 12:26:20.773"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:20.447" endtime="20201010 12:26:20.774"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201010 12:26:20.778" level="INFO">${FILTERED} = [{'diff': 0.09999888900000009}, {'diff': 0.10000820900000007}, {'diff': 0.10001044500000011}, {'diff': 0.10001238899999998}, {'diff': 5.419999999922709e-07}, {'diff': 5.419999999922709e-07}, {'diff': ...</msg>
<status status="PASS" starttime="20201010 12:26:20.775" endtime="20201010 12:26:20.779"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201010 12:26:20.782" level="INFO">${RESULT} = {'diff': [0.09999888900000009, 0.10000820900000007, 0.10001044500000011, 0.10001238899999998, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 0.100011680999...</msg>
<status status="PASS" starttime="20201010 12:26:20.779" endtime="20201010 12:26:20.782"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.788" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201010 12:26:20.786" endtime="20201010 12:26:20.788"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201010 12:26:20.790" level="INFO">VALUE: [0.09999888900000009, 0.10000820900000007, 0.10001044500000011, 0.10001238899999998, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 5.419999999922709e-07, 0.1000116809999998, 0.100010347, 0.10003254100000003, 0.09998817999999998, 5.410000003536197e-07, 5.410000003536197e-07, 5.410000003536197e-07, 0.09994509699999998, 0.10024926400000034, 0.09978787499999964, 5.419999999922709e-07, 0.10001086100000034, 0.1001974579999998, 5.419999999922709e-07, 5.419999999922709e-07, 0.09994700000000023, 5.410000003536197e-07, 5.409999994654413e-07, 0.10001087499999972, 0.09999972200000062, 0.10001034700000044, 0.10001033300000017, 0.10001034700000044, 0.10001034700000044, 0.10000819399999994, 0.10016184699999986, 0.09989677799999974, 0.10007073600000016, 0.10001672299999953, 0.09994368100000006, 0.10011380600000042, 5.410000003536197e-07, 5.409999994654413e-07]</msg>
<status status="PASS" starttime="20201010 12:26:20.789" endtime="20201010 12:26:20.791"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:20.783" endtime="20201010 12:26:20.791"></status>
</kw>
<status status="PASS" starttime="20201010 12:26:14.136" endtime="20201010 12:26:20.792"></status>
</kw>
<tags>
<tag>APP_tests_xtimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201010 12:26:13.996" endtime="20201010 12:26:20.793" critical="yes"></status>
</test>
<status status="PASS" starttime="20201010 12:24:57.861" endtime="20201010 12:26:20.810"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_xtimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f103rb</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201010 12:24:54.101" endtime="20201010 12:26:20.863"></status>
</suite>
<statistics>
<total>
<stat pass="13" fail="0">Critical Tests</stat>
<stat pass="13" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="13" fail="0">APP_tests_xtimer_benchmarks</stat>
<stat pass="13" fail="0">BOARD_nucleo-f103rb</stat>
<stat pass="13" fail="0">dev</stat>
</tag>
<suite>
<stat pass="13" fail="0" id="s1" name="tests_xtimer_benchmarks">tests_xtimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_xtimer_benchmarks.Timer Version</stat>
<stat pass="12" fail="0" id="s1-s2" name="Sleep Jitter">tests_xtimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
