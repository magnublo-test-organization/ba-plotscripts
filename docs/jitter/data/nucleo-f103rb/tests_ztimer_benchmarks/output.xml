<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201015 13:36:54.909" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:36:56.182" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:36:56.199" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:36:57.063" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:36:56.179" endtime="20201015 13:36:57.065"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.072" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201015 13:36:57.068" endtime="20201015 13:37:00.073"></status>
</kw>
<status status="PASS" starttime="20201015 13:36:56.176" endtime="20201015 13:37:00.075"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:00.080" endtime="20201015 13:37:00.408"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.077" endtime="20201015 13:37:00.410"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.440" endtime="20201015 13:37:00.461"></status>
</kw>
<msg timestamp="20201015 13:37:00.462" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:00.437" endtime="20201015 13:37:00.463"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.468" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['s is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:00.464" endtime="20201015 13:37:00.469"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.475" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:00.471" endtime="20201015 13:37:00.476"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:00.430" endtime="20201015 13:37:00.478"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:00.425" endtime="20201015 13:37:00.480"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.422" endtime="20201015 13:37:00.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:00.488" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:00.487" endtime="20201015 13:37:00.489"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.482" endtime="20201015 13:37:00.490"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.420" endtime="20201015 13:37:00.490"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.419" endtime="20201015 13:37:00.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.492" endtime="20201015 13:37:00.495"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.415" endtime="20201015 13:37:00.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.498" endtime="20201015 13:37:00.502"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.412" endtime="20201015 13:37:00.504"></status>
</kw>
<status status="PASS" starttime="20201015 13:36:56.172" endtime="20201015 13:37:00.504"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:00.520" endtime="20201015 13:37:00.542"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.517" endtime="20201015 13:37:00.543"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.577" endtime="20201015 13:37:00.595"></status>
</kw>
<msg timestamp="20201015 13:37:00.597" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:00.574" endtime="20201015 13:37:00.597"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.603" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:00.599" endtime="20201015 13:37:00.604"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.610" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:00.605" endtime="20201015 13:37:00.610"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:00.567" endtime="20201015 13:37:00.612"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:00.560" endtime="20201015 13:37:00.614"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.557" endtime="20201015 13:37:00.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:00.622" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:00.621" endtime="20201015 13:37:00.623"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.616" endtime="20201015 13:37:00.623"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.555" endtime="20201015 13:37:00.624"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.553" endtime="20201015 13:37:00.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.626" endtime="20201015 13:37:00.629"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.549" endtime="20201015 13:37:00.631"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.545" endtime="20201015 13:37:00.632"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.514" endtime="20201015 13:37:00.633"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.650" endtime="20201015 13:37:00.663"></status>
</kw>
<msg timestamp="20201015 13:37:00.665" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:00.646" endtime="20201015 13:37:00.665"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.671" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:00.667" endtime="20201015 13:37:00.671"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:00.673" endtime="20201015 13:37:00.678"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.639" endtime="20201015 13:37:00.680"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.634" endtime="20201015 13:37:00.681"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.691" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:37:00.689" endtime="20201015 13:37:00.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.695" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:37:00.693" endtime="20201015 13:37:00.696"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.683" endtime="20201015 13:37:00.698"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:00.506" endtime="20201015 13:37:00.699" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:36:55.182" endtime="20201015 13:37:00.705"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:00.831" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:00.848" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:05.106" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:00.828" endtime="20201015 13:37:05.108"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:08.114" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20201015 13:37:05.110" endtime="20201015 13:37:08.115"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.825" endtime="20201015 13:37:08.117"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:08.121" endtime="20201015 13:37:08.447"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.118" endtime="20201015 13:37:08.449"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:08.478" endtime="20201015 13:37:08.501"></status>
</kw>
<msg timestamp="20201015 13:37:08.502" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['in(): This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Suc...</msg>
<status status="PASS" starttime="20201015 13:37:08.475" endtime="20201015 13:37:08.502"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:08.508" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['in(): This is RIOT! (Version: 2020.07)\n', 'Welcome to RIOT!\n', '&gt; get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Suc...</msg>
<status status="PASS" starttime="20201015 13:37:08.504" endtime="20201015 13:37:08.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:08.516" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:08.511" endtime="20201015 13:37:08.516"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:08.468" endtime="20201015 13:37:08.518"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:08.463" endtime="20201015 13:37:08.520"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.460" endtime="20201015 13:37:08.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:08.529" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:08.528" endtime="20201015 13:37:08.530"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.523" endtime="20201015 13:37:08.532"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.459" endtime="20201015 13:37:08.532"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.457" endtime="20201015 13:37:08.533"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:08.534" endtime="20201015 13:37:08.538"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.454" endtime="20201015 13:37:08.539"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:08.541" endtime="20201015 13:37:08.545"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.450" endtime="20201015 13:37:08.546"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:00.822" endtime="20201015 13:37:08.547"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:08.560" endtime="20201015 13:37:08.582"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.557" endtime="20201015 13:37:08.584"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:08.617" endtime="20201015 13:37:08.636"></status>
</kw>
<msg timestamp="20201015 13:37:08.637" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:08.613" endtime="20201015 13:37:08.637"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:08.643" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:08.639" endtime="20201015 13:37:08.644"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:08.650" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:08.646" endtime="20201015 13:37:08.650"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:08.606" endtime="20201015 13:37:08.652"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:08.600" endtime="20201015 13:37:08.654"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.597" endtime="20201015 13:37:08.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:08.662" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:08.661" endtime="20201015 13:37:08.663"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.656" endtime="20201015 13:37:08.663"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.595" endtime="20201015 13:37:08.664"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.594" endtime="20201015 13:37:08.664"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:08.666" endtime="20201015 13:37:08.669"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.590" endtime="20201015 13:37:08.671"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.585" endtime="20201015 13:37:08.672"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.554" endtime="20201015 13:37:08.673"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:08.755" endtime="20201015 13:37:14.285"></status>
</kw>
<msg timestamp="20201015 13:37:14.287" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:08.691" endtime="20201015 13:37:14.288"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.296" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.290" endtime="20201015 13:37:14.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.300" endtime="20201015 13:37:14.307"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.683" endtime="20201015 13:37:14.310"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.678" endtime="20201015 13:37:14.314"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:14.322" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:14.316" endtime="20201015 13:37:14.322"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:14.388" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:37:14.324" endtime="20201015 13:37:14.388"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.397" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:14.395" endtime="20201015 13:37:14.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.402" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:37:14.399" endtime="20201015 13:37:14.402"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.390" endtime="20201015 13:37:14.404"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.421" endtime="20201015 13:37:14.778"></status>
</kw>
<msg timestamp="20201015 13:37:14.785" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.786582361, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0, 'source_diff': 0}, {'time': 0.786591028, 'source': 'DUT_IC', 'event': 'RI...</msg>
<status status="PASS" starttime="20201015 13:37:14.417" endtime="20201015 13:37:14.786"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.804" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.786582361, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0, 'source_diff': 0}, {'time': 0.786591028, 'source': 'DUT_IC', 'event': 'RI...</msg>
<status status="PASS" starttime="20201015 13:37:14.788" endtime="20201015 13:37:14.805"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.806" endtime="20201015 13:37:14.810"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.410" endtime="20201015 13:37:14.812"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.405" endtime="20201015 13:37:14.813"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:14.823" level="INFO">${FILTERED} = [{'diff': 0}, {'diff': 0.10000224999999996}, {'diff': 0.10000512500000003}, {'diff': 0.10000500000000012}, {'diff': 0.10000597200000017}, {'diff': 0.10000773600000001}, {'diff': 0.10000004099999993}, ...</msg>
<status status="PASS" starttime="20201015 13:37:14.815" endtime="20201015 13:37:14.824"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:14.833" level="INFO">${RESULT} = {'diff': [0, 0.10000224999999996, 0.10000512500000003, 0.10000500000000012, 0.10000597200000017, 0.10000773600000001, 0.10000004099999993, 0.10000354099999997, 0.10000718100000006, 0.10000148600000003...</msg>
<status status="PASS" starttime="20201015 13:37:14.825" endtime="20201015 13:37:14.834"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.843" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:14.841" endtime="20201015 13:37:14.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.848" level="INFO">VALUE: [0, 0.10000224999999996, 0.10000512500000003, 0.10000500000000012, 0.10000597200000017, 0.10000773600000001, 0.10000004099999993, 0.10000354099999997, 0.10000718100000006, 0.10000148600000003, 0.10000356999999993, 0.10000194400000018, 0.10000118000000002, 0.100007666, 0.10000429099999986, 0.10000093000000021, 0.10000269500000014, 0.10000682000000038, 0.10000744500000014, 0.10000006900000002, 0.10000568000000021, 0.10000344399999994, 0.10000720800000007, 0.10000295800000014, 0.10000457000000029, 0.10000747200000015, 0.10000720900000015, 0.10000494399999971, 0.10000558300000018, 0.10000043000000014, 0.1000025, 0.10000632000000031, 0.10000133399999989, 0.10000808399999972, 0.10000140299999938, 0.10000232000000064, 0.10000094399999959, 0.10000597199999994, 0.10000244400000025, 0.10000595799999967, 0.10000231999999976, 0.10000518100000022, 0.10000607000000006, 0.1000032080000004, 0.10000081899999991, 0.10000256899999993, 0.1000035549999998, 0.10000430600000065, 0.10000494499999935, 0.10000543100000048]</msg>
<status status="PASS" starttime="20201015 13:37:14.845" endtime="20201015 13:37:14.849"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.835" endtime="20201015 13:37:14.851"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.674" endtime="20201015 13:37:14.852"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:08.548" endtime="20201015 13:37:14.854" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:14.870" endtime="20201015 13:37:14.892"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.867" endtime="20201015 13:37:14.893"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.926" endtime="20201015 13:37:14.944"></status>
</kw>
<msg timestamp="20201015 13:37:14.945" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.923" endtime="20201015 13:37:14.946"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.952" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.947" endtime="20201015 13:37:14.952"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.958" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:14.954" endtime="20201015 13:37:14.959"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:14.916" endtime="20201015 13:37:14.961"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:14.909" endtime="20201015 13:37:14.962"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.907" endtime="20201015 13:37:14.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:14.971" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:14.970" endtime="20201015 13:37:14.972"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.965" endtime="20201015 13:37:14.973"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.905" endtime="20201015 13:37:14.973"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.903" endtime="20201015 13:37:14.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.975" endtime="20201015 13:37:14.978"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.899" endtime="20201015 13:37:14.980"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.895" endtime="20201015 13:37:14.981"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.864" endtime="20201015 13:37:14.982"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:15.005" endtime="20201015 13:37:20.533"></status>
</kw>
<msg timestamp="20201015 13:37:20.534" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:15.002" endtime="20201015 13:37:20.535"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.541" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:20.537" endtime="20201015 13:37:20.541"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.543" endtime="20201015 13:37:20.547"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.992" endtime="20201015 13:37:20.548"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.987" endtime="20201015 13:37:20.550"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:20.556" level="INFO">${RESULT} = {'interval': [10000, 12250, 14500, 16750, 19000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:20.552" endtime="20201015 13:37:20.557"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:20.562" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:20.558" endtime="20201015 13:37:20.563"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.571" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:20.569" endtime="20201015 13:37:20.572"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.576" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:20.573" endtime="20201015 13:37:20.576"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.564" endtime="20201015 13:37:20.578"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.594" endtime="20201015 13:37:20.952"></status>
</kw>
<msg timestamp="20201015 13:37:20.962" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.626527111, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.726527708, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:20.591" endtime="20201015 13:37:20.962"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.983" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.626527111, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.726527708, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:20.964" endtime="20201015 13:37:20.984"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.985" endtime="20201015 13:37:20.990"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.584" endtime="20201015 13:37:20.991"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.579" endtime="20201015 13:37:20.993"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:21.004" level="INFO">${FILTERED} = [{'diff': 0.10000059699999997}, {'diff': 0.10000252700000001}, {'diff': 0.100001444}, {'diff': 0.10000811100000007}, {'diff': 0.100003069}, {'diff': 0.10000663900000006}, {'diff': 0.10000715299999996}...</msg>
<status status="PASS" starttime="20201015 13:37:20.995" endtime="20201015 13:37:21.004"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:21.014" level="INFO">${RESULT} = {'diff': [0.10000059699999997, 0.10000252700000001, 0.100001444, 0.10000811100000007, 0.100003069, 0.10000663900000006, 0.10000715299999996, 0.10000591699999983, 0.10000666700000016, 0.100006680999999...</msg>
<status status="PASS" starttime="20201015 13:37:21.006" endtime="20201015 13:37:21.015"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:21.025" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:21.022" endtime="20201015 13:37:21.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:21.030" level="INFO">VALUE: [0.10000059699999997, 0.10000252700000001, 0.100001444, 0.10000811100000007, 0.100003069, 0.10000663900000006, 0.10000715299999996, 0.10000591699999983, 0.10000666700000016, 0.10000668099999999, 0.09999966599999999, 0.10000791699999989, 0.10000380599999992, 0.10000143000000006, 0.10000227799999983, 0.10000199999999992, 0.1000067910000002, 0.10000154199999978, 0.10000659700000014, 0.10000554199999989, 0.10000579100000007, 0.10000009700000012, 0.10001607000000012, 0.09999313899999995, 0.10000804200000024, 0.10000044500000005, 0.10000344399999994, 0.10000711100000004, 0.10000861100000025, 0.09999961100000032, 0.10000886100000006, 0.10000601399999987, 0.10000072299999996, 0.1000059999999996, 0.10000734700000002, 0.10000108400000052, 0.10000837499999982, 0.10000284700000073, 0.09999961099999943, 0.1000029859999998, 0.10000118000000047, 0.10000523600000033, 0.10000870799999984, 0.10000401399999959, 0.10000133399999989, 0.10000347300000012, 0.10000759700000028, 0.10000097200000013, 0.10000650000000011, 0.10000209699999996]</msg>
<status status="PASS" starttime="20201015 13:37:21.027" endtime="20201015 13:37:21.031"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.016" endtime="20201015 13:37:21.032"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.983" endtime="20201015 13:37:21.034"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:14.858" endtime="20201015 13:37:21.035" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:21.052" endtime="20201015 13:37:21.073"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.048" endtime="20201015 13:37:21.075"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:21.109" endtime="20201015 13:37:21.127"></status>
</kw>
<msg timestamp="20201015 13:37:21.129" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:21.105" endtime="20201015 13:37:21.129"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:21.135" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:21.131" endtime="20201015 13:37:21.136"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:21.142" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:21.137" endtime="20201015 13:37:21.142"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:21.098" endtime="20201015 13:37:21.144"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:21.092" endtime="20201015 13:37:21.146"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.089" endtime="20201015 13:37:21.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:21.155" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:21.154" endtime="20201015 13:37:21.156"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.148" endtime="20201015 13:37:21.157"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.087" endtime="20201015 13:37:21.157"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.085" endtime="20201015 13:37:21.158"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:21.159" endtime="20201015 13:37:21.163"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.081" endtime="20201015 13:37:21.165"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.077" endtime="20201015 13:37:21.166"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.046" endtime="20201015 13:37:21.167"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:21.191" endtime="20201015 13:37:26.730"></status>
</kw>
<msg timestamp="20201015 13:37:26.732" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:21.187" endtime="20201015 13:37:26.732"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.738" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:26.734" endtime="20201015 13:37:26.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.740" endtime="20201015 13:37:26.744"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.179" endtime="20201015 13:37:26.746"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.172" endtime="20201015 13:37:26.747"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:26.753" level="INFO">${RESULT} = {'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:26.749" endtime="20201015 13:37:26.754"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:26.760" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:26.756" endtime="20201015 13:37:26.760"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.769" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:26.767" endtime="20201015 13:37:26.770"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.774" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:26.772" endtime="20201015 13:37:26.775"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.762" endtime="20201015 13:37:26.777"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.793" endtime="20201015 13:37:27.153"></status>
</kw>
<msg timestamp="20201015 13:37:27.160" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.630864583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.730872083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:26.790" endtime="20201015 13:37:27.161"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:27.178" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.630864583, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.730872083, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:27.162" endtime="20201015 13:37:27.179"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:27.180" endtime="20201015 13:37:27.184"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.783" endtime="20201015 13:37:27.186"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.778" endtime="20201015 13:37:27.187"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:27.197" level="INFO">${FILTERED} = [{'diff': 0.10000749999999992}, {'diff': 0.10000494400000004}, {'diff': 0.10000400000000009}, {'diff': 0.10000348600000009}, {'diff': 0.10000462500000018}, {'diff': 0.10000212500000005}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:27.189" endtime="20201015 13:37:27.198"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:27.208" level="INFO">${RESULT} = {'diff': [0.10000749999999992, 0.10000494400000004, 0.10000400000000009, 0.10000348600000009, 0.10000462500000018, 0.10000212500000005, 0.10000511200000006, 0.100003222, 0.10000732000000001, 0.1000005...</msg>
<status status="PASS" starttime="20201015 13:37:27.199" endtime="20201015 13:37:27.209"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:27.219" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:27.216" endtime="20201015 13:37:27.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:27.224" level="INFO">VALUE: [0.10000749999999992, 0.10000494400000004, 0.10000400000000009, 0.10000348600000009, 0.10000462500000018, 0.10000212500000005, 0.10000511200000006, 0.100003222, 0.10000732000000001, 0.10000059699999997, 0.10000781999999986, 0.10000595899999998, 0.09999944500000013, 0.1000056949999999, 0.10000552800000007, 0.10000222300000017, 0.10000769499999995, 0.10000394499999965, 0.10000545800000005, 0.10000483399999993, 0.10000156899999979, 0.10000219399999999, 0.10000433300000022, 0.1000035829999999, 0.10000069400000022, 0.10000293000000005, 0.10000208300000013, 0.10000106900000016, 0.10000647200000001, 0.10000356900000007, 0.10000561099999983, 0.10000120800000012, 0.10000481900000002, 0.10000695800000026, 0.10000720800000007, 0.10000708300000039, 0.10000269399999961, 0.10000158300000006, 0.10000131900000042, 0.10000583299999999, 0.1000037220000003, 0.10000343000000012, 0.10000370800000002, 0.10000237500000075, 0.10000445799999991, 0.10000570799999942, 0.10000608300000025, 0.10000869499999965, 0.09999970899999955, 0.10000695799999981]</msg>
<status status="PASS" starttime="20201015 13:37:27.221" endtime="20201015 13:37:27.224"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.210" endtime="20201015 13:37:27.226"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:21.168" endtime="20201015 13:37:27.228"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:21.040" endtime="20201015 13:37:27.229" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:27.245" endtime="20201015 13:37:27.267"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.242" endtime="20201015 13:37:27.269"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:27.302" endtime="20201015 13:37:27.320"></status>
</kw>
<msg timestamp="20201015 13:37:27.321" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:27.298" endtime="20201015 13:37:27.321"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:27.327" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:27.323" endtime="20201015 13:37:27.328"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:27.334" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:27.330" endtime="20201015 13:37:27.334"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:27.291" endtime="20201015 13:37:27.336"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:27.285" endtime="20201015 13:37:27.338"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.282" endtime="20201015 13:37:27.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:27.347" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:27.345" endtime="20201015 13:37:27.347"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.341" endtime="20201015 13:37:27.348"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.280" endtime="20201015 13:37:27.350"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.279" endtime="20201015 13:37:27.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:27.352" endtime="20201015 13:37:27.355"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.275" endtime="20201015 13:37:27.357"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.270" endtime="20201015 13:37:27.358"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.239" endtime="20201015 13:37:27.359"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:27.381" endtime="20201015 13:37:32.930"></status>
</kw>
<msg timestamp="20201015 13:37:32.932" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:37:27.377" endtime="20201015 13:37:32.932"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.938" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:37:32.934" endtime="20201015 13:37:32.939"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.940" endtime="20201015 13:37:32.944"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.369" endtime="20201015 13:37:32.946"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.364" endtime="20201015 13:37:32.947"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:32.954" level="INFO">${RESULT} = {'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:32.949" endtime="20201015 13:37:32.954"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:32.960" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:37:32.956" endtime="20201015 13:37:32.960"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.969" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:32.967" endtime="20201015 13:37:32.970"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.973" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:37:32.971" endtime="20201015 13:37:32.974"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.962" endtime="20201015 13:37:32.976"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.992" endtime="20201015 13:37:33.337"></status>
</kw>
<msg timestamp="20201015 13:37:33.344" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.627833625, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.727825833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:32.989" endtime="20201015 13:37:33.344"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.362" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.627833625, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.727825833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:33.346" endtime="20201015 13:37:33.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.364" endtime="20201015 13:37:33.368"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.982" endtime="20201015 13:37:33.370"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.977" endtime="20201015 13:37:33.371"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:33.381" level="INFO">${FILTERED} = [{'diff': 0.09999220800000008}, {'diff': 0.10000434700000005}, {'diff': 0.10000558299999995}, {'diff': 0.09999967999999992}, {'diff': 0.10000513899999985}, {'diff': 0.10001383400000008}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:37:33.373" endtime="20201015 13:37:33.382"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:33.391" level="INFO">${RESULT} = {'diff': [0.09999220800000008, 0.10000434700000005, 0.10000558299999995, 0.09999967999999992, 0.10000513899999985, 0.10001383400000008, 0.09998819499999989, 0.1000034729999999, 0.09999958399999986, 0....</msg>
<status status="PASS" starttime="20201015 13:37:33.383" endtime="20201015 13:37:33.392"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.401" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:33.399" endtime="20201015 13:37:33.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.407" level="INFO">VALUE: [0.09999220800000008, 0.10000434700000005, 0.10000558299999995, 0.09999967999999992, 0.10000513899999985, 0.10001383400000008, 0.09998819499999989, 0.1000034729999999, 0.09999958399999986, 0.10000661099999997, 0.10000323600000005, 0.10000750000000003, 0.09999941700000003, 0.10000257000000001, 0.10002627800000008, 0.09998491600000037, 0.10000609800000015, 0.1000022920000001, 0.10000054200000008, 0.10000329100000016, 0.10000793099999994, 0.09998136100000021, 0.10000304199999999, 0.10000118000000002, 0.10000230599999993, 0.10000466699999988, 0.10000752800000035, 0.10000806900000025, 0.10000506900000028, 0.10000568099999985, 0.10000691699999997, 0.10000076400000024, 0.10000216599999989, 0.10000818099999975, 0.10000790299999984, 0.10000683300000013, 0.1000007080000005, 0.10000116700000028, 0.10000444399999964, 0.10000731900000037, 0.10000379199999987, 0.1000026389999995, 0.10000294499999995, 0.10000608300000025, 0.10000580599999953, 0.10000180599999986, 0.10000616600000001, 0.10000205499999915, 0.10000486100000039, 0.1000079309999995]</msg>
<status status="PASS" starttime="20201015 13:37:33.404" endtime="20201015 13:37:33.408"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.393" endtime="20201015 13:37:33.410"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:27.360" endtime="20201015 13:37:33.411"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:27.233" endtime="20201015 13:37:33.413" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:33.429" endtime="20201015 13:37:33.451"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.426" endtime="20201015 13:37:33.453"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.487" endtime="20201015 13:37:33.505"></status>
</kw>
<msg timestamp="20201015 13:37:33.506" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:33.482" endtime="20201015 13:37:33.506"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.512" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:33.508" endtime="20201015 13:37:33.513"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.519" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:33.514" endtime="20201015 13:37:33.519"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:33.475" endtime="20201015 13:37:33.521"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:33.469" endtime="20201015 13:37:33.523"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.466" endtime="20201015 13:37:33.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:33.531" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:33.530" endtime="20201015 13:37:33.532"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.525" endtime="20201015 13:37:33.532"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.464" endtime="20201015 13:37:33.533"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.462" endtime="20201015 13:37:33.533"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.535" endtime="20201015 13:37:33.538"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.459" endtime="20201015 13:37:33.540"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.454" endtime="20201015 13:37:33.541"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.423" endtime="20201015 13:37:33.542"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:33.563" endtime="20201015 13:37:39.124"></status>
</kw>
<msg timestamp="20201015 13:37:39.126" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:37:33.559" endtime="20201015 13:37:39.126"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.132" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:37:39.128" endtime="20201015 13:37:39.133"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.135" endtime="20201015 13:37:39.139"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.552" endtime="20201015 13:37:39.140"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.547" endtime="20201015 13:37:39.142"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:39.149" level="INFO">${RESULT} = {'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:39.144" endtime="20201015 13:37:39.150"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:39.155" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:37:39.151" endtime="20201015 13:37:39.156"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.164" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:39.162" endtime="20201015 13:37:39.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.169" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:37:39.167" endtime="20201015 13:37:39.170"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.157" endtime="20201015 13:37:39.171"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.188" endtime="20201015 13:37:39.559"></status>
</kw>
<msg timestamp="20201015 13:37:39.566" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.626261806, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.726263056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:39.184" endtime="20201015 13:37:39.567"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.586" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.626261806, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.726263056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:39.569" endtime="20201015 13:37:39.587"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.589" endtime="20201015 13:37:39.593"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.177" endtime="20201015 13:37:39.594"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.173" endtime="20201015 13:37:39.596"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:39.607" level="INFO">${FILTERED} = [{'diff': 0.10000124999999993}, {'diff': 0.10000637499999998}, {'diff': 0.10000597200000005}, {'diff': 0.10000206999999994}, {'diff': 0.10000687500000005}, {'diff': 0.09999912500000008}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:39.598" endtime="20201015 13:37:39.607"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:39.616" level="INFO">${RESULT} = {'diff': [0.10000124999999993, 0.10000637499999998, 0.10000597200000005, 0.10000206999999994, 0.10000687500000005, 0.09999912500000008, 0.10000341699999993, 0.10000801300000006, 0.10000717999999997, 0...</msg>
<status status="PASS" starttime="20201015 13:37:39.609" endtime="20201015 13:37:39.617"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.627" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:39.625" endtime="20201015 13:37:39.628"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.633" level="INFO">VALUE: [0.10000124999999993, 0.10000637499999998, 0.10000597200000005, 0.10000206999999994, 0.10000687500000005, 0.09999912500000008, 0.10000341699999993, 0.10000801300000006, 0.10000717999999997, 0.10000205500000003, 0.10000756899999996, 0.10000220800000004, 0.10000394400000001, 0.10000130600000023, 0.10000644399999992, 0.10000455499999994, 0.10000693000000016, 0.1000025550000001, 0.10000405499999987, 0.10000168099999973, 0.10000793099999994, 0.10000282000000027, 0.1000055689999999, 0.10000656900000005, 0.1000061940000001, 0.10000666599999963, 0.10000206999999994, 0.10000444500000016, 0.1000047089999998, 0.10000202800000002, 0.10000651399999994, 0.10000156900000023, 0.10000419399999982, 0.10000631900000023, 0.10000445799999991, 0.10000056999999973, 0.10000055600000035, 0.10000694399999954, 0.10000242999999998, 0.10000768000000004, 0.10000806900000025, 0.10000679200000029, 0.10000494500000023, 0.10000056999999973, 0.10000669500000026, 0.10000043100000067, 0.10000316600000048, 0.10000766599999977, 0.10000420800000054, 0.10000373599999968]</msg>
<status status="PASS" starttime="20201015 13:37:39.630" endtime="20201015 13:37:39.634"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.618" endtime="20201015 13:37:39.635"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.543" endtime="20201015 13:37:39.637"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:33.417" endtime="20201015 13:37:39.639" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:39.658" endtime="20201015 13:37:39.680"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.653" endtime="20201015 13:37:39.682"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.722" endtime="20201015 13:37:39.742"></status>
</kw>
<msg timestamp="20201015 13:37:39.743" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.719" endtime="20201015 13:37:39.744"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.750" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f103rb', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.745" endtime="20201015 13:37:39.751"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.757" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:39.753" endtime="20201015 13:37:39.758"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.711" endtime="20201015 13:37:39.760"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:39.704" endtime="20201015 13:37:39.762"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.696" endtime="20201015 13:37:39.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:39.771" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:39.769" endtime="20201015 13:37:39.772"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.764" endtime="20201015 13:37:39.772"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.694" endtime="20201015 13:37:39.772"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.692" endtime="20201015 13:37:39.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.774" endtime="20201015 13:37:39.778"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.688" endtime="20201015 13:37:39.780"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.683" endtime="20201015 13:37:39.782"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.649" endtime="20201015 13:37:39.782"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.805" endtime="20201015 13:37:45.383"></status>
</kw>
<msg timestamp="20201015 13:37:45.384" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:37:39.801" endtime="20201015 13:37:45.385"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.391" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:37:45.387" endtime="20201015 13:37:45.392"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.394" endtime="20201015 13:37:45.398"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.793" endtime="20201015 13:37:45.400"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.788" endtime="20201015 13:37:45.401"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:45.409" level="INFO">${RESULT} = {'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000], 'focus': ...</msg>
<status status="PASS" starttime="20201015 13:37:45.403" endtime="20201015 13:37:45.410"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:45.417" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:45.411" endtime="20201015 13:37:45.417"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.426" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:45.424" endtime="20201015 13:37:45.427"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.431" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:45.429" endtime="20201015 13:37:45.432"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.418" endtime="20201015 13:37:45.434"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.458" endtime="20201015 13:37:45.836"></status>
</kw>
<msg timestamp="20201015 13:37:45.843" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.640806444, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.740811972, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:45.452" endtime="20201015 13:37:45.844"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.862" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.640806444, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.740811972, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:45.846" endtime="20201015 13:37:45.863"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.865" endtime="20201015 13:37:45.869"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.440" endtime="20201015 13:37:45.871"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.435" endtime="20201015 13:37:45.873"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:45.883" level="INFO">${FILTERED} = [{'diff': 0.10000552800000007}, {'diff': 0.10003754200000003}, {'diff': 0.09995390199999998}, {'diff': 0.10000272200000004}, {'diff': 0.10000743000000001}, {'diff': 0.10000347200000004}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:45.874" endtime="20201015 13:37:45.884"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:45.893" level="INFO">${RESULT} = {'diff': [0.10000552800000007, 0.10003754200000003, 0.09995390199999998, 0.10000272200000004, 0.10000743000000001, 0.10000347200000004, 0.10000706899999989, 0.10000995900000009, 0.10000619399999988, 0...</msg>
<status status="PASS" starttime="20201015 13:37:45.886" endtime="20201015 13:37:45.894"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.905" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:45.902" endtime="20201015 13:37:45.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.911" level="INFO">VALUE: [0.10000552800000007, 0.10003754200000003, 0.09995390199999998, 0.10000272200000004, 0.10000743000000001, 0.10000347200000004, 0.10000706899999989, 0.10000995900000009, 0.10000619399999988, 0.10000441699999985, 0.10000218100000002, 0.10000976399999995, 0.10000361199999985, 0.10000277800000013, 0.10000383400000024, 0.10000166599999982, 0.1000050830000001, 0.10000318099999994, 0.100000278, 0.10000605500000015, 0.10000605599999979, 0.10000154200000022, 0.100001958, 0.10000004200000001, 0.10000052799999981, 0.10000692999999972, 0.10000522200000006, 0.10000455600000002, 0.10000227800000028, 0.10000806900000025, 0.100003375, 0.1000058199999998, 0.10000141700000009, 0.10000079099999981, 0.10000630600000004, 0.10000554199999989, 0.10000516599999987, 0.10000204099999976, 0.10000393099999982, 0.10000605599999979, 0.10000029099999974, 0.10000905600000021, 0.10000676399999975, 0.10000340300000055, 0.10000892999999955, 0.100006445, 0.10000304199999999, 0.10000458300000048, 0.10000762499999993, 0.10000651400000038]</msg>
<status status="PASS" starttime="20201015 13:37:45.908" endtime="20201015 13:37:45.912"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.895" endtime="20201015 13:37:45.913"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.784" endtime="20201015 13:37:45.915"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f103rb</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:39.643" endtime="20201015 13:37:45.917" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:00.719" endtime="20201015 13:37:45.936"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f103rb</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:36:54.918" endtime="20201015 13:37:46.002"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f103rb</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
