<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201015 13:37:42.365" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.951" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:42.960" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:44.205" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:42.950" endtime="20201015 13:37:44.206"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.209" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:44.207" endtime="20201015 13:37:44.209"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.949" endtime="20201015 13:37:44.209"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:44.212" endtime="20201015 13:37:44.448"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.210" endtime="20201015 13:37:44.449"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.462" endtime="20201015 13:37:44.476"></status>
</kw>
<msg timestamp="20201015 13:37:44.477" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:44.460" endtime="20201015 13:37:44.477"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.480" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:44.478" endtime="20201015 13:37:44.480"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.483" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:44.481" endtime="20201015 13:37:44.483"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:44.458" endtime="20201015 13:37:44.484"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:44.456" endtime="20201015 13:37:44.484"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.454" endtime="20201015 13:37:44.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:44.489" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:44.488" endtime="20201015 13:37:44.489"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.486" endtime="20201015 13:37:44.489"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.453" endtime="20201015 13:37:44.490"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.453" endtime="20201015 13:37:44.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.491" endtime="20201015 13:37:44.492"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.451" endtime="20201015 13:37:44.493"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.494" endtime="20201015 13:37:44.496"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.450" endtime="20201015 13:37:44.496"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.947" endtime="20201015 13:37:44.496"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:44.503" endtime="20201015 13:37:44.523"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.501" endtime="20201015 13:37:44.523"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.538" endtime="20201015 13:37:44.553"></status>
</kw>
<msg timestamp="20201015 13:37:44.553" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:44.536" endtime="20201015 13:37:44.553"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.556" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:44.554" endtime="20201015 13:37:44.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.559" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:44.557" endtime="20201015 13:37:44.559"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:44.533" endtime="20201015 13:37:44.560"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:44.531" endtime="20201015 13:37:44.560"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.529" endtime="20201015 13:37:44.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:44.565" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:44.564" endtime="20201015 13:37:44.565"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.562" endtime="20201015 13:37:44.565"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.528" endtime="20201015 13:37:44.565"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.527" endtime="20201015 13:37:44.566"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.566" endtime="20201015 13:37:44.568"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.526" endtime="20201015 13:37:44.568"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.524" endtime="20201015 13:37:44.569"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.500" endtime="20201015 13:37:44.569"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.576" endtime="20201015 13:37:44.585"></status>
</kw>
<msg timestamp="20201015 13:37:44.586" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:44.574" endtime="20201015 13:37:44.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.588" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:44.587" endtime="20201015 13:37:44.589"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.590" endtime="20201015 13:37:44.591"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.572" endtime="20201015 13:37:44.592"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.570" endtime="20201015 13:37:44.592"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.596" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:37:44.595" endtime="20201015 13:37:44.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.598" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:37:44.597" endtime="20201015 13:37:44.599"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.593" endtime="20201015 13:37:44.599"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:44.497" endtime="20201015 13:37:44.600" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:42.491" endtime="20201015 13:37:44.602"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.662" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:44.670" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:45.963" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:44.661" endtime="20201015 13:37:45.964"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.969" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:45.967" endtime="20201015 13:37:45.970"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.659" endtime="20201015 13:37:45.971"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:45.976" endtime="20201015 13:37:46.198"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.973" endtime="20201015 13:37:46.199"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.211" endtime="20201015 13:37:46.225"></status>
</kw>
<msg timestamp="20201015 13:37:46.225" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.209" endtime="20201015 13:37:46.226"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.228" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.227" endtime="20201015 13:37:46.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.231" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:46.229" endtime="20201015 13:37:46.231"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:46.207" endtime="20201015 13:37:46.232"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:46.205" endtime="20201015 13:37:46.233"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.204" endtime="20201015 13:37:46.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:46.237" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:46.236" endtime="20201015 13:37:46.237"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.234" endtime="20201015 13:37:46.237"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.203" endtime="20201015 13:37:46.238"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.202" endtime="20201015 13:37:46.238"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.238" endtime="20201015 13:37:46.240"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.201" endtime="20201015 13:37:46.240"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.241" endtime="20201015 13:37:46.243"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.199" endtime="20201015 13:37:46.243"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.658" endtime="20201015 13:37:46.244"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:46.249" endtime="20201015 13:37:46.269"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.248" endtime="20201015 13:37:46.270"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.283" endtime="20201015 13:37:46.297"></status>
</kw>
<msg timestamp="20201015 13:37:46.297" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.281" endtime="20201015 13:37:46.298"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.300" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.299" endtime="20201015 13:37:46.301"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:46.303" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:46.301" endtime="20201015 13:37:46.304"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:46.279" endtime="20201015 13:37:46.304"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:46.276" endtime="20201015 13:37:46.305"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.275" endtime="20201015 13:37:46.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:46.309" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:46.308" endtime="20201015 13:37:46.309"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.306" endtime="20201015 13:37:46.309"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.274" endtime="20201015 13:37:46.310"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.274" endtime="20201015 13:37:46.310"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.311" endtime="20201015 13:37:46.312"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.272" endtime="20201015 13:37:46.312"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.271" endtime="20201015 13:37:46.313"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.246" endtime="20201015 13:37:46.313"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:46.321" endtime="20201015 13:37:51.836"></status>
</kw>
<msg timestamp="20201015 13:37:51.837" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:46.320" endtime="20201015 13:37:51.837"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:51.842" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:51.839" endtime="20201015 13:37:51.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:51.844" endtime="20201015 13:37:51.849"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.317" endtime="20201015 13:37:51.850"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.315" endtime="20201015 13:37:51.852"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:51.857" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:51.854" endtime="20201015 13:37:51.858"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:51.915" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:37:51.859" endtime="20201015 13:37:51.916"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:51.923" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:51.921" endtime="20201015 13:37:51.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:51.927" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:37:51.925" endtime="20201015 13:37:51.928"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:51.917" endtime="20201015 13:37:51.929"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:51.943" endtime="20201015 13:37:52.253"></status>
</kw>
<msg timestamp="20201015 13:37:52.256" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.561459486, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.661464403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:51.939" endtime="20201015 13:37:52.256"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.081" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.561459486, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.661464403, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:52.257" endtime="20201015 13:37:58.083"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:58.085" endtime="20201015 13:37:58.090"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:51.934" endtime="20201015 13:37:58.091"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:51.930" endtime="20201015 13:37:58.092"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:58.103" level="INFO">${FILTERED} = [{'diff': 0.10000491700000003}, {'diff': 0.100003375}, {'diff': 0.100005695}, {'diff': 0.10000469499999998}, {'diff': 0.10000477800000007}, {'diff': 0.10000486099999994}, {'diff': 0.1000032500000001},...</msg>
<status status="PASS" starttime="20201015 13:37:58.094" endtime="20201015 13:37:58.104"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:58.115" level="INFO">${RESULT} = {'diff': [0.10000491700000003, 0.100003375, 0.100005695, 0.10000469499999998, 0.10000477800000007, 0.10000486099999994, 0.1000032500000001, 0.10000441700000007, 0.10000601400000009, 0.1000031949999999...</msg>
<status status="PASS" starttime="20201015 13:37:58.105" endtime="20201015 13:37:58.116"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.129" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:58.127" endtime="20201015 13:37:58.130"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.134" level="INFO">VALUE: [0.10000491700000003, 0.100003375, 0.100005695, 0.10000469499999998, 0.10000477800000007, 0.10000486099999994, 0.1000032500000001, 0.10000441700000007, 0.10000601400000009, 0.10000319499999999, 0.10000550000000019, 0.10000344400000016, 0.10000431899999995, 0.10000586100000008, 0.10000462499999996, 0.10000320799999995, 0.10000432000000004, 0.10000598600000021, 0.10000483299999985, 0.10000325000000032, 0.10000562499999965, 0.1000045140000001, 0.10000504200000027, 0.10000348599999986, 0.10000558300000018, 0.10000494500000023, 0.100005028, 0.10000462499999996, 0.10000462499999996, 0.10000318099999994, 0.10000444399999964, 0.1000059310000001, 0.10000327799999997, 0.10000604099999988, 0.10000336099999974, 0.10000438800000033, 0.100004223, 0.10000579100000007, 0.10000326299999962, 0.1000058880000001, 0.10000336099999974, 0.10000576399999961, 0.1000048050000002, 0.10000348600000031, 0.10000422199999992, 0.10000429099999941, 0.10000551400000024, 0.10000472200000043, 0.10000467999999962, 0.10000461100000013]</msg>
<status status="PASS" starttime="20201015 13:37:58.132" endtime="20201015 13:37:58.135"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.117" endtime="20201015 13:37:58.136"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:46.314" endtime="20201015 13:37:58.137"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:46.244" endtime="20201015 13:37:58.139" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:58.153" endtime="20201015 13:37:58.178"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.149" endtime="20201015 13:37:58.181"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:58.215" endtime="20201015 13:37:58.231"></status>
</kw>
<msg timestamp="20201015 13:37:58.232" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:58.212" endtime="20201015 13:37:58.232"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.236" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:58.234" endtime="20201015 13:37:58.237"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:58.242" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:58.238" endtime="20201015 13:37:58.243"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:58.208" endtime="20201015 13:37:58.244"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:58.204" endtime="20201015 13:37:58.246"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.201" endtime="20201015 13:37:58.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:58.255" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:58.254" endtime="20201015 13:37:58.256"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.248" endtime="20201015 13:37:58.257"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.199" endtime="20201015 13:37:58.257"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.198" endtime="20201015 13:37:58.258"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:58.259" endtime="20201015 13:37:58.260"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.194" endtime="20201015 13:37:58.261"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.185" endtime="20201015 13:37:58.261"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.146" endtime="20201015 13:37:58.262"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:58.272" endtime="20201015 13:38:03.799"></status>
</kw>
<msg timestamp="20201015 13:38:03.800" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:58.270" endtime="20201015 13:38:03.800"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.805" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:38:03.802" endtime="20201015 13:38:03.806"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:03.808" endtime="20201015 13:38:03.811"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.266" endtime="20201015 13:38:03.812"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.264" endtime="20201015 13:38:03.813"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:03.818" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 12250, 14500, 16750, 19000]}</msg>
<status status="PASS" starttime="20201015 13:38:03.815" endtime="20201015 13:38:03.819"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:03.829" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:38:03.820" endtime="20201015 13:38:03.829"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.837" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:03.834" endtime="20201015 13:38:03.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:03.841" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:38:03.839" endtime="20201015 13:38:03.842"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.831" endtime="20201015 13:38:03.843"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:03.856" endtime="20201015 13:38:04.159"></status>
</kw>
<msg timestamp="20201015 13:38:04.162" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.608618778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.708623417, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:03.853" endtime="20201015 13:38:04.162"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.170" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.608618778, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.708623417, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:04.163" endtime="20201015 13:38:04.170"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:04.171" endtime="20201015 13:38:04.172"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.848" endtime="20201015 13:38:04.173"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:03.844" endtime="20201015 13:38:04.173"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:04.178" level="INFO">${FILTERED} = [{'diff': 0.100004639}, {'diff': 0.100004431}, {'diff': 0.10000333300000008}, {'diff': 0.10000501399999995}, {'diff': 0.10000538899999989}, {'diff': 0.10000384800000006}, {'diff': 0.10000505500000001}...</msg>
<status status="PASS" starttime="20201015 13:38:04.174" endtime="20201015 13:38:04.178"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:04.182" level="INFO">${RESULT} = {'diff': [0.100004639, 0.100004431, 0.10000333300000008, 0.10000501399999995, 0.10000538899999989, 0.10000384800000006, 0.10000505500000001, 0.10000570800000008, 0.10000500000000012, 0.100004749999999...</msg>
<status status="PASS" starttime="20201015 13:38:04.179" endtime="20201015 13:38:04.183"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.187" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:04.186" endtime="20201015 13:38:04.187"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.189" level="INFO">VALUE: [0.100004639, 0.100004431, 0.10000333300000008, 0.10000501399999995, 0.10000538899999989, 0.10000384800000006, 0.10000505500000001, 0.10000570800000008, 0.10000500000000012, 0.10000474999999986, 0.1000031939999999, 0.10000481900000002, 0.10000554200000011, 0.1000043890000002, 0.1000032639999997, 0.10000534700000019, 0.1000038889999999, 0.10000538900000011, 0.10000476399999991, 0.10000492999999988, 0.10000455600000002, 0.10000427800000011, 0.10000498600000007, 0.10000330600000007, 0.10000501399999973, 0.10000418100000008, 0.10000544399999978, 0.10000395900000036, 0.10000598600000021, 0.10000319400000013, 0.10000600000000004, 0.10000479100000037, 0.10000331899999981, 0.1000055689999999, 0.1000043340000003, 0.10000533300000036, 0.10000494499999935, 0.10000445899999999, 0.10000318099999994, 0.1000042359999993, 0.10000548600000059, 0.10000463900000067, 0.10000494400000015, 0.10000444399999964, 0.10000448599999956, 0.10000441700000007, 0.10000495800000042, 0.10000323600000005, 0.10000594400000029, 0.10000327799999997]</msg>
<status status="PASS" starttime="20201015 13:38:04.188" endtime="20201015 13:38:04.190"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.183" endtime="20201015 13:38:04.190"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:58.262" endtime="20201015 13:38:04.191"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:58.142" endtime="20201015 13:38:04.191" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:04.198" endtime="20201015 13:38:04.217"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.196" endtime="20201015 13:38:04.218"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:04.231" endtime="20201015 13:38:04.245"></status>
</kw>
<msg timestamp="20201015 13:38:04.245" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:04.229" endtime="20201015 13:38:04.245"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.248" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:04.246" endtime="20201015 13:38:04.248"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:04.251" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:04.249" endtime="20201015 13:38:04.251"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:04.227" endtime="20201015 13:38:04.252"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:04.224" endtime="20201015 13:38:04.252"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.223" endtime="20201015 13:38:04.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:04.257" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:04.256" endtime="20201015 13:38:04.257"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.254" endtime="20201015 13:38:04.257"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.222" endtime="20201015 13:38:04.258"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.221" endtime="20201015 13:38:04.259"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:04.259" endtime="20201015 13:38:04.261"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.220" endtime="20201015 13:38:04.262"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.218" endtime="20201015 13:38:04.262"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.195" endtime="20201015 13:38:04.263"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:04.271" endtime="20201015 13:38:09.809"></status>
</kw>
<msg timestamp="20201015 13:38:09.810" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:38:04.269" endtime="20201015 13:38:09.810"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.816" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:38:09.812" endtime="20201015 13:38:09.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:09.818" endtime="20201015 13:38:09.821"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.267" endtime="20201015 13:38:09.822"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.265" endtime="20201015 13:38:09.823"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:09.829" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]}</msg>
<status status="PASS" starttime="20201015 13:38:09.825" endtime="20201015 13:38:09.830"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:09.840" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:09.831" endtime="20201015 13:38:09.840"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.848" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:09.846" endtime="20201015 13:38:09.849"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:09.852" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:09.850" endtime="20201015 13:38:09.853"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.842" endtime="20201015 13:38:09.854"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:09.868" endtime="20201015 13:38:10.166"></status>
</kw>
<msg timestamp="20201015 13:38:10.169" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564044139, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664048833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:09.865" endtime="20201015 13:38:10.169"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.177" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564044139, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664048833, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:10.170" endtime="20201015 13:38:10.177"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:10.178" endtime="20201015 13:38:10.180"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.859" endtime="20201015 13:38:10.180"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:09.856" endtime="20201015 13:38:10.181"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:10.185" level="INFO">${FILTERED} = [{'diff': 0.1000046939999999}, {'diff': 0.10000545799999994}, {'diff': 0.10000366599999999}, {'diff': 0.100004639}, {'diff': 0.10000555599999994}, {'diff': 0.100003375}, {'diff': 0.10000580599999997},...</msg>
<status status="PASS" starttime="20201015 13:38:10.181" endtime="20201015 13:38:10.185"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:10.190" level="INFO">${RESULT} = {'diff': [0.1000046939999999, 0.10000545799999994, 0.10000366599999999, 0.100004639, 0.10000555599999994, 0.100003375, 0.10000580599999997, 0.1000043610000001, 0.10000333400000017, 0.1000041949999999,...</msg>
<status status="PASS" starttime="20201015 13:38:10.186" endtime="20201015 13:38:10.190"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.195" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:10.194" endtime="20201015 13:38:10.196"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.198" level="INFO">VALUE: [0.1000046939999999, 0.10000545799999994, 0.10000366599999999, 0.100004639, 0.10000555599999994, 0.100003375, 0.10000580599999997, 0.1000043610000001, 0.10000333400000017, 0.1000041949999999, 0.10000690299999992, 0.10000366699999996, 0.10000324999999988, 0.10000666599999986, 0.10000386100000003, 0.10000437500000015, 0.10000586100000008, 0.10000344399999994, 0.10000494400000015, 0.10000544400000022, 0.1000044309999999, 0.10000349999999969, 0.100005597, 0.10000345799999977, 0.10000430600000021, 0.10000429199999994, 0.10000461100000013, 0.10000425000000002, 0.10000572200000013, 0.10000347200000004, 0.10000467999999962, 0.10000426400000029, 0.10000455600000002, 0.10000401400000003, 0.10000602800000014, 0.10000482000000055, 0.10000452800000037, 0.10000419400000027, 0.1000044029999998, 0.10000465300000005, 0.10000558399999981, 0.10000461099999924, 0.1000036669999993, 0.10000432000000004, 0.10000462499999951, 0.10000387499999963, 0.10000680600000056, 0.10000300000000006, 0.10000522200000006, 0.10000569400000003]</msg>
<status status="PASS" starttime="20201015 13:38:10.197" endtime="20201015 13:38:10.199"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.192" endtime="20201015 13:38:10.199"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:04.263" endtime="20201015 13:38:10.199"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:04.193" endtime="20201015 13:38:10.200" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:10.207" endtime="20201015 13:38:10.226"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.205" endtime="20201015 13:38:10.227"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:10.242" endtime="20201015 13:38:10.255"></status>
</kw>
<msg timestamp="20201015 13:38:10.256" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:10.238" endtime="20201015 13:38:10.256"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.259" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:10.257" endtime="20201015 13:38:10.259"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:10.262" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:10.260" endtime="20201015 13:38:10.262"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:10.236" endtime="20201015 13:38:10.263"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:10.233" endtime="20201015 13:38:10.263"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.232" endtime="20201015 13:38:10.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:10.267" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:10.267" endtime="20201015 13:38:10.268"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.264" endtime="20201015 13:38:10.268"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.231" endtime="20201015 13:38:10.268"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.230" endtime="20201015 13:38:10.268"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:10.269" endtime="20201015 13:38:10.271"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.229" endtime="20201015 13:38:10.271"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.227" endtime="20201015 13:38:10.272"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.204" endtime="20201015 13:38:10.272"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:10.281" endtime="20201015 13:38:15.829"></status>
</kw>
<msg timestamp="20201015 13:38:15.830" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:10.278" endtime="20201015 13:38:15.831"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.836" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:15.833" endtime="20201015 13:38:15.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:15.839" endtime="20201015 13:38:15.842"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.276" endtime="20201015 13:38:15.843"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.274" endtime="20201015 13:38:15.844"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:15.850" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]}</msg>
<status status="PASS" starttime="20201015 13:38:15.846" endtime="20201015 13:38:15.851"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:15.861" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:15.852" endtime="20201015 13:38:15.861"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.868" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:15.866" endtime="20201015 13:38:15.869"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:15.873" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:15.871" endtime="20201015 13:38:15.873"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.862" endtime="20201015 13:38:15.875"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:15.888" endtime="20201015 13:38:16.186"></status>
</kw>
<msg timestamp="20201015 13:38:16.189" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564790333, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664794056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:15.885" endtime="20201015 13:38:16.189"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.197" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564790333, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664794056, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:16.190" endtime="20201015 13:38:16.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.198" endtime="20201015 13:38:16.199"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.879" endtime="20201015 13:38:16.200"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:15.876" endtime="20201015 13:38:16.200"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:16.204" level="INFO">${FILTERED} = [{'diff': 0.10000372299999993}, {'diff': 0.10000461100000002}, {'diff': 0.10000484800000009}, {'diff': 0.10000319499999999}, {'diff': 0.10000584699999993}, {'diff': 0.10000330599999985}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:38:16.201" endtime="20201015 13:38:16.204"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:16.208" level="INFO">${RESULT} = {'diff': [0.10000372299999993, 0.10000461100000002, 0.10000484800000009, 0.10000319499999999, 0.10000584699999993, 0.10000330599999985, 0.10000427799999989, 0.100005597, 0.10000318099999994, 0.1000058...</msg>
<status status="PASS" starttime="20201015 13:38:16.205" endtime="20201015 13:38:16.209"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.212" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:16.211" endtime="20201015 13:38:16.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.215" level="INFO">VALUE: [0.10000372299999993, 0.10000461100000002, 0.10000484800000009, 0.10000319499999999, 0.10000584699999993, 0.10000330599999985, 0.10000427799999989, 0.100005597, 0.10000318099999994, 0.10000584700000004, 0.10000458300000004, 0.100002111, 0.10000697199999986, 0.10000351400000018, 0.10000586100000008, 0.10000444400000008, 0.10000393000000019, 0.100005291, 0.1000031800000003, 0.10000549999999997, 0.1000038889999999, 0.100004223, 0.10000545900000013, 0.10000320900000004, 0.1000054020000003, 0.10000465300000005, 0.10000498600000007, 0.10000301399999989, 0.10000984699999993, 0.1000015839999997, 0.1000048050000002, 0.10000318099999994, 0.10000447300000026, 0.10000494500000023, 0.10000491600000005, 0.10000587499999991, 0.1000033199999999, 0.10000320900000048, 0.10000562500000054, 0.1000059310000001, 0.10000443000000026, 0.10000454100000056, 0.1000043340000003, 0.10000491599999961, 0.10000465199999997, 0.10000432000000004, 0.10000288899999976, 0.10000634799999997, 0.10000455499999994, 0.10000401300000039]</msg>
<status status="PASS" starttime="20201015 13:38:16.214" endtime="20201015 13:38:16.216"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.209" endtime="20201015 13:38:16.216"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:10.272" endtime="20201015 13:38:16.217"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:10.202" endtime="20201015 13:38:16.217" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:16.224" endtime="20201015 13:38:16.243"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.222" endtime="20201015 13:38:16.244"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.258" endtime="20201015 13:38:16.272"></status>
</kw>
<msg timestamp="20201015 13:38:16.272" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.256" endtime="20201015 13:38:16.272"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.275" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:16.273" endtime="20201015 13:38:16.275"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:16.278" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:16.276" endtime="20201015 13:38:16.278"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:16.254" endtime="20201015 13:38:16.279"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:16.251" endtime="20201015 13:38:16.279"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.249" endtime="20201015 13:38:16.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:16.283" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:16.283" endtime="20201015 13:38:16.284"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.281" endtime="20201015 13:38:16.284"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.248" endtime="20201015 13:38:16.284"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.248" endtime="20201015 13:38:16.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.285" endtime="20201015 13:38:16.287"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.246" endtime="20201015 13:38:16.287"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.244" endtime="20201015 13:38:16.288"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.221" endtime="20201015 13:38:16.288"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:16.296" endtime="20201015 13:38:21.860"></status>
</kw>
<msg timestamp="20201015 13:38:21.861" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:16.295" endtime="20201015 13:38:21.861"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.868" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:21.863" endtime="20201015 13:38:21.869"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:21.871" endtime="20201015 13:38:21.876"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.292" endtime="20201015 13:38:21.879"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.290" endtime="20201015 13:38:21.880"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:21.890" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]}</msg>
<status status="PASS" starttime="20201015 13:38:21.883" endtime="20201015 13:38:21.890"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:21.900" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:21.892" endtime="20201015 13:38:21.901"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.910" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:21.908" endtime="20201015 13:38:21.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:21.915" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:21.913" endtime="20201015 13:38:21.915"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.902" endtime="20201015 13:38:21.917"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:21.930" endtime="20201015 13:38:22.229"></status>
</kw>
<msg timestamp="20201015 13:38:22.232" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563827292, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.663831889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:21.927" endtime="20201015 13:38:22.232"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:22.240" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563827292, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.663831889, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:22.233" endtime="20201015 13:38:22.240"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:22.241" endtime="20201015 13:38:22.243"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.921" endtime="20201015 13:38:22.243"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:21.918" endtime="20201015 13:38:22.244"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:22.248" level="INFO">${FILTERED} = [{'diff': 0.10000459699999997}, {'diff': 0.10000476400000002}, {'diff': 0.10000465299999994}, {'diff': 0.10000447200000007}, {'diff': 0.10000363900000009}, {'diff': 0.10000323600000005}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:38:22.245" endtime="20201015 13:38:22.248"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:22.252" level="INFO">${RESULT} = {'diff': [0.10000459699999997, 0.10000476400000002, 0.10000465299999994, 0.10000447200000007, 0.10000363900000009, 0.10000323600000005, 0.10000649999999989, 0.10000381999999997, 0.100005028, 0.1000053...</msg>
<status status="PASS" starttime="20201015 13:38:22.249" endtime="20201015 13:38:22.252"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:22.256" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:22.255" endtime="20201015 13:38:22.257"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:22.259" level="INFO">VALUE: [0.10000459699999997, 0.10000476400000002, 0.10000465299999994, 0.10000447200000007, 0.10000363900000009, 0.10000323600000005, 0.10000649999999989, 0.10000381999999997, 0.100005028, 0.10000531999999995, 0.10000493099999996, 0.100004333, 0.10000444400000008, 0.10000441700000007, 0.10000372200000007, 0.10000573599999996, 0.1000037220000003, 0.10000551300000016, 0.10000458300000004, 0.10000327799999997, 0.10000586100000008, 0.10000443100000034, 0.10000488900000004, 0.1000046939999999, 0.10000481900000002, 0.10000397200000011, 0.10000434700000005, 0.10000461100000013, 0.1000056530000002, 0.10000434700000005, 0.10000483300000029, 0.10000230499999985, 0.10000657000000013, 0.10000476400000036, 0.1000045140000001, 0.1000022920000001, 0.10000516699999995, 0.10000583299999999, 0.10000848600000012, 0.09999993099999926, 0.10000590300000045, 0.1000038889999999, 0.10000566700000046, 0.10000327799999997, 0.10000572200000057, 0.10000227799999983, 0.10000545800000005, 0.1000049719999998, 0.10000561100000027, 0.10000488799999996]</msg>
<status status="PASS" starttime="20201015 13:38:22.258" endtime="20201015 13:38:22.260"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.253" endtime="20201015 13:38:22.260"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:16.289" endtime="20201015 13:38:22.261"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:16.219" endtime="20201015 13:38:22.261" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:22.268" endtime="20201015 13:38:22.288"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.267" endtime="20201015 13:38:22.288"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:22.301" endtime="20201015 13:38:22.315"></status>
</kw>
<msg timestamp="20201015 13:38:22.316" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:22.300" endtime="20201015 13:38:22.316"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:22.318" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['nucleo-f767zi', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:22.317" endtime="20201015 13:38:22.318"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:22.321" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:22.319" endtime="20201015 13:38:22.321"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:22.297" endtime="20201015 13:38:22.322"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:22.295" endtime="20201015 13:38:22.323"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.293" endtime="20201015 13:38:22.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:22.327" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:22.326" endtime="20201015 13:38:22.327"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.324" endtime="20201015 13:38:22.327"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.293" endtime="20201015 13:38:22.328"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.292" endtime="20201015 13:38:22.328"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:22.328" endtime="20201015 13:38:22.330"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.291" endtime="20201015 13:38:22.330"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.289" endtime="20201015 13:38:22.331"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.265" endtime="20201015 13:38:22.331"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:22.341" endtime="20201015 13:38:27.913"></status>
</kw>
<msg timestamp="20201015 13:38:27.914" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:22.338" endtime="20201015 13:38:27.914"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:27.917" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:27.915" endtime="20201015 13:38:27.917"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:27.918" endtime="20201015 13:38:27.919"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.335" endtime="20201015 13:38:27.920"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.333" endtime="20201015 13:38:27.920"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:27.924" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250,...</msg>
<status status="PASS" starttime="20201015 13:38:27.921" endtime="20201015 13:38:27.924"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:27.929" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:27.925" endtime="20201015 13:38:27.929"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:27.933" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:27.932" endtime="20201015 13:38:27.933"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:27.935" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:27.934" endtime="20201015 13:38:27.935"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:27.930" endtime="20201015 13:38:27.936"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:27.942" endtime="20201015 13:38:28.238"></status>
</kw>
<msg timestamp="20201015 13:38:28.240" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563687681, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.663688333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:27.941" endtime="20201015 13:38:28.241"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:28.248" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563687681, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.663688333, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:28.242" endtime="20201015 13:38:28.249"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:28.250" endtime="20201015 13:38:28.251"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:27.938" endtime="20201015 13:38:28.252"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:27.936" endtime="20201015 13:38:28.252"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:28.256" level="INFO">${FILTERED} = [{'diff': 0.10000065199999997}, {'diff': 0.10000394400000001}, {'diff': 0.10000583399999996}, {'diff': 0.10000344399999994}, {'diff': 0.10000599999999993}, {'diff': 0.1000045140000001}, {'diff': 0.100...</msg>
<status status="PASS" starttime="20201015 13:38:28.253" endtime="20201015 13:38:28.256"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:28.261" level="INFO">${RESULT} = {'diff': [0.10000065199999997, 0.10000394400000001, 0.10000583399999996, 0.10000344399999994, 0.10000599999999993, 0.1000045140000001, 0.1000038889999999, 0.100003917, 0.10000691699999997, 0.100003610...</msg>
<status status="PASS" starttime="20201015 13:38:28.257" endtime="20201015 13:38:28.261"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:28.265" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:28.264" endtime="20201015 13:38:28.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:28.268" level="INFO">VALUE: [0.10000065199999997, 0.10000394400000001, 0.10000583399999996, 0.10000344399999994, 0.10000599999999993, 0.1000045140000001, 0.1000038889999999, 0.100003917, 0.10000691699999997, 0.10000361099999999, 0.1000054720000001, 0.10000397200000011, 0.10000561200000013, 0.10000343000000012, 0.1000054859999997, 0.10000452799999993, 0.10000466700000032, 0.10000336100000018, 0.10000429199999994, 0.10000576399999961, 0.10000380500000006, 0.10000423699999983, 0.10000427800000011, 0.10000420900000018, 0.10000319499999977, 0.10000568099999985, 0.10000490300000031, 0.10000561100000027, 0.100003375, 0.10000498600000007, 0.1000043749999997, 0.10000463899999978, 0.1000043749999997, 0.10000419400000027, 0.10000579200000059, 0.10000386200000033, 0.10000566699999958, 0.10000220899999945, 0.10000654200000003, 0.10000480600000028, 0.10000323700000013, 0.10000499999999946, 0.10000938900000023, 0.10000000000000053, 0.10000500000000034, 0.10000490200000023, 0.10000455499999994, 0.10000552699999954, 0.10000394400000001, 0.10000583400000007]</msg>
<status status="PASS" starttime="20201015 13:38:28.266" endtime="20201015 13:38:28.268"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:28.262" endtime="20201015 13:38:28.269"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:22.332" endtime="20201015 13:38:28.269"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_nucleo-f767zi</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:22.263" endtime="20201015 13:38:28.270" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:44.606" endtime="20201015 13:38:28.277"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">nucleo-f767zi</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:37:42.368" endtime="20201015 13:38:28.302"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_nucleo-f767zi</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
