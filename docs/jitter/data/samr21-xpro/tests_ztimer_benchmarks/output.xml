<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.3 on linux)" generated="20201015 13:37:07.387" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:08.695" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:08.712" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:10.736" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:08.692" endtime="20201015 13:37:10.737"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:10.742" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:10.739" endtime="20201015 13:37:10.743"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.689" endtime="20201015 13:37:10.745"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:10.749" endtime="20201015 13:37:11.095"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:10.746" endtime="20201015 13:37:11.097"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.129" endtime="20201015 13:37:11.145"></status>
</kw>
<msg timestamp="20201015 13:37:11.146" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:11.126" endtime="20201015 13:37:11.146"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.152" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:11.148" endtime="20201015 13:37:11.153"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.159" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:11.154" endtime="20201015 13:37:11.159"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:11.119" endtime="20201015 13:37:11.161"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:11.114" endtime="20201015 13:37:11.163"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.110" endtime="20201015 13:37:11.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:11.172" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:11.170" endtime="20201015 13:37:11.173"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.166" endtime="20201015 13:37:11.173"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.108" endtime="20201015 13:37:11.173"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.107" endtime="20201015 13:37:11.174"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.175" endtime="20201015 13:37:11.179"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.103" endtime="20201015 13:37:11.180"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.182" endtime="20201015 13:37:11.185"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.099" endtime="20201015 13:37:11.187"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:08.685" endtime="20201015 13:37:11.188"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:11.203" endtime="20201015 13:37:11.225"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.200" endtime="20201015 13:37:11.227"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.259" endtime="20201015 13:37:11.277"></status>
</kw>
<msg timestamp="20201015 13:37:11.278" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:11.256" endtime="20201015 13:37:11.279"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.284" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:11.280" endtime="20201015 13:37:11.285"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.291" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:11.287" endtime="20201015 13:37:11.292"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:11.249" endtime="20201015 13:37:11.293"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:11.243" endtime="20201015 13:37:11.295"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.240" endtime="20201015 13:37:11.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:11.303" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:11.302" endtime="20201015 13:37:11.304"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.298" endtime="20201015 13:37:11.305"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.238" endtime="20201015 13:37:11.305"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.236" endtime="20201015 13:37:11.305"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.307" endtime="20201015 13:37:11.310"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.232" endtime="20201015 13:37:11.312"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.228" endtime="20201015 13:37:11.314"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.197" endtime="20201015 13:37:11.314"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.331" endtime="20201015 13:37:11.342"></status>
</kw>
<msg timestamp="20201015 13:37:11.343" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:11.327" endtime="20201015 13:37:11.344"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.349" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:11.346" endtime="20201015 13:37:11.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:11.351" endtime="20201015 13:37:11.357"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.320" endtime="20201015 13:37:11.359"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.316" endtime="20201015 13:37:11.360"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.370" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:37:11.367" endtime="20201015 13:37:11.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.374" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:37:11.372" endtime="20201015 13:37:11.375"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.361" endtime="20201015 13:37:11.376"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:11.189" endtime="20201015 13:37:11.378" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:07.685" endtime="20201015 13:37:11.384"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:11.510" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:11.526" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:13.617" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:11.506" endtime="20201015 13:37:13.619"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:13.624" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:13.621" endtime="20201015 13:37:13.625"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.503" endtime="20201015 13:37:13.627"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:13.631" endtime="20201015 13:37:13.958"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:13.628" endtime="20201015 13:37:13.960"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:13.989" endtime="20201015 13:37:14.007"></status>
</kw>
<msg timestamp="20201015 13:37:14.008" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:13.986" endtime="20201015 13:37:14.009"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.014" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.010" endtime="20201015 13:37:14.015"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.021" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:14.017" endtime="20201015 13:37:14.021"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:13.980" endtime="20201015 13:37:14.023"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:13.974" endtime="20201015 13:37:14.025"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:13.972" endtime="20201015 13:37:14.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:14.033" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:14.032" endtime="20201015 13:37:14.034"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.027" endtime="20201015 13:37:14.036"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:13.970" endtime="20201015 13:37:14.037"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:13.968" endtime="20201015 13:37:14.037"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.039" endtime="20201015 13:37:14.042"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:13.965" endtime="20201015 13:37:14.044"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.045" endtime="20201015 13:37:14.049"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:13.962" endtime="20201015 13:37:14.050"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:11.501" endtime="20201015 13:37:14.051"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:14.064" endtime="20201015 13:37:14.086"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.061" endtime="20201015 13:37:14.088"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.124" endtime="20201015 13:37:14.143"></status>
</kw>
<msg timestamp="20201015 13:37:14.145" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.121" endtime="20201015 13:37:14.146"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.154" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.148" endtime="20201015 13:37:14.155"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:14.161" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:14.157" endtime="20201015 13:37:14.162"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:14.112" endtime="20201015 13:37:14.164"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:14.104" endtime="20201015 13:37:14.167"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.101" endtime="20201015 13:37:14.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:14.176" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:14.174" endtime="20201015 13:37:14.177"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.169" endtime="20201015 13:37:14.178"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.099" endtime="20201015 13:37:14.178"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.098" endtime="20201015 13:37:14.179"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.181" endtime="20201015 13:37:14.185"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.094" endtime="20201015 13:37:14.187"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.089" endtime="20201015 13:37:14.189"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.058" endtime="20201015 13:37:14.190"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:14.278" endtime="20201015 13:37:19.804"></status>
</kw>
<msg timestamp="20201015 13:37:19.805" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:14.212" endtime="20201015 13:37:19.806"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:19.811" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:19.807" endtime="20201015 13:37:19.812"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:19.813" endtime="20201015 13:37:19.817"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.202" endtime="20201015 13:37:19.819"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.196" endtime="20201015 13:37:19.820"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:19.826" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:19.822" endtime="20201015 13:37:19.826"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:19.879" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:37:19.828" endtime="20201015 13:37:19.880"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:19.888" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:19.886" endtime="20201015 13:37:19.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:19.893" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:37:19.891" endtime="20201015 13:37:19.894"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:19.881" endtime="20201015 13:37:19.896"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:19.912" endtime="20201015 13:37:20.265"></status>
</kw>
<msg timestamp="20201015 13:37:20.273" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.806165056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0, 'source_diff': 0}, {'time': 0.806174667, 'source': 'DUT_IC', 'event': 'RI...</msg>
<status status="PASS" starttime="20201015 13:37:19.909" endtime="20201015 13:37:20.273"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.292" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.806165056, 'source': 'DUT_IC', 'event': 'FALLING', 'diff': 0, 'source_diff': 0}, {'time': 0.806174667, 'source': 'DUT_IC', 'event': 'RI...</msg>
<status status="PASS" starttime="20201015 13:37:20.275" endtime="20201015 13:37:20.293"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.295" endtime="20201015 13:37:20.300"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:19.902" endtime="20201015 13:37:20.302"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:19.897" endtime="20201015 13:37:20.303"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:20.313" level="INFO">${FILTERED} = [{'diff': 0}, {'diff': 0.10019325000000001}, {'diff': 0.10020288899999996}, {'diff': 0.10019879100000018}, {'diff': 0.10020024999999988}, {'diff': 0.10020620799999991}, {'diff': 0.10020961099999992}, ...</msg>
<status status="PASS" starttime="20201015 13:37:20.305" endtime="20201015 13:37:20.314"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:20.323" level="INFO">${RESULT} = {'diff': [0, 0.10019325000000001, 0.10020288899999996, 0.10019879100000018, 0.10020024999999988, 0.10020620799999991, 0.10020961099999992, 0.10018420799999994, 0.10019798599999996, 0.10019693000000007...</msg>
<status status="PASS" starttime="20201015 13:37:20.316" endtime="20201015 13:37:20.324"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.333" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:20.331" endtime="20201015 13:37:20.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.338" level="INFO">VALUE: [0, 0.10019325000000001, 0.10020288899999996, 0.10019879100000018, 0.10020024999999988, 0.10020620799999991, 0.10020961099999992, 0.10018420799999994, 0.10019798599999996, 0.10019693000000007, 0.10019767999999996, 0.10020188800000018, 0.10019055499999996, 0.10019823599999977, 0.10019925000000018, 0.10019561199999982, 0.10020484800000018, 0.1002056950000001, 0.10021224999999978, 0.10019337499999992, 0.10019101399999997, 0.10019915300000015, 0.10021017999999993, 0.1002147360000003, 0.10021029099999978, 0.10020770800000012, 0.10021461099999973, 0.10021258300000024, 0.10022715199999999, 0.10019140300000018, 0.10019311099999983, 0.10019877700000013, 0.10020276400000006, 0.10021087500000014, 0.10021504200000031, 0.10020944399999987, 0.10021195900000013, 0.10022390200000064, 0.10020954199999998, 0.10021813899999987, 0.10021765199999955, 0.1002178340000004, 0.1002226119999996, 0.10021158400000019, 0.1002128339999997, 0.10021606900000002, 0.10021718000000046, 0.10022607000000061, 0.10020672200000025, 0.10019887500000024]</msg>
<status status="PASS" starttime="20201015 13:37:20.336" endtime="20201015 13:37:20.339"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.325" endtime="20201015 13:37:20.341"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:14.191" endtime="20201015 13:37:20.342"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:14.052" endtime="20201015 13:37:20.344" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:20.360" endtime="20201015 13:37:20.382"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.356" endtime="20201015 13:37:20.383"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.416" endtime="20201015 13:37:20.431"></status>
</kw>
<msg timestamp="20201015 13:37:20.432" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:20.412" endtime="20201015 13:37:20.432"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.438" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:20.434" endtime="20201015 13:37:20.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:20.445" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:20.441" endtime="20201015 13:37:20.446"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:20.405" endtime="20201015 13:37:20.447"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:20.399" endtime="20201015 13:37:20.449"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.397" endtime="20201015 13:37:20.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:20.458" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:20.457" endtime="20201015 13:37:20.459"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.451" endtime="20201015 13:37:20.459"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.395" endtime="20201015 13:37:20.460"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.393" endtime="20201015 13:37:20.460"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.462" endtime="20201015 13:37:20.465"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.389" endtime="20201015 13:37:20.467"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.385" endtime="20201015 13:37:20.468"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.354" endtime="20201015 13:37:20.469"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:20.491" endtime="20201015 13:37:26.028"></status>
</kw>
<msg timestamp="20201015 13:37:26.030" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:20.488" endtime="20201015 13:37:26.030"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.036" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:26.032" endtime="20201015 13:37:26.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.038" endtime="20201015 13:37:26.042"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.479" endtime="20201015 13:37:26.043"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.474" endtime="20201015 13:37:26.045"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:26.050" level="INFO">${RESULT} = {'interval': [10000, 12250, 14500, 16750, 19000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:26.046" endtime="20201015 13:37:26.051"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:26.057" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:26.052" endtime="20201015 13:37:26.057"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.066" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:26.063" endtime="20201015 13:37:26.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.070" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:26.068" endtime="20201015 13:37:26.071"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.058" endtime="20201015 13:37:26.072"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.089" endtime="20201015 13:37:26.438"></status>
</kw>
<msg timestamp="20201015 13:37:26.445" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.623915694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.724112125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:26.086" endtime="20201015 13:37:26.446"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.462" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.623915694, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.724112125, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:26.447" endtime="20201015 13:37:26.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.465" endtime="20201015 13:37:26.469"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.079" endtime="20201015 13:37:26.470"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.073" endtime="20201015 13:37:26.472"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:26.484" level="INFO">${FILTERED} = [{'diff': 0.10019643099999997}, {'diff': 0.100195653}, {'diff': 0.10022162499999998}, {'diff': 0.10022802699999989}, {'diff': 0.10022334700000002}, {'diff': 0.10021797200000004}, {'diff': 0.1002092629...</msg>
<status status="PASS" starttime="20201015 13:37:26.473" endtime="20201015 13:37:26.484"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:26.494" level="INFO">${RESULT} = {'diff': [0.10019643099999997, 0.100195653, 0.10022162499999998, 0.10022802699999989, 0.10022334700000002, 0.10021797200000004, 0.10020926299999999, 0.10020716600000013, 0.10022056899999998, 0.1002229...</msg>
<status status="PASS" starttime="20201015 13:37:26.486" endtime="20201015 13:37:26.494"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.504" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:26.501" endtime="20201015 13:37:26.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.509" level="INFO">VALUE: [0.10019643099999997, 0.100195653, 0.10022162499999998, 0.10022802699999989, 0.10022334700000002, 0.10021797200000004, 0.10020926299999999, 0.10020716600000013, 0.10022056899999998, 0.10022295800000003, 0.10020509799999999, 0.100207889, 0.10021133299999985, 0.10020930600000022, 0.10020337499999998, 0.10020648599999982, 0.10020770799999967, 0.10020602800000011, 0.10021186100000001, 0.10021036100000025, 0.10020799999999985, 0.10021184700000019, 0.10021654199999963, 0.10020679100000018, 0.10021740199999973, 0.10020276400000006, 0.10020186099999995, 0.10018200000000022, 0.10021819500000007, 0.10019029199999974, 0.10019627799999986, 0.10020408300000039, 0.10020494400000013, 0.10020866700000042, 0.10019808299999955, 0.10018977799999984, 0.10018947300000036, 0.10020181900000047, 0.10020094400000001, 0.10020773599999977, 0.10020312500000017, 0.10019874999999967, 0.10020598599999975, 0.10020901399999982, 0.1002127779999995, 0.10021411099999966, 0.10021252800000013, 0.1002045840000001, 0.100226653, 0.10021773600000028]</msg>
<status status="PASS" starttime="20201015 13:37:26.506" endtime="20201015 13:37:26.510"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.496" endtime="20201015 13:37:26.511"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:20.470" endtime="20201015 13:37:26.513"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:20.348" endtime="20201015 13:37:26.514" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:26.530" endtime="20201015 13:37:26.552"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.527" endtime="20201015 13:37:26.554"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.586" endtime="20201015 13:37:26.601"></status>
</kw>
<msg timestamp="20201015 13:37:26.602" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:26.583" endtime="20201015 13:37:26.603"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.609" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:26.605" endtime="20201015 13:37:26.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:26.615" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:26.611" endtime="20201015 13:37:26.616"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:26.576" endtime="20201015 13:37:26.618"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:26.569" endtime="20201015 13:37:26.619"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.567" endtime="20201015 13:37:26.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:26.628" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:26.626" endtime="20201015 13:37:26.628"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.622" endtime="20201015 13:37:26.629"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.565" endtime="20201015 13:37:26.629"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.563" endtime="20201015 13:37:26.630"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.631" endtime="20201015 13:37:26.635"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.559" endtime="20201015 13:37:26.636"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.555" endtime="20201015 13:37:26.638"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.524" endtime="20201015 13:37:26.639"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:26.662" endtime="20201015 13:37:32.210"></status>
</kw>
<msg timestamp="20201015 13:37:32.212" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:26.658" endtime="20201015 13:37:32.212"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.218" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:32.214" endtime="20201015 13:37:32.219"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.220" endtime="20201015 13:37:32.224"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.651" endtime="20201015 13:37:32.226"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.644" endtime="20201015 13:37:32.227"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:32.233" level="INFO">${RESULT} = {'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:32.229" endtime="20201015 13:37:32.233"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:32.239" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:32.235" endtime="20201015 13:37:32.240"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.248" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:32.246" endtime="20201015 13:37:32.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.253" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:32.250" endtime="20201015 13:37:32.253"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.241" endtime="20201015 13:37:32.255"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.271" endtime="20201015 13:37:32.623"></status>
</kw>
<msg timestamp="20201015 13:37:32.630" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.6245615, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.724693069, 'source': 'DUT_IC', 'event': 'FALLI...</msg>
<status status="PASS" starttime="20201015 13:37:32.268" endtime="20201015 13:37:32.631"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.647" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.6245615, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.724693069, 'source': 'DUT_IC', 'event': 'FALLI...</msg>
<status status="PASS" starttime="20201015 13:37:32.632" endtime="20201015 13:37:32.648"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.650" endtime="20201015 13:37:32.654"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.261" endtime="20201015 13:37:32.655"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.256" endtime="20201015 13:37:32.657"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:32.667" level="INFO">${FILTERED} = [{'diff': 0.10013156899999998}, {'diff': 0.10020907000000001}, {'diff': 0.10020712499999995}, {'diff': 0.10020094400000001}, {'diff': 0.10021309699999992}, {'diff': 0.10021447300000008}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:32.658" endtime="20201015 13:37:32.667"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:32.677" level="INFO">${RESULT} = {'diff': [0.10013156899999998, 0.10020907000000001, 0.10020712499999995, 0.10020094400000001, 0.10021309699999992, 0.10021447300000008, 0.10023009700000007, 0.10021601399999991, 0.10021386099999985, 0...</msg>
<status status="PASS" starttime="20201015 13:37:32.669" endtime="20201015 13:37:32.677"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.687" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:32.685" endtime="20201015 13:37:32.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.692" level="INFO">VALUE: [0.10013156899999998, 0.10020907000000001, 0.10020712499999995, 0.10020094400000001, 0.10021309699999992, 0.10021447300000008, 0.10023009700000007, 0.10021601399999991, 0.10021386099999985, 0.10020868100000002, 0.10021616600000005, 0.10022388900000001, 0.10022136100000001, 0.10021868000000023, 0.10022356999999982, 0.100216847, 0.10021884700000028, 0.10021112499999996, 0.10022515300000023, 0.10022070799999971, 0.10021849999999999, 0.10024329200000004, 0.10018248600000002, 0.10021804199999984, 0.10023136099999963, 0.10021847199999989, 0.10022256900000004, 0.10020273599999996, 0.1002039309999998, 0.10020115299999999, 0.10021509800000006, 0.100215167, 0.10020998599999986, 0.10021883399999965, 0.10021842999999997, 0.10021245899999975, 0.10021612500000021, 0.10020711099999957, 0.1001999299999996, 0.10020004199999999, 0.10019369499999975, 0.10020104200000013, 0.1002074860000004, 0.1002027089999995, 0.10021418100000012, 0.10021140300000031, 0.10020888800000005, 0.10021366700000023, 0.10020088900000079, 0.10020830599999986]</msg>
<status status="PASS" starttime="20201015 13:37:32.690" endtime="20201015 13:37:32.693"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.679" endtime="20201015 13:37:32.695"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:26.640" endtime="20201015 13:37:32.696"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:26.518" endtime="20201015 13:37:32.698" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:32.714" endtime="20201015 13:37:32.736"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.710" endtime="20201015 13:37:32.738"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.770" endtime="20201015 13:37:32.788"></status>
</kw>
<msg timestamp="20201015 13:37:32.789" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:32.767" endtime="20201015 13:37:32.789"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.795" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:32.791" endtime="20201015 13:37:32.796"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:32.802" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:32.798" endtime="20201015 13:37:32.802"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:32.760" endtime="20201015 13:37:32.804"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:32.753" endtime="20201015 13:37:32.806"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.751" endtime="20201015 13:37:32.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:32.814" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:32.813" endtime="20201015 13:37:32.815"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.808" endtime="20201015 13:37:32.815"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.749" endtime="20201015 13:37:32.817"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.747" endtime="20201015 13:37:32.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.819" endtime="20201015 13:37:32.823"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.743" endtime="20201015 13:37:32.825"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.739" endtime="20201015 13:37:32.826"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.708" endtime="20201015 13:37:32.827"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:32.848" endtime="20201015 13:37:38.408"></status>
</kw>
<msg timestamp="20201015 13:37:38.409" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:37:32.844" endtime="20201015 13:37:38.410"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.416" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:37:38.411" endtime="20201015 13:37:38.417"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:38.419" endtime="20201015 13:37:38.422"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.837" endtime="20201015 13:37:38.424"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.832" endtime="20201015 13:37:38.426"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:38.432" level="INFO">${RESULT} = {'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:38.427" endtime="20201015 13:37:38.433"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:38.439" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:37:38.435" endtime="20201015 13:37:38.440"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.449" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:38.446" endtime="20201015 13:37:38.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.453" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:37:38.451" endtime="20201015 13:37:38.455"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.441" endtime="20201015 13:37:38.456"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:38.473" endtime="20201015 13:37:38.818"></status>
</kw>
<msg timestamp="20201015 13:37:38.825" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.62760925, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.727893153, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:37:38.469" endtime="20201015 13:37:38.825"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.842" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.62760925, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.727893153, 'source': 'DUT_IC', 'event': 'FALL...</msg>
<status status="PASS" starttime="20201015 13:37:38.827" endtime="20201015 13:37:38.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:38.845" endtime="20201015 13:37:38.848"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.462" endtime="20201015 13:37:38.850"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.458" endtime="20201015 13:37:38.851"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:38.861" level="INFO">${FILTERED} = [{'diff': 0.10028390300000001}, {'diff': 0.10012549999999998}, {'diff': 0.10020127700000003}, {'diff': 0.10020308400000011}, {'diff': 0.10020740200000011}, {'diff': 0.10019365299999983}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:38.853" endtime="20201015 13:37:38.862"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:38.871" level="INFO">${RESULT} = {'diff': [0.10028390300000001, 0.10012549999999998, 0.10020127700000003, 0.10020308400000011, 0.10020740200000011, 0.10019365299999983, 0.10021063899999993, 0.1002075560000002, 0.10020072200000008, 0....</msg>
<status status="PASS" starttime="20201015 13:37:38.863" endtime="20201015 13:37:38.872"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.881" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:38.879" endtime="20201015 13:37:38.882"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:38.886" level="INFO">VALUE: [0.10028390300000001, 0.10012549999999998, 0.10020127700000003, 0.10020308400000011, 0.10020740200000011, 0.10019365299999983, 0.10021063899999993, 0.1002075560000002, 0.10020072200000008, 0.100215041, 0.10020738900000015, 0.10020015199999999, 0.10018801399999999, 0.1001665140000001, 0.10019925000000018, 0.10018299999999991, 0.10019061099999993, 0.10018713800000034, 0.10018848599999997, 0.10021188899999967, 0.10020222200000006, 0.1001942920000003, 0.10019793099999985, 0.10018669400000002, 0.10019176399999985, 0.10020665299999987, 0.10019974999999981, 0.10021254199999996, 0.10019733399999975, 0.1001997779999999, 0.10019591699999975, 0.10018831899999991, 0.10020741700000002, 0.10019866700000035, 0.10018097199999954, 0.10019012500000013, 0.10019637500000034, 0.10020820799999974, 0.1002016810000006, 0.10019580600000033, 0.10019747200000051, 0.10020456999999983, 0.10019186099999988, 0.10022693099999991, 0.10020838799999954, 0.1002021390000003, 0.10020890299999952, 0.10022323599999972, 0.10022667999999957, 0.10021294399999991]</msg>
<status status="PASS" starttime="20201015 13:37:38.883" endtime="20201015 13:37:38.888"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.873" endtime="20201015 13:37:38.890"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:32.828" endtime="20201015 13:37:38.891"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:32.702" endtime="20201015 13:37:38.893" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:38.909" endtime="20201015 13:37:38.932"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.905" endtime="20201015 13:37:38.934"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:38.979" endtime="20201015 13:37:38.998"></status>
</kw>
<msg timestamp="20201015 13:37:39.000" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:38.973" endtime="20201015 13:37:39.000"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.006" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:39.002" endtime="20201015 13:37:39.007"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:39.013" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:39.009" endtime="20201015 13:37:39.014"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:38.965" endtime="20201015 13:37:39.016"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:38.955" endtime="20201015 13:37:39.018"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.951" endtime="20201015 13:37:39.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:39.026" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:39.025" endtime="20201015 13:37:39.027"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.020" endtime="20201015 13:37:39.027"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.949" endtime="20201015 13:37:39.028"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.947" endtime="20201015 13:37:39.028"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.030" endtime="20201015 13:37:39.033"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.942" endtime="20201015 13:37:39.035"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.936" endtime="20201015 13:37:39.036"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:38.902" endtime="20201015 13:37:39.037"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:39.058" endtime="20201015 13:37:44.651"></status>
</kw>
<msg timestamp="20201015 13:37:44.653" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:37:39.055" endtime="20201015 13:37:44.653"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.664" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:37:44.656" endtime="20201015 13:37:44.665"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.667" endtime="20201015 13:37:44.672"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.048" endtime="20201015 13:37:44.675"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.042" endtime="20201015 13:37:44.677"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:44.688" level="INFO">${RESULT} = {'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984], 'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:44.680" endtime="20201015 13:37:44.688"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:44.697" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:37:44.691" endtime="20201015 13:37:44.698"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.712" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:44.709" endtime="20201015 13:37:44.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:44.717" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:37:44.714" endtime="20201015 13:37:44.717"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.701" endtime="20201015 13:37:44.719"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:44.736" endtime="20201015 13:37:45.087"></status>
</kw>
<msg timestamp="20201015 13:37:45.094" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.644177653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.744375931, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:44.733" endtime="20201015 13:37:45.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.112" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.644177653, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.744375931, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:45.096" endtime="20201015 13:37:45.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.114" endtime="20201015 13:37:45.118"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.725" endtime="20201015 13:37:45.119"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:44.720" endtime="20201015 13:37:45.121"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:45.131" level="INFO">${FILTERED} = [{'diff': 0.10019827800000003}, {'diff': 0.10019797200000002}, {'diff': 0.10019941700000001}, {'diff': 0.10021563899999997}, {'diff': 0.10020099999999998}, {'diff': 0.10019931900000012}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:45.122" endtime="20201015 13:37:45.131"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:45.139" level="INFO">${RESULT} = {'diff': [0.10019827800000003, 0.10019797200000002, 0.10019941700000001, 0.10021563899999997, 0.10020099999999998, 0.10019931900000012, 0.10020923599999998, 0.10020242999999995, 0.10021301300000007, 0...</msg>
<status status="PASS" starttime="20201015 13:37:45.133" endtime="20201015 13:37:45.140"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.149" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:45.147" endtime="20201015 13:37:45.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.154" level="INFO">VALUE: [0.10019827800000003, 0.10019797200000002, 0.10019941700000001, 0.10021563899999997, 0.10020099999999998, 0.10019931900000012, 0.10020923599999998, 0.10020242999999995, 0.10021301300000007, 0.10019973599999998, 0.10020461099999989, 0.10018944399999996, 0.10019561099999996, 0.10019555600000007, 0.10021901400000033, 0.1001325689999999, 0.10014449999999986, 0.10028376399999983, 0.100195319, 0.10009319400000027, 0.10020950000000006, 0.1001956660000003, 0.10020686199999984, 0.10020616700000007, 0.1002137219999999, 0.10020756899999972, 0.100209875, 0.10019011199999994, 0.10019759800000028, 0.10019592999999993, 0.10021476399999996, 0.10020126399999985, 0.10020009699999965, 0.10017670900000031, 0.10021462499999956, 0.10019820800000012, 0.10019940300000041, 0.1001916249999999, 0.1001898050000003, 0.10019152799999986, 0.10020036099999974, 0.10020395799999982, 0.10019613799999938, 0.10019480600000019, 0.10020254200000078, 0.10020493100000039, 0.10022445900000054, 0.10017873599999927, 0.10018731899999977, 0.10023118000000064]</msg>
<status status="PASS" starttime="20201015 13:37:45.151" endtime="20201015 13:37:45.155"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.141" endtime="20201015 13:37:45.157"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:39.038" endtime="20201015 13:37:45.158"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:38.897" endtime="20201015 13:37:45.160" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:45.177" endtime="20201015 13:37:45.199"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.173" endtime="20201015 13:37:45.200"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.238" endtime="20201015 13:37:45.253"></status>
</kw>
<msg timestamp="20201015 13:37:45.254" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:45.235" endtime="20201015 13:37:45.255"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.261" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['samr21-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:45.257" endtime="20201015 13:37:45.262"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:45.267" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:45.263" endtime="20201015 13:37:45.268"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:45.228" endtime="20201015 13:37:45.270"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:45.221" endtime="20201015 13:37:45.272"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.214" endtime="20201015 13:37:45.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:45.280" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:45.278" endtime="20201015 13:37:45.281"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.274" endtime="20201015 13:37:45.281"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.212" endtime="20201015 13:37:45.281"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.211" endtime="20201015 13:37:45.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.283" endtime="20201015 13:37:45.287"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.207" endtime="20201015 13:37:45.288"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.202" endtime="20201015 13:37:45.290"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.170" endtime="20201015 13:37:45.290"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:45.311" endtime="20201015 13:37:50.893"></status>
</kw>
<msg timestamp="20201015 13:37:50.894" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:37:45.308" endtime="20201015 13:37:50.895"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:50.901" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:37:50.896" endtime="20201015 13:37:50.902"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:50.903" endtime="20201015 13:37:50.907"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.301" endtime="20201015 13:37:50.909"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.295" endtime="20201015 13:37:50.911"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:50.918" level="INFO">${RESULT} = {'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000], 'focus': ...</msg>
<status status="PASS" starttime="20201015 13:37:50.912" endtime="20201015 13:37:50.919"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:50.925" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:50.920" endtime="20201015 13:37:50.926"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:50.935" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:50.932" endtime="20201015 13:37:50.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:50.939" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:50.937" endtime="20201015 13:37:50.940"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:50.927" endtime="20201015 13:37:50.942"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:50.960" endtime="20201015 13:37:51.305"></status>
</kw>
<msg timestamp="20201015 13:37:51.312" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.629176903, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.729297069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:50.957" endtime="20201015 13:37:51.312"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:51.330" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.629176903, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.729297069, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:51.314" endtime="20201015 13:37:51.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:51.332" endtime="20201015 13:37:51.336"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:50.948" endtime="20201015 13:37:51.337"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:50.943" endtime="20201015 13:37:51.339"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:51.349" level="INFO">${FILTERED} = [{'diff': 0.10012016600000007}, {'diff': 0.10020867999999994}, {'diff': 0.10019079200000003}, {'diff': 0.10019534699999988}, {'diff': 0.10019441699999998}, {'diff': 0.10020238899999989}, {'diff': 0.10...</msg>
<status status="PASS" starttime="20201015 13:37:51.340" endtime="20201015 13:37:51.349"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:51.357" level="INFO">${RESULT} = {'diff': [0.10012016600000007, 0.10020867999999994, 0.10019079200000003, 0.10019534699999988, 0.10019441699999998, 0.10020238899999989, 0.10018495900000013, 0.10019001400000005, 0.10019169500000014, 0...</msg>
<status status="PASS" starttime="20201015 13:37:51.351" endtime="20201015 13:37:51.358"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:51.367" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:51.365" endtime="20201015 13:37:51.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:51.372" level="INFO">VALUE: [0.10012016600000007, 0.10020867999999994, 0.10019079200000003, 0.10019534699999988, 0.10019441699999998, 0.10020238899999989, 0.10018495900000013, 0.10019001400000005, 0.10019169500000014, 0.10018973599999992, 0.10019087499999979, 0.10020422299999998, 0.10020349999999989, 0.10020429200000014, 0.10018638899999965, 0.10020399999999974, 0.10020362500000024, 0.10019886099999997, 0.10019290199999986, 0.10019851300000004, 0.10020261199999991, 0.10019875000000011, 0.10018870800000013, 0.10018658300000016, 0.1001863890000001, 0.10019373600000003, 0.10020138899999997, 0.100189152, 0.1001997910000001, 0.10021086099999987, 0.10021661100000001, 0.10020406899999967, 0.10020937499999993, 0.10020298599999977, 0.10020230499999982, 0.1002091940000005, 0.10020909699999958, 0.10020501400000015, 0.10020508299999964, 0.10019677799999993, 0.10018976400000046, 0.10019933299999995, 0.10019240199999935, 0.10019672199999974, 0.10017901399999918, 0.1002010000000002, 0.10020023600000005, 0.10018705599999933, 0.10017352800000001, 0.1002217080000003]</msg>
<status status="PASS" starttime="20201015 13:37:51.369" endtime="20201015 13:37:51.373"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:51.359" endtime="20201015 13:37:51.375"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:45.291" endtime="20201015 13:37:51.376"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_samr21-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:45.164" endtime="20201015 13:37:51.378" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:11.397" endtime="20201015 13:37:51.395"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">samr21-xpro</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:37:07.406" endtime="20201015 13:37:51.456"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_samr21-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
