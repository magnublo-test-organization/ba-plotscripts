<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on linux)" generated="20201015 13:37:32.897" rpa="false">
<suite id="s1" name="tests_ztimer_benchmarks" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests">
<suite id="s1-s1" name="Timer Version" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/00__timer_version.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:33.485" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:33.494" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:34.711" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:33.484" endtime="20201015 13:37:34.712"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:34.714" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:34.713" endtime="20201015 13:37:34.715"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.482" endtime="20201015 13:37:34.715"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:34.718" endtime="20201015 13:37:34.951"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.716" endtime="20201015 13:37:34.951"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:34.964" endtime="20201015 13:37:34.977"></status>
</kw>
<msg timestamp="20201015 13:37:34.978" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:34.963" endtime="20201015 13:37:34.978"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:34.980" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:34.979" endtime="20201015 13:37:34.980"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:34.983" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:34.981" endtime="20201015 13:37:34.984"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:34.960" endtime="20201015 13:37:34.984"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:34.958" endtime="20201015 13:37:34.985"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.957" endtime="20201015 13:37:34.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:34.989" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:34.988" endtime="20201015 13:37:34.990"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.986" endtime="20201015 13:37:34.990"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.956" endtime="20201015 13:37:34.990"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.955" endtime="20201015 13:37:34.990"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:34.991" endtime="20201015 13:37:34.992"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.954" endtime="20201015 13:37:34.993"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:34.993" endtime="20201015 13:37:34.995"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.952" endtime="20201015 13:37:34.995"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:33.481" endtime="20201015 13:37:34.996"></status>
</kw>
<test id="s1-s1-t1" name="Save Timer Version">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:35.002" endtime="20201015 13:37:35.021"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.000" endtime="20201015 13:37:35.022"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:35.036" endtime="20201015 13:37:35.049"></status>
</kw>
<msg timestamp="20201015 13:37:35.049" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:35.034" endtime="20201015 13:37:35.049"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:35.052" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:35.050" endtime="20201015 13:37:35.052"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:35.055" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:35.053" endtime="20201015 13:37:35.055"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:35.031" endtime="20201015 13:37:35.056"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:35.029" endtime="20201015 13:37:35.056"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.027" endtime="20201015 13:37:35.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:35.060" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:35.059" endtime="20201015 13:37:35.060"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.057" endtime="20201015 13:37:35.061"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.026" endtime="20201015 13:37:35.061"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.025" endtime="20201015 13:37:35.061"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:35.062" endtime="20201015 13:37:35.063"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.024" endtime="20201015 13:37:35.064"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.023" endtime="20201015 13:37:35.064"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:34.999" endtime="20201015 13:37:35.064"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Get Timer Version</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Timer Version" library="DutDeviceIf">
<doc>Get the version of timer used</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:35.071" endtime="20201015 13:37:35.079"></status>
</kw>
<msg timestamp="20201015 13:37:35.080" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:35.069" endtime="20201015 13:37:35.080"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:35.082" level="INFO">${RESULT} = {'cmd': 'get_timer_version', 'msg': ['get_timer_version\r\n'], 'data': ['ztimer'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:35.081" endtime="20201015 13:37:35.082"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:35.083" endtime="20201015 13:37:35.085"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.067" endtime="20201015 13:37:35.085"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.065" endtime="20201015 13:37:35.086"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>timer-version</arg>
<arg>${RESULT['data'][0]}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:35.090" level="INFO">NAME: timer-version</msg>
<status status="PASS" starttime="20201015 13:37:35.089" endtime="20201015 13:37:35.090"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:35.092" level="INFO">VALUE: ztimer</msg>
<status status="PASS" starttime="20201015 13:37:35.091" endtime="20201015 13:37:35.092"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.086" endtime="20201015 13:37:35.092"></status>
</kw>
<doc>Record the timer version</doc>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:34.996" endtime="20201015 13:37:35.093" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:33.026" endtime="20201015 13:37:35.096"></status>
</suite>
<suite id="s1-s2" name="Sleep Jitter" source="/opt/jenkins/workspace/RIOT-HIL_PR-90/tests/ztimer_benchmarks/tests/03__sleep_jitter.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>RIOT Reset</arg>
<arg>PHILIP Reset</arg>
<arg>API Firmware Data Should Match</arg>
</arguments>
<kw name="RIOT Reset" library="riot_base.keywords">
<doc>Reset the test application</doc>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>make reset</arg>
<arg>shell=True</arg>
<arg>cwd=%{APPDIR}</arg>
</arguments>
<msg timestamp="20201015 13:37:35.146" level="INFO">Starting process:
make reset</msg>
<msg timestamp="20201015 13:37:35.155" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20201015 13:37:36.322" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201015 13:37:35.145" endtime="20201015 13:37:36.323"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>%{HIL_RESET_WAIT}</arg>
</arguments>
<msg timestamp="20201015 13:37:36.328" level="INFO">Slept 0 seconds</msg>
<status status="PASS" starttime="20201015 13:37:36.325" endtime="20201015 13:37:36.329"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.144" endtime="20201015 13:37:36.330"></status>
</kw>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:36.334" endtime="20201015 13:37:36.554"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.332" endtime="20201015 13:37:36.555"></status>
</kw>
<kw name="API Firmware Data Should Match" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:36.567" endtime="20201015 13:37:36.580"></status>
</kw>
<msg timestamp="20201015 13:37:36.580" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:36.566" endtime="20201015 13:37:36.580"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:36.583" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:36.581" endtime="20201015 13:37:36.583"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:36.586" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:36.584" endtime="20201015 13:37:36.586"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:36.564" endtime="20201015 13:37:36.587"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:36.561" endtime="20201015 13:37:36.587"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.560" endtime="20201015 13:37:36.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:36.591" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:36.591" endtime="20201015 13:37:36.592"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.589" endtime="20201015 13:37:36.592"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.559" endtime="20201015 13:37:36.592"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.558" endtime="20201015 13:37:36.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:36.593" endtime="20201015 13:37:36.595"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.557" endtime="20201015 13:37:36.595"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['data']}</arg>
<arg>${firmware}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:36.596" endtime="20201015 13:37:36.597"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.556" endtime="20201015 13:37:36.598"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:35.143" endtime="20201015 13:37:36.598"></status>
</kw>
<test id="s1-s2-t1" name="0 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:36.603" endtime="20201015 13:37:36.624"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.602" endtime="20201015 13:37:36.624"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:36.637" endtime="20201015 13:37:36.649"></status>
</kw>
<msg timestamp="20201015 13:37:36.650" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:36.636" endtime="20201015 13:37:36.650"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:36.653" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:36.651" endtime="20201015 13:37:36.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:36.656" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:36.654" endtime="20201015 13:37:36.657"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:36.633" endtime="20201015 13:37:36.658"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:36.631" endtime="20201015 13:37:36.659"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.630" endtime="20201015 13:37:36.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:36.664" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:36.663" endtime="20201015 13:37:36.664"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.660" endtime="20201015 13:37:36.664"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.629" endtime="20201015 13:37:36.664"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.628" endtime="20201015 13:37:36.665"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:36.665" endtime="20201015 13:37:36.667"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.627" endtime="20201015 13:37:36.668"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.625" endtime="20201015 13:37:36.669"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.601" endtime="20201015 13:37:36.669"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>0</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:36.680" endtime="20201015 13:37:42.172"></status>
</kw>
<msg timestamp="20201015 13:37:42.173" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:36.678" endtime="20201015 13:37:42.173"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.178" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 0\r\n'], 'data': [{'focus': '100000'}], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:42.175" endtime="20201015 13:37:42.178"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:42.180" endtime="20201015 13:37:42.185"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.674" endtime="20201015 13:37:42.186"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.672" endtime="20201015 13:37:42.187"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:42.192" level="INFO">${RESULT} = {'focus': [100000]}</msg>
<status status="PASS" starttime="20201015 13:37:42.188" endtime="20201015 13:37:42.192"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:42.250" level="INFO">${intervals} = []</msg>
<status status="PASS" starttime="20201015 13:37:42.194" endtime="20201015 13:37:42.250"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.257" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:42.256" endtime="20201015 13:37:42.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.262" level="INFO">VALUE: []</msg>
<status status="PASS" starttime="20201015 13:37:42.260" endtime="20201015 13:37:42.262"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.252" endtime="20201015 13:37:42.263"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:42.276" endtime="20201015 13:37:42.583"></status>
</kw>
<msg timestamp="20201015 13:37:42.585" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564490722, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664058722, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:42.273" endtime="20201015 13:37:42.586"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.594" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564490722, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664058722, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:42.587" endtime="20201015 13:37:42.594"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:42.595" endtime="20201015 13:37:42.597"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.268" endtime="20201015 13:37:42.597"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.265" endtime="20201015 13:37:42.597"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:42.601" level="INFO">${FILTERED} = [{'diff': 0.0995680000000001}, {'diff': 0.09956579099999996}, {'diff': 0.09957665299999996}, {'diff': 0.09958068099999995}, {'diff': 0.09958349999999994}, {'diff': 0.09958315299999998}, {'diff': 0.099...</msg>
<status status="PASS" starttime="20201015 13:37:42.598" endtime="20201015 13:37:42.601"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:42.605" level="INFO">${RESULT} = {'diff': [0.0995680000000001, 0.09956579099999996, 0.09957665299999996, 0.09958068099999995, 0.09958349999999994, 0.09958315299999998, 0.09957776400000018, 0.09958488900000018, 0.09959820900000005, 0....</msg>
<status status="PASS" starttime="20201015 13:37:42.602" endtime="20201015 13:37:42.605"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.610" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:42.609" endtime="20201015 13:37:42.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.612" level="INFO">VALUE: [0.0995680000000001, 0.09956579099999996, 0.09957665299999996, 0.09958068099999995, 0.09958349999999994, 0.09958315299999998, 0.09957776400000018, 0.09958488900000018, 0.09959820900000005, 0.09958012500000013, 0.09958901399999998, 0.09958812500000014, 0.0995779440000002, 0.09959543100000001, 0.09958752800000026, 0.09957604199999981, 0.09958138799999983, 0.09959347200000002, 0.09960073600000019, 0.09958516700000031, 0.09959101400000003, 0.09958922200000009, 0.09960013900000009, 0.09958622200000011, 0.09958840299999983, 0.09959426399999982, 0.09959549999999995, 0.09958079200000025, 0.09958355500000016, 0.09957944499999982, 0.09958072300000032, 0.09959556900000033, 0.0995752780000001, 0.09958891700000017, 0.09956823599999964, 0.09957665299999974, 0.09957623599999987, 0.09958226400000036, 0.09957719400000009, 0.09959523699999995, 0.09958319400000004, 0.09959090200000009, 0.09959300000000049, 0.09959016700000056, 0.09957851400000006, 0.0995778749999996, 0.09958538900000047, 0.09959227700000017, 0.09958597299999994, 0.09958604099999935]</msg>
<status status="PASS" starttime="20201015 13:37:42.611" endtime="20201015 13:37:42.613"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.606" endtime="20201015 13:37:42.613"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:36.670" endtime="20201015 13:37:42.614"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:36.598" endtime="20201015 13:37:42.614" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="5 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:42.621" endtime="20201015 13:37:42.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.619" endtime="20201015 13:37:42.640"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:42.653" endtime="20201015 13:37:42.665"></status>
</kw>
<msg timestamp="20201015 13:37:42.666" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:42.652" endtime="20201015 13:37:42.666"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.668" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:42.667" endtime="20201015 13:37:42.668"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:42.671" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:42.669" endtime="20201015 13:37:42.671"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:42.649" endtime="20201015 13:37:42.672"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:42.647" endtime="20201015 13:37:42.673"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.645" endtime="20201015 13:37:42.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:42.677" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:42.676" endtime="20201015 13:37:42.677"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.674" endtime="20201015 13:37:42.678"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.645" endtime="20201015 13:37:42.678"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.644" endtime="20201015 13:37:42.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:42.679" endtime="20201015 13:37:42.680"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.643" endtime="20201015 13:37:42.681"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.641" endtime="20201015 13:37:42.681"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.618" endtime="20201015 13:37:42.681"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>5</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:42.690" endtime="20201015 13:37:48.196"></status>
</kw>
<msg timestamp="20201015 13:37:48.197" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:42.689" endtime="20201015 13:37:48.198"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.204" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 5\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '12250'}, {'interval': '14500'}, {'interval': '16750'}, {'interval': '19000'}],...</msg>
<status status="PASS" starttime="20201015 13:37:48.200" endtime="20201015 13:37:48.205"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:48.207" endtime="20201015 13:37:48.211"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.685" endtime="20201015 13:37:48.213"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.683" endtime="20201015 13:37:48.214"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:48.221" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 12250, 14500, 16750, 19000]}</msg>
<status status="PASS" starttime="20201015 13:37:48.216" endtime="20201015 13:37:48.222"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:48.232" level="INFO">${intervals} = [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:48.224" endtime="20201015 13:37:48.233"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.240" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:48.238" endtime="20201015 13:37:48.241"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.244" level="INFO">VALUE: [10000, 12250, 14500, 16750, 19000]</msg>
<status status="PASS" starttime="20201015 13:37:48.242" endtime="20201015 13:37:48.245"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.234" endtime="20201015 13:37:48.246"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:48.259" endtime="20201015 13:37:48.561"></status>
</kw>
<msg timestamp="20201015 13:37:48.564" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.560171222, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.659755028, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:48.256" endtime="20201015 13:37:48.564"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.571" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.560171222, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.659755028, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:48.565" endtime="20201015 13:37:48.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:48.572" endtime="20201015 13:37:48.574"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.251" endtime="20201015 13:37:48.575"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.247" endtime="20201015 13:37:48.575"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:48.579" level="INFO">${FILTERED} = [{'diff': 0.09958380599999994}, {'diff': 0.09958676300000002}, {'diff': 0.09958123600000002}, {'diff': 0.09959463899999998}, {'diff': 0.09958622300000008}, {'diff': 0.09959647199999999}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:37:48.576" endtime="20201015 13:37:48.579"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:48.584" level="INFO">${RESULT} = {'diff': [0.09958380599999994, 0.09958676300000002, 0.09958123600000002, 0.09959463899999998, 0.09958622300000008, 0.09959647199999999, 0.09959597199999992, 0.09958891600000008, 0.09959434700000003, 0...</msg>
<status status="PASS" starttime="20201015 13:37:48.580" endtime="20201015 13:37:48.584"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.588" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:48.587" endtime="20201015 13:37:48.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.590" level="INFO">VALUE: [0.09958380599999994, 0.09958676300000002, 0.09958123600000002, 0.09959463899999998, 0.09958622300000008, 0.09959647199999999, 0.09959597199999992, 0.09958891600000008, 0.09959434700000003, 0.09958094399999995, 0.09958423699999996, 0.09960281900000001, 0.09953306899999981, 0.09958773599999993, 0.09958619400000002, 0.09962329199999997, 0.09956343099999998, 0.09959494399999969, 0.09959501400000015, 0.09959922299999979, 0.09959276399999961, 0.09958290299999994, 0.09959290300000001, 0.09951523599999978, 0.0995921110000002, 0.09957468000000036, 0.09958040199999996, 0.09958809800000035, 0.09958530600000026, 0.09956412499999967, 0.09958101300000033, 0.09957629099999998, 0.09956388899999968, 0.09957061100000031, 0.09958572200000049, 0.09957334699999976, 0.09959218000000014, 0.09957930599999987, 0.099573264, 0.09957216599999974, 0.09958080600000052, 0.09957777799999956, 0.09958255599999966, 0.09957816699999977, 0.09956684700000018, 0.09956166699999969, 0.09958277800000026, 0.0995667220000005, 0.09958245799999954, 0.09956483299999963]</msg>
<status status="PASS" starttime="20201015 13:37:48.589" endtime="20201015 13:37:48.591"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.585" endtime="20201015 13:37:48.591"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:42.682" endtime="20201015 13:37:48.592"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:42.616" endtime="20201015 13:37:48.592" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="10 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:48.599" endtime="20201015 13:37:48.618"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.597" endtime="20201015 13:37:48.619"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:48.633" endtime="20201015 13:37:48.645"></status>
</kw>
<msg timestamp="20201015 13:37:48.646" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:48.631" endtime="20201015 13:37:48.646"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.648" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:48.647" endtime="20201015 13:37:48.648"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:48.651" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:48.649" endtime="20201015 13:37:48.651"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:48.628" endtime="20201015 13:37:48.652"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:48.626" endtime="20201015 13:37:48.652"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.624" endtime="20201015 13:37:48.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:48.656" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:48.656" endtime="20201015 13:37:48.657"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.654" endtime="20201015 13:37:48.657"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.623" endtime="20201015 13:37:48.658"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.623" endtime="20201015 13:37:48.658"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:48.659" endtime="20201015 13:37:48.661"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.621" endtime="20201015 13:37:48.662"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.619" endtime="20201015 13:37:48.662"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.596" endtime="20201015 13:37:48.662"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>10</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:48.670" endtime="20201015 13:37:54.186"></status>
</kw>
<msg timestamp="20201015 13:37:54.187" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:48.669" endtime="20201015 13:37:54.188"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.193" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 10\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '20000'}, {'interval': '30000'}, {'interval': '40000'}, {'interval': '50000'},...</msg>
<status status="PASS" starttime="20201015 13:37:54.189" endtime="20201015 13:37:54.193"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:54.195" endtime="20201015 13:37:54.198"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.666" endtime="20201015 13:37:54.199"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.664" endtime="20201015 13:37:54.200"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:54.205" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]}</msg>
<status status="PASS" starttime="20201015 13:37:54.201" endtime="20201015 13:37:54.206"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:37:54.215" level="INFO">${intervals} = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:54.207" endtime="20201015 13:37:54.216"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.223" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:37:54.221" endtime="20201015 13:37:54.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.227" level="INFO">VALUE: [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]</msg>
<status status="PASS" starttime="20201015 13:37:54.225" endtime="20201015 13:37:54.228"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.217" endtime="20201015 13:37:54.229"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:54.242" endtime="20201015 13:37:54.543"></status>
</kw>
<msg timestamp="20201015 13:37:54.546" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563401306, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.662978569, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:54.239" endtime="20201015 13:37:54.546"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.554" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.563401306, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.662978569, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:37:54.547" endtime="20201015 13:37:54.554"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:54.555" endtime="20201015 13:37:54.556"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.233" endtime="20201015 13:37:54.557"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.230" endtime="20201015 13:37:54.557"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:37:54.561" level="INFO">${FILTERED} = [{'diff': 0.09957726299999992}, {'diff': 0.09956579099999996}, {'diff': 0.09957404199999997}, {'diff': 0.09957195800000007}, {'diff': 0.09957043100000007}, {'diff': 0.09956619400000011}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:37:54.558" endtime="20201015 13:37:54.561"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:37:54.566" level="INFO">${RESULT} = {'diff': [0.09957726299999992, 0.09956579099999996, 0.09957404199999997, 0.09957195800000007, 0.09957043100000007, 0.09956619400000011, 0.09957859700000005, 0.09956563899999993, 0.09957340299999995, 0...</msg>
<status status="PASS" starttime="20201015 13:37:54.562" endtime="20201015 13:37:54.566"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.570" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:37:54.569" endtime="20201015 13:37:54.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.573" level="INFO">VALUE: [0.09957726299999992, 0.09956579099999996, 0.09957404199999997, 0.09957195800000007, 0.09957043100000007, 0.09956619400000011, 0.09957859700000005, 0.09956563899999993, 0.09957340299999995, 0.09955166700000007, 0.09957429099999993, 0.09957286099999996, 0.09956399999999999, 0.09957061099999986, 0.09956930600000025, 0.09956226399999979, 0.09957294500000025, 0.099560125, 0.09957587499999976, 0.09956440300000002, 0.09956884700000002, 0.09956595899999998, 0.09957193100000028, 0.09956808299999986, 0.09956627800000017, 0.09956158399999993, 0.09957688800000009, 0.09956534800000005, 0.09957554200000018, 0.09957597299999987, 0.09958029200000018, 0.0995693339999999, 0.09957588900000003, 0.09958929200000011, 0.09958970899999997, 0.09958754200000008, 0.09958695899999981, 0.09957375000000024, 0.09958009699999959, 0.09958294399999978, 0.09958723599999963, 0.09958970799999989, 0.09958400000000012, 0.09958187500000015, 0.09958779200000034, 0.09959326400000013, 0.09958877799999932, 0.09959351400000038, 0.09957495799999982, 0.0995904310000002]</msg>
<status status="PASS" starttime="20201015 13:37:54.571" endtime="20201015 13:37:54.573"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.567" endtime="20201015 13:37:54.574"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:48.663" endtime="20201015 13:37:54.574"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:48.594" endtime="20201015 13:37:54.575" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="15 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:37:54.581" endtime="20201015 13:37:54.600"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.580" endtime="20201015 13:37:54.601"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:54.616" endtime="20201015 13:37:54.628"></status>
</kw>
<msg timestamp="20201015 13:37:54.628" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:54.612" endtime="20201015 13:37:54.628"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.631" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:37:54.629" endtime="20201015 13:37:54.631"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:37:54.634" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:37:54.632" endtime="20201015 13:37:54.634"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:54.610" endtime="20201015 13:37:54.635"></status>
</kw>
<status status="FAIL" starttime="20201015 13:37:54.607" endtime="20201015 13:37:54.635"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.606" endtime="20201015 13:37:54.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:37:54.639" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:37:54.638" endtime="20201015 13:37:54.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.636" endtime="20201015 13:37:54.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.605" endtime="20201015 13:37:54.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.605" endtime="20201015 13:37:54.640"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:54.641" endtime="20201015 13:37:54.642"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.603" endtime="20201015 13:37:54.643"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.602" endtime="20201015 13:37:54.643"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.578" endtime="20201015 13:37:54.643"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>15</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:37:54.652" endtime="20201015 13:38:00.180"></status>
</kw>
<msg timestamp="20201015 13:38:00.181" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:37:54.650" endtime="20201015 13:38:00.182"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.187" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 15\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '16428'}, {'interval': '22856'}, {'interval': '29284'}, {'interval': '35712'},...</msg>
<status status="PASS" starttime="20201015 13:38:00.183" endtime="20201015 13:38:00.188"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:00.189" endtime="20201015 13:38:00.192"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.647" endtime="20201015 13:38:00.193"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.645" endtime="20201015 13:38:00.194"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:00.200" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]}</msg>
<status status="PASS" starttime="20201015 13:38:00.196" endtime="20201015 13:38:00.201"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:00.210" level="INFO">${intervals} = [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:00.202" endtime="20201015 13:38:00.211"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.218" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:00.216" endtime="20201015 13:38:00.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.222" level="INFO">VALUE: [10000, 16428, 22856, 29284, 35712, 42140, 48568, 54996, 61424, 67852, 74280, 80708, 87136, 93564, 99992]</msg>
<status status="PASS" starttime="20201015 13:38:00.220" endtime="20201015 13:38:00.223"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.212" endtime="20201015 13:38:00.224"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:00.236" endtime="20201015 13:38:00.536"></status>
</kw>
<msg timestamp="20201015 13:38:00.539" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564269167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.663721431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:00.234" endtime="20201015 13:38:00.539"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.547" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564269167, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.663721431, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:00.540" endtime="20201015 13:38:00.547"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:00.548" endtime="20201015 13:38:00.550"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.229" endtime="20201015 13:38:00.550"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.225" endtime="20201015 13:38:00.551"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:00.554" level="INFO">${FILTERED} = [{'diff': 0.09945226400000007}, {'diff': 0.09949800000000009}, {'diff': 0.0997165000000001}, {'diff': 0.09944447300000003}, {'diff': 0.0995855}, {'diff': 0.09957972200000009}, {'diff': 0.0995719310000...</msg>
<status status="PASS" starttime="20201015 13:38:00.551" endtime="20201015 13:38:00.555"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:00.558" level="INFO">${RESULT} = {'diff': [0.09945226400000007, 0.09949800000000009, 0.0997165000000001, 0.09944447300000003, 0.0995855, 0.09957972200000009, 0.09957193100000006, 0.0995923190000001, 0.09956555599999994, 0.09959104199...</msg>
<status status="PASS" starttime="20201015 13:38:00.555" endtime="20201015 13:38:00.558"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.562" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:00.561" endtime="20201015 13:38:00.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.565" level="INFO">VALUE: [0.09945226400000007, 0.09949800000000009, 0.0997165000000001, 0.09944447300000003, 0.0995855, 0.09957972200000009, 0.09957193100000006, 0.0995923190000001, 0.09956555599999994, 0.09959104199999991, 0.09957820800000006, 0.09960305600000008, 0.09955400000000014, 0.09957572199999998, 0.0995872499999999, 0.09957501400000002, 0.0995900139999999, 0.09958008299999976, 0.09957851400000006, 0.09959633300000004, 0.09960208300000017, 0.09958842999999984, 0.09959751400000005, 0.09958737500000003, 0.09958929200000011, 0.09959206900000028, 0.09960202699999998, 0.09960348599999991, 0.09959523600000031, 0.09962473599999999, 0.09955927800000008, 0.09957561100000012, 0.0995810279999998, 0.09959666700000014, 0.09959386099999978, 0.09958687500000085, 0.09957708299999979, 0.09957538899999996, 0.0995786110000001, 0.0995877639999998, 0.09957381899999973, 0.0996552640000008, 0.0995046670000006, 0.09959601400000029, 0.09958417999999991, 0.09957744500000043, 0.09959000000000007, 0.09957947200000028, 0.09958265299999969, 0.09959730500000052]</msg>
<status status="PASS" starttime="20201015 13:38:00.563" endtime="20201015 13:38:00.565"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.559" endtime="20201015 13:38:00.566"></status>
</kw>
<status status="PASS" starttime="20201015 13:37:54.644" endtime="20201015 13:38:00.566"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:37:54.576" endtime="20201015 13:38:00.567" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="20 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:00.573" endtime="20201015 13:38:00.593"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.572" endtime="20201015 13:38:00.593"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:00.607" endtime="20201015 13:38:00.619"></status>
</kw>
<msg timestamp="20201015 13:38:00.620" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:00.605" endtime="20201015 13:38:00.620"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.622" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:00.621" endtime="20201015 13:38:00.622"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:00.625" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:00.623" endtime="20201015 13:38:00.625"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:00.603" endtime="20201015 13:38:00.626"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:00.600" endtime="20201015 13:38:00.627"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.598" endtime="20201015 13:38:00.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:00.631" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:00.630" endtime="20201015 13:38:00.631"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.628" endtime="20201015 13:38:00.631"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.598" endtime="20201015 13:38:00.631"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.597" endtime="20201015 13:38:00.632"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:00.632" endtime="20201015 13:38:00.634"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.596" endtime="20201015 13:38:00.634"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.594" endtime="20201015 13:38:00.635"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.571" endtime="20201015 13:38:00.635"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>20</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:00.643" endtime="20201015 13:38:06.184"></status>
</kw>
<msg timestamp="20201015 13:38:06.185" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:00.641" endtime="20201015 13:38:06.185"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.190" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 20\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '14736'}, {'interval': '19472'}, {'interval': '24208'}, {'interval': '28944'},...</msg>
<status status="PASS" starttime="20201015 13:38:06.187" endtime="20201015 13:38:06.191"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:06.193" endtime="20201015 13:38:06.196"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.639" endtime="20201015 13:38:06.197"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.637" endtime="20201015 13:38:06.198"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:06.205" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]}</msg>
<status status="PASS" starttime="20201015 13:38:06.200" endtime="20201015 13:38:06.205"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:06.215" level="INFO">${intervals} = [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:06.207" endtime="20201015 13:38:06.215"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.225" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:06.223" endtime="20201015 13:38:06.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.229" level="INFO">VALUE: [10000, 14736, 19472, 24208, 28944, 33680, 38416, 43152, 47888, 52624, 57360, 62096, 66832, 71568, 76304, 81040, 85776, 90512, 95248, 99984]</msg>
<status status="PASS" starttime="20201015 13:38:06.227" endtime="20201015 13:38:06.230"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.217" endtime="20201015 13:38:06.231"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:06.244" endtime="20201015 13:38:06.543"></status>
</kw>
<msg timestamp="20201015 13:38:06.546" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564443736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664037111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:06.241" endtime="20201015 13:38:06.546"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.553" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.564443736, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.664037111, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:06.547" endtime="20201015 13:38:06.554"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:06.554" endtime="20201015 13:38:06.556"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.235" endtime="20201015 13:38:06.557"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.232" endtime="20201015 13:38:06.557"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:06.561" level="INFO">${FILTERED} = [{'diff': 0.09959337499999998}, {'diff': 0.09959934699999995}, {'diff': 0.09958695800000006}, {'diff': 0.09957802800000004}, {'diff': 0.09966609699999995}, {'diff': 0.09949465300000004}, {'diff': 0.09...</msg>
<status status="PASS" starttime="20201015 13:38:06.558" endtime="20201015 13:38:06.561"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:06.565" level="INFO">${RESULT} = {'diff': [0.09959337499999998, 0.09959934699999995, 0.09958695800000006, 0.09957802800000004, 0.09966609699999995, 0.09949465300000004, 0.09958636100000007, 0.09958599999999995, 0.09959231899999987, 0...</msg>
<status status="PASS" starttime="20201015 13:38:06.562" endtime="20201015 13:38:06.565"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.569" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:06.568" endtime="20201015 13:38:06.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.572" level="INFO">VALUE: [0.09959337499999998, 0.09959934699999995, 0.09958695800000006, 0.09957802800000004, 0.09966609699999995, 0.09949465300000004, 0.09958636100000007, 0.09958599999999995, 0.09959231899999987, 0.09959995899999985, 0.09958584699999995, 0.09948933299999996, 0.0994927080000001, 0.099494945, 0.099733042, 0.09944574999999967, 0.09958975000000025, 0.09958669400000009, 0.0995877359999997, 0.09958242999999989, 0.09960194499999986, 0.09958490299999978, 0.09959561199999989, 0.0995859440000002, 0.09959357000000013, 0.09966627799999994, 0.09949366599999987, 0.09958202799999993, 0.09957534800000012, 0.09956672300000013, 0.0995862780000003, 0.09957319500000006, 0.09958076399999971, 0.099581959, 0.09957387500000037, 0.0995739440000003, 0.09957082000000028, 0.09959038900000028, 0.0995841939999993, 0.09958499999999937, 0.09960676399999979, 0.09956847199999963, 0.09958022200000016, 0.09957452799999977, 0.09958426399999976, 0.0995770690000004, 0.09958320800000031, 0.09958749999999927, 0.09958448599999947, 0.09957751399999992]</msg>
<status status="PASS" starttime="20201015 13:38:06.571" endtime="20201015 13:38:06.572"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.565" endtime="20201015 13:38:06.573"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:00.635" endtime="20201015 13:38:06.573"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:00.568" endtime="20201015 13:38:06.574" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="25 BG Timers">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>PHILIP Reset</arg>
<arg>API Sync Shell</arg>
</arguments>
<kw name="PHILIP Reset" library="philip.keywords">
<doc>Reset the PHiLIP MCU</doc>
<kw name="Reset Mcu" library="PHILIP">
<doc>Resets the device</doc>
<status status="PASS" starttime="20201015 13:38:06.581" endtime="20201015 13:38:06.600"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.579" endtime="20201015 13:38:06.601"></status>
</kw>
<kw name="API Sync Shell" library="api_shell.keywords">
<doc>Verify that the DUT runs the required API test firmware</doc>
<kw name="API Call Repeat on Timeout" library="api_shell.keywords">
<doc>Repeats the given API ``call`` up to 5 times on timeout.</doc>
<arguments>
<arg>Get Metadata</arg>
</arguments>
<kw name="${i} IN RANGE [ 0 | 16 ]" type="for">
<kw name="${i} = 0" type="foritem">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>API Call Should Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Should Timeout" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not timeout.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Timeout</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Get Metadata" library="DutDeviceIf">
<doc>Get the metadata of the firmware.</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:06.614" endtime="20201015 13:38:06.626"></status>
</kw>
<msg timestamp="20201015 13:38:06.626" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:06.612" endtime="20201015 13:38:06.626"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.629" level="INFO">${RESULT} = {'cmd': 'get_metadata', 'msg': ['get_metadata\r\n'], 'data': ['saml10-xpro', '2020.07', 'tests_ztimer_benchmarks'], 'result': 'Success'}</msg>
<status status="PASS" starttime="20201015 13:38:06.627" endtime="20201015 13:38:06.629"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<msg timestamp="20201015 13:38:06.632" level="FAIL">'Success' does not contain 'Timeout'</msg>
<status status="FAIL" starttime="20201015 13:38:06.630" endtime="20201015 13:38:06.632"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:06.610" endtime="20201015 13:38:06.633"></status>
</kw>
<status status="FAIL" starttime="20201015 13:38:06.607" endtime="20201015 13:38:06.633"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.606" endtime="20201015 13:38:06.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${RESULT['result']}"!="Timeout"</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20201015 13:38:06.637" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20201015 13:38:06.636" endtime="20201015 13:38:06.637"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.634" endtime="20201015 13:38:06.638"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.605" endtime="20201015 13:38:06.638"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.605" endtime="20201015 13:38:06.638"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>Success</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:06.639" endtime="20201015 13:38:06.640"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.603" endtime="20201015 13:38:06.641"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.602" endtime="20201015 13:38:06.641"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.578" endtime="20201015 13:38:06.641"></status>
</kw>
<kw name="Measure Sleep Jitter">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>25</arg>
</arguments>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>Sleep Jitter</arg>
<arg>${bg_timer_count}</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Sleep Jitter" library="DutDeviceIf">
<doc>Run the sleep jitter benchmark</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:06.651" endtime="20201015 13:38:12.204"></status>
</kw>
<msg timestamp="20201015 13:38:12.205" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:06.648" endtime="20201015 13:38:12.205"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:12.211" level="INFO">${RESULT} = {'cmd': 'sleep_jitter', 'msg': ['sleep_jitter 25\r\n'], 'data': [{'focus': '100000'}, {'interval': '10000'}, {'interval': '13750'}, {'interval': '17500'}, {'interval': '21250'}, {'interval': '25000'},...</msg>
<status status="PASS" starttime="20201015 13:38:12.207" endtime="20201015 13:38:12.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:12.213" endtime="20201015 13:38:12.216"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.645" endtime="20201015 13:38:12.217"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.643" endtime="20201015 13:38:12.218"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${RESULT['data']}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:12.225" level="INFO">${RESULT} = {'focus': [100000], 'interval': [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250,...</msg>
<status status="PASS" starttime="20201015 13:38:12.220" endtime="20201015 13:38:12.225"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$RESULT.get('interval', [])</arg>
</arguments>
<assign>
<var>${intervals}</var>
</assign>
<msg timestamp="20201015 13:38:12.236" level="INFO">${intervals} = [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:12.227" endtime="20201015 13:38:12.236"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>intervals</arg>
<arg>${intervals}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:12.243" level="INFO">NAME: intervals</msg>
<status status="PASS" starttime="20201015 13:38:12.241" endtime="20201015 13:38:12.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:12.247" level="INFO">VALUE: [10000, 13750, 17500, 21250, 25000, 28750, 32500, 36250, 40000, 43750, 47500, 51250, 55000, 58750, 62500, 66250, 70000, 73750, 77500, 81250, 85000, 88750, 92500, 96250, 100000]</msg>
<status status="PASS" starttime="20201015 13:38:12.245" endtime="20201015 13:38:12.248"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:12.237" endtime="20201015 13:38:12.249"></status>
</kw>
<kw name="API Call Should Succeed" library="api_shell.keywords">
<doc>Fails if the given API ``call`` does not succeed.</doc>
<arguments>
<arg>PHILIP.Read Trace</arg>
</arguments>
<kw name="API Call Expect" library="api_shell.keywords">
<doc>Fails if the result of the given ``call`` does not
match the expected outcome.</doc>
<arguments>
<arg>Success</arg>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${call}</arg>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<kw name="Read Trace" library="PHILIP">
<doc>Reads event trace from the dut</doc>
<arguments>
<arg>@{args}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:12.262" endtime="20201015 13:38:12.560"></status>
</kw>
<msg timestamp="20201015 13:38:12.562" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.566150236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665907639, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:12.259" endtime="20201015 13:38:12.563"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RESULT}</arg>
</arguments>
<msg timestamp="20201015 13:38:12.570" level="INFO">${RESULT} = {'cmd': 'read_trace()', 'result': 'Success', 'data': [{'time': 0.566150236, 'source': 'DUT_IC', 'event': 'RISING', 'diff': 0, 'source_diff': 0}, {'time': 0.665907639, 'source': 'DUT_IC', 'event': 'FAL...</msg>
<status status="PASS" starttime="20201015 13:38:12.563" endtime="20201015 13:38:12.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT['result']}</arg>
<arg>${expect}</arg>
</arguments>
<status status="PASS" starttime="20201015 13:38:12.571" endtime="20201015 13:38:12.573"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:12.254" endtime="20201015 13:38:12.573"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:12.250" endtime="20201015 13:38:12.574"></status>
</kw>
<kw name="Filter Trace" library="DutDeviceIf">
<doc>Filter the given data from a trace</doc>
<arguments>
<arg>trace=${RESULT['data']}</arg>
<arg>select_vals=FALLING</arg>
<arg>data_keys=diff</arg>
</arguments>
<assign>
<var>${FILTERED}</var>
</assign>
<msg timestamp="20201015 13:38:12.577" level="INFO">${FILTERED} = [{'diff': 0.09975740300000002}, {'diff': 0.0994958749999999}, {'diff': 0.09941709700000001}, {'diff': 0.09958052799999995}, {'diff': 0.09958708399999994}, {'diff': 0.09957662500000009}, {'diff': 0.099...</msg>
<status status="PASS" starttime="20201015 13:38:12.574" endtime="20201015 13:38:12.578"></status>
</kw>
<kw name="Compress Result" library="DutDeviceIf">
<doc>Only use with data containing dicts as follows:</doc>
<arguments>
<arg>${FILTERED}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20201015 13:38:12.582" level="INFO">${RESULT} = {'diff': [0.09975740300000002, 0.0994958749999999, 0.09941709700000001, 0.09958052799999995, 0.09958708399999994, 0.09957662500000009, 0.0995825560000001, 0.09958918100000003, 0.09958558299999987, 0.0...</msg>
<status status="PASS" starttime="20201015 13:38:12.578" endtime="20201015 13:38:12.582"></status>
</kw>
<kw name="Record Property" library="util.keywords">
<doc>Adds the given property in output</doc>
<arguments>
<arg>trace</arg>
<arg>${RESULT['diff']}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NAME: ${name}</arg>
</arguments>
<msg timestamp="20201015 13:38:12.586" level="INFO">NAME: trace</msg>
<status status="PASS" starttime="20201015 13:38:12.585" endtime="20201015 13:38:12.587"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>VALUE: ${value}</arg>
</arguments>
<msg timestamp="20201015 13:38:12.588" level="INFO">VALUE: [0.09975740300000002, 0.0994958749999999, 0.09941709700000001, 0.09958052799999995, 0.09958708399999994, 0.09957662500000009, 0.0995825560000001, 0.09958918100000003, 0.09958558299999987, 0.09957456900000006, 0.09957884700000008, 0.09960711100000008, 0.09955313899999996, 0.09956984699999993, 0.09957061099999986, 0.09957662500000009, 0.09958861200000024, 0.09958798599999996, 0.09959037500000001, 0.09959188900000004, 0.09960541699999981, 0.0995943610000003, 0.09958802799999988, 0.09959149999999983, 0.09958620800000029, 0.09968741700000017, 0.09952020799999994, 0.09959922200000015, 0.09958234699999968, 0.09960279200000022, 0.099590348, 0.09959469499999996, 0.09958555600000008, 0.0995853470000001, 0.09965037499999951, 0.09953966699999928, 0.09959245800000005, 0.09958011100000075, 0.09957286200000048, 0.09959969499999932, 0.099576055, 0.09959047300000012, 0.09958877800000021, 0.09957470800000046, 0.0995935689999996, 0.09958698599999938, 0.09958098599999943, 0.09958533300000028, 0.09959054099999953, 0.09958874999999967]</msg>
<status status="PASS" starttime="20201015 13:38:12.587" endtime="20201015 13:38:12.589"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:12.583" endtime="20201015 13:38:12.589"></status>
</kw>
<status status="PASS" starttime="20201015 13:38:06.642" endtime="20201015 13:38:12.590"></status>
</kw>
<tags>
<tag>APP_tests_ztimer_benchmarks</tag>
<tag>BOARD_saml10-xpro</tag>
<tag>dev</tag>
</tags>
<status status="PASS" starttime="20201015 13:38:06.575" endtime="20201015 13:38:12.590" critical="yes"></status>
</test>
<status status="PASS" starttime="20201015 13:37:35.102" endtime="20201015 13:38:12.597"></status>
</suite>
<metadata>
<item name="RIOT-Application">tests_ztimer_benchmarks</item>
<item name="RIOT-Board">saml10-xpro</item>
<item name="RIOT-Version">2020.07</item>
</metadata>
<status status="PASS" starttime="20201015 13:37:32.901" endtime="20201015 13:38:12.622"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="0" info="non-critical">skip</stat>
<stat pass="0" fail="0" info="non-critical">warn-if-failed</stat>
<stat pass="7" fail="0">APP_tests_ztimer_benchmarks</stat>
<stat pass="7" fail="0">BOARD_saml10-xpro</stat>
<stat pass="7" fail="0">dev</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="tests_ztimer_benchmarks">tests_ztimer_benchmarks</stat>
<stat pass="1" fail="0" id="s1-s1" name="Timer Version">tests_ztimer_benchmarks.Timer Version</stat>
<stat pass="6" fail="0" id="s1-s2" name="Sleep Jitter">tests_ztimer_benchmarks.Sleep Jitter</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
